### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Configuration.PropertyPlaceholderHelper
  commentId: T:Steeltoe.Common.Configuration.PropertyPlaceholderHelper
  id: PropertyPlaceholderHelper
  parent: Steeltoe.Common.Configuration
  children:
  - Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders(IConfiguration,ILogger,System.Boolean)
  - Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders(System.String,IConfiguration,ILogger)
  langs:
  - csharp
  - vb
  name: PropertyPlaceholderHelper
  nameWithType: PropertyPlaceholderHelper
  fullName: Steeltoe.Common.Configuration.PropertyPlaceholderHelper
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Configuration/PropertyPlaceHolderHelper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: PropertyPlaceholderHelper
    path: ../Steeltoe/src/Common/src/Common/Configuration/PropertyPlaceHolderHelper.cs
    startLine: 18
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Configuration
  summary: "\nUtility class for working with configuration values that have placeholders in them.\nA placeholder takes the form of <pre><code> ${some:config:reference?default_if_not_present}></code></pre>\nNote: This was &quot;inspired&quot; by the Spring class: PropertyPlaceholderHelper\n"
  example: []
  syntax:
    content: public static class PropertyPlaceholderHelper
    content.vb: Public Module PropertyPlaceholderHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders(System.String,IConfiguration,ILogger)
  commentId: M:Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders(System.String,IConfiguration,ILogger)
  id: ResolvePlaceholders(System.String,IConfiguration,ILogger)
  parent: Steeltoe.Common.Configuration.PropertyPlaceholderHelper
  langs:
  - csharp
  - vb
  name: ResolvePlaceholders(String, IConfiguration, ILogger)
  nameWithType: PropertyPlaceholderHelper.ResolvePlaceholders(String, IConfiguration, ILogger)
  fullName: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders(System.String, IConfiguration, ILogger)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Configuration/PropertyPlaceHolderHelper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ResolvePlaceholders
    path: ../Steeltoe/src/Common/src/Common/Configuration/PropertyPlaceHolderHelper.cs
    startLine: 32
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Configuration
  summary: "\nReplaces all placeholders of the form <pre><code> ${some:config:reference?default_if_not_present}</code></pre>\nwith the corresponding value from the supplied <see cref=\"!:IConfiguration\"></see>.\n"
  example: []
  syntax:
    content: public static string ResolvePlaceholders(string property, IConfiguration config, ILogger logger = null)
    parameters:
    - id: property
      type: System.String
      description: the string containing one or more placeholders
    - id: config
      type: IConfiguration
      description: the configuration used for finding replace values.
    - id: logger
      type: ILogger
      description: optional logger
    return:
      type: System.String
      description: the supplied value with the placeholders replaced inline
    content.vb: Public Shared Function ResolvePlaceholders(property As String, config As IConfiguration, logger As ILogger = Nothing) As String
  overload: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders(IConfiguration,ILogger,System.Boolean)
  commentId: M:Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders(IConfiguration,ILogger,System.Boolean)
  id: GetResolvedConfigurationPlaceholders(IConfiguration,ILogger,System.Boolean)
  parent: Steeltoe.Common.Configuration.PropertyPlaceholderHelper
  langs:
  - csharp
  - vb
  name: GetResolvedConfigurationPlaceholders(IConfiguration, ILogger, Boolean)
  nameWithType: PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders(IConfiguration, ILogger, Boolean)
  fullName: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders(IConfiguration, ILogger, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Configuration/PropertyPlaceHolderHelper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetResolvedConfigurationPlaceholders
    path: ../Steeltoe/src/Common/src/Common/Configuration/PropertyPlaceHolderHelper.cs
    startLine: 45
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Configuration
  summary: "\nFinds all placeholders of the form <pre><code> ${some:config:reference?default_if_not_present}</code></pre>,\nresolves them from other values in the configuration, returns a new list to add to your configuration.\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<string, string>> GetResolvedConfigurationPlaceholders(IConfiguration config, ILogger logger = null, bool useEmptyStringIfNotFound = true)
    parameters:
    - id: config
      type: IConfiguration
      description: The configuration to use as both source and target for placeholder resolution.
    - id: logger
      type: ILogger
      description: Optional logger
    - id: useEmptyStringIfNotFound
      type: System.Boolean
      description: Replace the placeholder with an empty string, so the application does not see it
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: A list of keys with resolved values. Add to your <see cref="!:ConfigurationBuilder"></see> with method &apos;AddInMemoryCollection&apos;
    content.vb: Public Shared Function GetResolvedConfigurationPlaceholders(config As IConfiguration, logger As ILogger = Nothing, useEmptyStringIfNotFound As Boolean = True) As IEnumerable(Of KeyValuePair(Of String, String))
  overload: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Common.Configuration
  commentId: N:Steeltoe.Common.Configuration
  name: Steeltoe.Common.Configuration
  nameWithType: Steeltoe.Common.Configuration
  fullName: Steeltoe.Common.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders*
  commentId: Overload:Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders
  name: ResolvePlaceholders
  nameWithType: PropertyPlaceholderHelper.ResolvePlaceholders
  fullName: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.ResolvePlaceholders
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: IConfiguration
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders*
  commentId: Overload:Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders
  name: GetResolvedConfigurationPlaceholders
  nameWithType: PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders
  fullName: Steeltoe.Common.Configuration.PropertyPlaceholderHelper.GetResolvedConfigurationPlaceholders
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
