### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.AtomicReference`1
  commentId: T:Steeltoe.Common.Util.AtomicReference`1
  id: AtomicReference`1
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.AtomicReference`1.#ctor
  - Steeltoe.Common.Util.AtomicReference`1.#ctor(`0)
  - Steeltoe.Common.Util.AtomicReference`1.CompareAndSet(`0,`0)
  - Steeltoe.Common.Util.AtomicReference`1.GetAndSet(`0)
  - Steeltoe.Common.Util.AtomicReference`1.Value
  langs:
  - csharp
  - vb
  name: AtomicReference<T>
  nameWithType: AtomicReference<T>
  fullName: Steeltoe.Common.Util.AtomicReference<T>
  type: Class
  source:
    remote:
      path: src/Common/src/Abstractions/Util/AtomicReference.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AtomicReference
    path: ../Steeltoe/src/Common/src/Abstractions/Util/AtomicReference.cs
    startLine: 8
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: >-
      public class AtomicReference<T>

          where T : class
    typeParameters:
    - id: T
    content.vb: Public Class AtomicReference(Of T As Class)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: AtomicReference(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T)
  name.vb: AtomicReference(Of T)
- uid: Steeltoe.Common.Util.AtomicReference`1.#ctor
  commentId: M:Steeltoe.Common.Util.AtomicReference`1.#ctor
  id: '#ctor'
  parent: Steeltoe.Common.Util.AtomicReference`1
  langs:
  - csharp
  - vb
  name: AtomicReference()
  nameWithType: AtomicReference<T>.AtomicReference()
  fullName: Steeltoe.Common.Util.AtomicReference<T>.AtomicReference()
  type: Constructor
  source:
    remote:
      path: src/Common/src/Abstractions/Util/AtomicReference.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Abstractions/Util/AtomicReference.cs
    startLine: 13
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public AtomicReference()
    content.vb: Public Sub New
  overload: Steeltoe.Common.Util.AtomicReference`1.#ctor*
  nameWithType.vb: AtomicReference(Of T).AtomicReference()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).AtomicReference()
- uid: Steeltoe.Common.Util.AtomicReference`1.#ctor(`0)
  commentId: M:Steeltoe.Common.Util.AtomicReference`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Steeltoe.Common.Util.AtomicReference`1
  langs:
  - csharp
  - vb
  name: AtomicReference(T)
  nameWithType: AtomicReference<T>.AtomicReference(T)
  fullName: Steeltoe.Common.Util.AtomicReference<T>.AtomicReference(T)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Abstractions/Util/AtomicReference.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Abstractions/Util/AtomicReference.cs
    startLine: 18
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public AtomicReference(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub New(value As T)
  overload: Steeltoe.Common.Util.AtomicReference`1.#ctor*
  nameWithType.vb: AtomicReference(Of T).AtomicReference(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).AtomicReference(T)
- uid: Steeltoe.Common.Util.AtomicReference`1.Value
  commentId: P:Steeltoe.Common.Util.AtomicReference`1.Value
  id: Value
  parent: Steeltoe.Common.Util.AtomicReference`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: AtomicReference<T>.Value
  fullName: Steeltoe.Common.Util.AtomicReference<T>.Value
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Util/AtomicReference.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Value
    path: ../Steeltoe/src/Common/src/Abstractions/Util/AtomicReference.cs
    startLine: 23
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: Steeltoe.Common.Util.AtomicReference`1.Value*
  nameWithType.vb: AtomicReference(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).Value
- uid: Steeltoe.Common.Util.AtomicReference`1.CompareAndSet(`0,`0)
  commentId: M:Steeltoe.Common.Util.AtomicReference`1.CompareAndSet(`0,`0)
  id: CompareAndSet(`0,`0)
  parent: Steeltoe.Common.Util.AtomicReference`1
  langs:
  - csharp
  - vb
  name: CompareAndSet(T, T)
  nameWithType: AtomicReference<T>.CompareAndSet(T, T)
  fullName: Steeltoe.Common.Util.AtomicReference<T>.CompareAndSet(T, T)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/AtomicReference.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CompareAndSet
    path: ../Steeltoe/src/Common/src/Abstractions/Util/AtomicReference.cs
    startLine: 36
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool CompareAndSet(T expected, T update)
    parameters:
    - id: expected
      type: '{T}'
    - id: update
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function CompareAndSet(expected As T, update As T) As Boolean
  overload: Steeltoe.Common.Util.AtomicReference`1.CompareAndSet*
  nameWithType.vb: AtomicReference(Of T).CompareAndSet(T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).CompareAndSet(T, T)
- uid: Steeltoe.Common.Util.AtomicReference`1.GetAndSet(`0)
  commentId: M:Steeltoe.Common.Util.AtomicReference`1.GetAndSet(`0)
  id: GetAndSet(`0)
  parent: Steeltoe.Common.Util.AtomicReference`1
  langs:
  - csharp
  - vb
  name: GetAndSet(T)
  nameWithType: AtomicReference<T>.GetAndSet(T)
  fullName: Steeltoe.Common.Util.AtomicReference<T>.GetAndSet(T)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/AtomicReference.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetAndSet
    path: ../Steeltoe/src/Common/src/Abstractions/Util/AtomicReference.cs
    startLine: 41
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public T GetAndSet(T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: '{T}'
    content.vb: Public Function GetAndSet(value As T) As T
  overload: Steeltoe.Common.Util.AtomicReference`1.GetAndSet*
  nameWithType.vb: AtomicReference(Of T).GetAndSet(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).GetAndSet(T)
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Util.AtomicReference`1.#ctor*
  commentId: Overload:Steeltoe.Common.Util.AtomicReference`1.#ctor
  name: AtomicReference
  nameWithType: AtomicReference<T>.AtomicReference
  fullName: Steeltoe.Common.Util.AtomicReference<T>.AtomicReference
  nameWithType.vb: AtomicReference(Of T).AtomicReference
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).AtomicReference
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Common.Util.AtomicReference`1.Value*
  commentId: Overload:Steeltoe.Common.Util.AtomicReference`1.Value
  name: Value
  nameWithType: AtomicReference<T>.Value
  fullName: Steeltoe.Common.Util.AtomicReference<T>.Value
  nameWithType.vb: AtomicReference(Of T).Value
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).Value
- uid: Steeltoe.Common.Util.AtomicReference`1.CompareAndSet*
  commentId: Overload:Steeltoe.Common.Util.AtomicReference`1.CompareAndSet
  name: CompareAndSet
  nameWithType: AtomicReference<T>.CompareAndSet
  fullName: Steeltoe.Common.Util.AtomicReference<T>.CompareAndSet
  nameWithType.vb: AtomicReference(Of T).CompareAndSet
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).CompareAndSet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Util.AtomicReference`1.GetAndSet*
  commentId: Overload:Steeltoe.Common.Util.AtomicReference`1.GetAndSet
  name: GetAndSet
  nameWithType: AtomicReference<T>.GetAndSet
  fullName: Steeltoe.Common.Util.AtomicReference<T>.GetAndSet
  nameWithType.vb: AtomicReference(Of T).GetAndSet
  fullName.vb: Steeltoe.Common.Util.AtomicReference(Of T).GetAndSet
