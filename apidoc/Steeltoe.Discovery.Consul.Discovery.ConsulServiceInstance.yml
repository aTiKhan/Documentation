### YamlMime:ManagedReference
items:
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  commentId: T:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  id: ConsulServiceInstance
  parent: Steeltoe.Discovery.Consul.Discovery
  children:
  - Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.#ctor(ServiceEntry)
  - Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host
  - Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure
  - Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata
  - Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port
  - Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId
  - Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri
  langs:
  - csharp
  - vb
  name: ConsulServiceInstance
  nameWithType: ConsulServiceInstance
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  type: Class
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConsulServiceInstance
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 15
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  summary: "\nA Consul service instance constructed from a ServiceEntry\n"
  example: []
  syntax:
    content: 'public class ConsulServiceInstance : IServiceInstance'
    content.vb: >-
      Public Class ConsulServiceInstance

          Inherits IServiceInstance
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.#ctor(ServiceEntry)
  commentId: M:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.#ctor(ServiceEntry)
  id: '#ctor(ServiceEntry)'
  parent: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  langs:
  - csharp
  - vb
  name: ConsulServiceInstance(ServiceEntry)
  nameWithType: ConsulServiceInstance.ConsulServiceInstance(ServiceEntry)
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ConsulServiceInstance(ServiceEntry)
  type: Constructor
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 21
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  summary: "\nInitializes a new instance of the <xref href=\"Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ConsulServiceInstance(ServiceEntry serviceEntry)
    parameters:
    - id: serviceEntry
      type: ServiceEntry
      description: the service entry from the Consul server
    content.vb: Public Sub New(serviceEntry As ServiceEntry)
  overload: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId
  commentId: P:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId
  id: ServiceId
  parent: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  langs:
  - csharp
  - vb
  name: ServiceId
  nameWithType: ConsulServiceInstance.ServiceId
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId
  type: Property
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceId
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 37
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  example: []
  syntax:
    content: public string ServiceId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ServiceId As String
  overload: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host
  commentId: P:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host
  id: Host
  parent: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: ConsulServiceInstance.Host
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host
  type: Property
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Host
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 40
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  example: []
  syntax:
    content: public string Host { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Host As String
  overload: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port
  commentId: P:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port
  id: Port
  parent: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: ConsulServiceInstance.Port
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port
  type: Property
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Port
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 43
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  example: []
  syntax:
    content: public int Port { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Port As Integer
  overload: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure
  commentId: P:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure
  id: IsSecure
  parent: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  langs:
  - csharp
  - vb
  name: IsSecure
  nameWithType: ConsulServiceInstance.IsSecure
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure
  type: Property
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsSecure
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 46
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  example: []
  syntax:
    content: public bool IsSecure { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSecure As Boolean
  overload: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri
  commentId: P:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri
  id: Uri
  parent: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: ConsulServiceInstance.Uri
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri
  type: Property
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Uri
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 49
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  example: []
  syntax:
    content: public Uri Uri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public ReadOnly Property Uri As Uri
  overload: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata
  commentId: P:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata
  id: Metadata
  parent: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: ConsulServiceInstance.Metadata
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata
  type: Property
  source:
    remote:
      path: src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Metadata
    path: ../Steeltoe/src/Discovery/src/Consul/Discovery/ConsulServiceInstance.cs
    startLine: 52
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Discovery
  example: []
  syntax:
    content: public IDictionary<string, string> Metadata { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Metadata As IDictionary(Of String, String)
  overload: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Steeltoe.Discovery.Consul.Discovery
  commentId: N:Steeltoe.Discovery.Consul.Discovery
  name: Steeltoe.Discovery.Consul.Discovery
  nameWithType: Steeltoe.Discovery.Consul.Discovery
  fullName: Steeltoe.Discovery.Consul.Discovery
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  commentId: T:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
  name: ConsulServiceInstance
  nameWithType: ConsulServiceInstance
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.#ctor*
  commentId: Overload:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.#ctor
  name: ConsulServiceInstance
  nameWithType: ConsulServiceInstance.ConsulServiceInstance
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ConsulServiceInstance
- uid: ServiceEntry
  isExternal: true
  name: ServiceEntry
  nameWithType: ServiceEntry
  fullName: ServiceEntry
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId*
  commentId: Overload:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId
  name: ServiceId
  nameWithType: ConsulServiceInstance.ServiceId
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.ServiceId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host*
  commentId: Overload:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host
  name: Host
  nameWithType: ConsulServiceInstance.Host
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Host
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port*
  commentId: Overload:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port
  name: Port
  nameWithType: ConsulServiceInstance.Port
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Port
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure*
  commentId: Overload:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure
  name: IsSecure
  nameWithType: ConsulServiceInstance.IsSecure
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.IsSecure
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri*
  commentId: Overload:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri
  name: Uri
  nameWithType: ConsulServiceInstance.Uri
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Uri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata*
  commentId: Overload:Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata
  name: Metadata
  nameWithType: ConsulServiceInstance.Metadata
  fullName: Steeltoe.Discovery.Consul.Discovery.ConsulServiceInstance.Metadata
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
