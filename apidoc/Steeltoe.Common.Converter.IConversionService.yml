### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Converter.IConversionService
  commentId: T:Steeltoe.Common.Converter.IConversionService
  id: IConversionService
  parent: Steeltoe.Common.Converter
  children:
  - Steeltoe.Common.Converter.IConversionService.CanBypassConvert(System.Type,System.Type)
  - Steeltoe.Common.Converter.IConversionService.CanConvert(System.Type,System.Type)
  - Steeltoe.Common.Converter.IConversionService.Convert(System.Object,System.Type,System.Type)
  - Steeltoe.Common.Converter.IConversionService.Convert``1(System.Object)
  langs:
  - csharp
  - vb
  name: IConversionService
  nameWithType: IConversionService
  fullName: Steeltoe.Common.Converter.IConversionService
  type: Interface
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IConversionService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IConversionService
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IConversionService.cs
    startLine: 11
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nA service interface for type conversions.\n"
  example: []
  syntax:
    content: public interface IConversionService
    content.vb: Public Interface IConversionService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Common.Converter.IConversionService.CanConvert(System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.IConversionService.CanConvert(System.Type,System.Type)
  id: CanConvert(System.Type,System.Type)
  parent: Steeltoe.Common.Converter.IConversionService
  langs:
  - csharp
  - vb
  name: CanConvert(Type, Type)
  nameWithType: IConversionService.CanConvert(Type, Type)
  fullName: Steeltoe.Common.Converter.IConversionService.CanConvert(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IConversionService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanConvert
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IConversionService.cs
    startLine: 19
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nReturns true if objects of the source type can be converted to the target type.\n"
  example: []
  syntax:
    content: bool CanConvert(Type sourceType, Type targetType)
    parameters:
    - id: sourceType
      type: System.Type
      description: the type of the source object
    - id: targetType
      type: System.Type
      description: the type of the target object
    return:
      type: System.Boolean
      description: returns true if the conversion can be performed
    content.vb: Function CanConvert(sourceType As Type, targetType As Type) As Boolean
  overload: Steeltoe.Common.Converter.IConversionService.CanConvert*
- uid: Steeltoe.Common.Converter.IConversionService.CanBypassConvert(System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.IConversionService.CanBypassConvert(System.Type,System.Type)
  id: CanBypassConvert(System.Type,System.Type)
  parent: Steeltoe.Common.Converter.IConversionService
  langs:
  - csharp
  - vb
  name: CanBypassConvert(Type, Type)
  nameWithType: IConversionService.CanBypassConvert(Type, Type)
  fullName: Steeltoe.Common.Converter.IConversionService.CanBypassConvert(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IConversionService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanBypassConvert
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IConversionService.cs
    startLine: 27
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nDetermine whether the conversion between source type and destination type can be bypassed.\n"
  example: []
  syntax:
    content: bool CanBypassConvert(Type sourceType, Type targetType)
    parameters:
    - id: sourceType
      type: System.Type
      description: the source type
    - id: targetType
      type: System.Type
      description: the target type
    return:
      type: System.Boolean
      description: returns true if it can be bypassed
    content.vb: Function CanBypassConvert(sourceType As Type, targetType As Type) As Boolean
  overload: Steeltoe.Common.Converter.IConversionService.CanBypassConvert*
- uid: Steeltoe.Common.Converter.IConversionService.Convert``1(System.Object)
  commentId: M:Steeltoe.Common.Converter.IConversionService.Convert``1(System.Object)
  id: Convert``1(System.Object)
  parent: Steeltoe.Common.Converter.IConversionService
  langs:
  - csharp
  - vb
  name: Convert<T>(Object)
  nameWithType: IConversionService.Convert<T>(Object)
  fullName: Steeltoe.Common.Converter.IConversionService.Convert<T>(System.Object)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IConversionService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Convert
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IConversionService.cs
    startLine: 35
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nConvert the given source to the target\n"
  example: []
  syntax:
    content: T Convert<T>(object source)
    parameters:
    - id: source
      type: System.Object
      description: the source object to convert
    typeParameters:
    - id: T
      description: the target type to convert to
    return:
      type: '{T}'
      description: the converted object
    content.vb: Function Convert(Of T)(source As Object) As T
  overload: Steeltoe.Common.Converter.IConversionService.Convert*
  nameWithType.vb: IConversionService.Convert(Of T)(Object)
  fullName.vb: Steeltoe.Common.Converter.IConversionService.Convert(Of T)(System.Object)
  name.vb: Convert(Of T)(Object)
- uid: Steeltoe.Common.Converter.IConversionService.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.IConversionService.Convert(System.Object,System.Type,System.Type)
  id: Convert(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Converter.IConversionService
  langs:
  - csharp
  - vb
  name: Convert(Object, Type, Type)
  nameWithType: IConversionService.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.IConversionService.Convert(System.Object, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IConversionService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Convert
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IConversionService.cs
    startLine: 44
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nConvert the given source to the specified target type.\n"
  example: []
  syntax:
    content: object Convert(object source, Type sourceType, Type targetType)
    parameters:
    - id: source
      type: System.Object
      description: the object to convert; may be null
    - id: sourceType
      type: System.Type
      description: the source objects type
    - id: targetType
      type: System.Type
      description: the target type to convert to
    return:
      type: System.Object
      description: the converted object
    content.vb: Function Convert(source As Object, sourceType As Type, targetType As Type) As Object
  overload: Steeltoe.Common.Converter.IConversionService.Convert*
references:
- uid: Steeltoe.Common.Converter
  commentId: N:Steeltoe.Common.Converter
  name: Steeltoe.Common.Converter
  nameWithType: Steeltoe.Common.Converter
  fullName: Steeltoe.Common.Converter
- uid: Steeltoe.Common.Converter.IConversionService.CanConvert*
  commentId: Overload:Steeltoe.Common.Converter.IConversionService.CanConvert
  name: CanConvert
  nameWithType: IConversionService.CanConvert
  fullName: Steeltoe.Common.Converter.IConversionService.CanConvert
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Converter.IConversionService.CanBypassConvert*
  commentId: Overload:Steeltoe.Common.Converter.IConversionService.CanBypassConvert
  name: CanBypassConvert
  nameWithType: IConversionService.CanBypassConvert
  fullName: Steeltoe.Common.Converter.IConversionService.CanBypassConvert
- uid: Steeltoe.Common.Converter.IConversionService.Convert*
  commentId: Overload:Steeltoe.Common.Converter.IConversionService.Convert
  name: Convert
  nameWithType: IConversionService.Convert
  fullName: Steeltoe.Common.Converter.IConversionService.Convert
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
