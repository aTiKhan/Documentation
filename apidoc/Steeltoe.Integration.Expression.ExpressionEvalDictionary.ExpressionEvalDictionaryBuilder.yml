### YamlMime:ManagedReference
items:
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  commentId: T:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  id: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  parent: Steeltoe.Integration.Expression
  children:
  - Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.#ctor(System.Collections.Generic.IDictionary{System.String,Steeltoe.Common.Expression.IExpression})
  - Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback(Steeltoe.Integration.Expression.IEvaluationCallback)
  - Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext(Steeltoe.Common.Expression.IEvaluationContext)
  - Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback
  - Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType(System.Type)
  - Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot(System.Object)
  langs:
  - csharp
  - vb
  name: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  type: Class
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ExpressionEvalDictionaryBuilder
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
    startLine: 182
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Expression
  syntax:
    content: public class ExpressionEvalDictionaryBuilder
    content.vb: Public Class ExpressionEvalDictionaryBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.#ctor(System.Collections.Generic.IDictionary{System.String,Steeltoe.Common.Expression.IExpression})
  commentId: M:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.#ctor(System.Collections.Generic.IDictionary{System.String,Steeltoe.Common.Expression.IExpression})
  id: '#ctor(System.Collections.Generic.IDictionary{System.String,Steeltoe.Common.Expression.IExpression})'
  parent: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  langs:
  - csharp
  - vb
  name: ExpressionEvalDictionaryBuilder(IDictionary<String, IExpression>)
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.ExpressionEvalDictionaryBuilder(IDictionary<String, IExpression>)
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.ExpressionEvalDictionaryBuilder(System.Collections.Generic.IDictionary<System.String, Steeltoe.Common.Expression.IExpression>)
  type: Constructor
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
    startLine: 202
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Expression
  syntax:
    content: public ExpressionEvalDictionaryBuilder(IDictionary<string, IExpression> expressions)
    parameters:
    - id: expressions
      type: System.Collections.Generic.IDictionary{System.String,Steeltoe.Common.Expression.IExpression}
    content.vb: Public Sub New(expressions As IDictionary(Of String, IExpression))
  overload: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.#ctor*
  nameWithType.vb: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.ExpressionEvalDictionaryBuilder(IDictionary(Of String, IExpression))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.ExpressionEvalDictionaryBuilder(System.Collections.Generic.IDictionary(Of System.String, Steeltoe.Common.Expression.IExpression))
  name.vb: ExpressionEvalDictionaryBuilder(IDictionary(Of String, IExpression))
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback(Steeltoe.Integration.Expression.IEvaluationCallback)
  commentId: M:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback(Steeltoe.Integration.Expression.IEvaluationCallback)
  id: UsingCallback(Steeltoe.Integration.Expression.IEvaluationCallback)
  parent: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  langs:
  - csharp
  - vb
  name: UsingCallback(IEvaluationCallback)
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback(IEvaluationCallback)
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback(Steeltoe.Integration.Expression.IEvaluationCallback)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UsingCallback
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
    startLine: 209
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Expression
  syntax:
    content: public IExpressionEvalMapFinalBuilder UsingCallback(IEvaluationCallback callback)
    parameters:
    - id: callback
      type: Steeltoe.Integration.Expression.IEvaluationCallback
    return:
      type: Steeltoe.Integration.Expression.IExpressionEvalMapFinalBuilder
    content.vb: Public Function UsingCallback(callback As IEvaluationCallback) As IExpressionEvalMapFinalBuilder
  overload: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback
  commentId: M:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback
  id: UsingSimpleCallback
  parent: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  langs:
  - csharp
  - vb
  name: UsingSimpleCallback()
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback()
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback()
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UsingSimpleCallback
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
    startLine: 215
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Expression
  syntax:
    content: public IExpressionEvalMapFinalBuilder UsingSimpleCallback()
    return:
      type: Steeltoe.Integration.Expression.IExpressionEvalMapFinalBuilder
    content.vb: Public Function UsingSimpleCallback As IExpressionEvalMapFinalBuilder
  overload: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext(Steeltoe.Common.Expression.IEvaluationContext)
  commentId: M:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext(Steeltoe.Common.Expression.IEvaluationContext)
  id: UsingEvaluationContext(Steeltoe.Common.Expression.IEvaluationContext)
  parent: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  langs:
  - csharp
  - vb
  name: UsingEvaluationContext(IEvaluationContext)
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext(IEvaluationContext)
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext(Steeltoe.Common.Expression.IEvaluationContext)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UsingEvaluationContext
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
    startLine: 220
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Expression
  syntax:
    content: public IExpressionEvalMapComponentsBuilder UsingEvaluationContext(IEvaluationContext context)
    parameters:
    - id: context
      type: Steeltoe.Common.Expression.IEvaluationContext
    return:
      type: Steeltoe.Integration.Expression.IExpressionEvalMapComponentsBuilder
    content.vb: Public Function UsingEvaluationContext(context As IEvaluationContext) As IExpressionEvalMapComponentsBuilder
  overload: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot(System.Object)
  commentId: M:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot(System.Object)
  id: WithRoot(System.Object)
  parent: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  langs:
  - csharp
  - vb
  name: WithRoot(Object)
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot(Object)
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot(System.Object)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithRoot
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
    startLine: 226
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Expression
  syntax:
    content: public IExpressionEvalMapComponentsBuilder WithRoot(object root)
    parameters:
    - id: root
      type: System.Object
    return:
      type: Steeltoe.Integration.Expression.IExpressionEvalMapComponentsBuilder
    content.vb: Public Function WithRoot(root As Object) As IExpressionEvalMapComponentsBuilder
  overload: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType(System.Type)
  commentId: M:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType(System.Type)
  id: WithReturnType(System.Type)
  parent: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder
  langs:
  - csharp
  - vb
  name: WithReturnType(Type)
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType(Type)
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType(System.Type)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithReturnType
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Expression/ExpressionEvalDictionary.cs
    startLine: 233
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Expression
  syntax:
    content: public IExpressionEvalMapComponentsBuilder WithReturnType(Type returnType)
    parameters:
    - id: returnType
      type: System.Type
    return:
      type: Steeltoe.Integration.Expression.IExpressionEvalMapComponentsBuilder
    content.vb: Public Function WithReturnType(returnType As Type) As IExpressionEvalMapComponentsBuilder
  overload: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Integration.Expression
  commentId: N:Steeltoe.Integration.Expression
  name: Steeltoe.Integration.Expression
  nameWithType: Steeltoe.Integration.Expression
  fullName: Steeltoe.Integration.Expression
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.#ctor*
  commentId: Overload:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.#ctor
  name: ExpressionEvalDictionaryBuilder
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.ExpressionEvalDictionaryBuilder
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.ExpressionEvalDictionaryBuilder
- uid: System.Collections.Generic.IDictionary{System.String,Steeltoe.Common.Expression.IExpression}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Steeltoe.Common.Expression.IExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, IExpression>
  nameWithType: IDictionary<String, IExpression>
  fullName: System.Collections.Generic.IDictionary<System.String, Steeltoe.Common.Expression.IExpression>
  nameWithType.vb: IDictionary(Of String, IExpression)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Steeltoe.Common.Expression.IExpression)
  name.vb: IDictionary(Of String, IExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Common.Expression.IExpression
    name: IExpression
    nameWithType: IExpression
    fullName: Steeltoe.Common.Expression.IExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Common.Expression.IExpression
    name: IExpression
    nameWithType: IExpression
    fullName: Steeltoe.Common.Expression.IExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback*
  commentId: Overload:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback
  name: UsingCallback
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingCallback
- uid: Steeltoe.Integration.Expression.IEvaluationCallback
  commentId: T:Steeltoe.Integration.Expression.IEvaluationCallback
  parent: Steeltoe.Integration.Expression
  name: IEvaluationCallback
  nameWithType: IEvaluationCallback
  fullName: Steeltoe.Integration.Expression.IEvaluationCallback
- uid: Steeltoe.Integration.Expression.IExpressionEvalMapFinalBuilder
  commentId: T:Steeltoe.Integration.Expression.IExpressionEvalMapFinalBuilder
  parent: Steeltoe.Integration.Expression
  name: IExpressionEvalMapFinalBuilder
  nameWithType: IExpressionEvalMapFinalBuilder
  fullName: Steeltoe.Integration.Expression.IExpressionEvalMapFinalBuilder
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback*
  commentId: Overload:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback
  name: UsingSimpleCallback
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingSimpleCallback
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext*
  commentId: Overload:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext
  name: UsingEvaluationContext
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.UsingEvaluationContext
- uid: Steeltoe.Common.Expression.IEvaluationContext
  commentId: T:Steeltoe.Common.Expression.IEvaluationContext
  parent: Steeltoe.Common.Expression
  name: IEvaluationContext
  nameWithType: IEvaluationContext
  fullName: Steeltoe.Common.Expression.IEvaluationContext
- uid: Steeltoe.Integration.Expression.IExpressionEvalMapComponentsBuilder
  commentId: T:Steeltoe.Integration.Expression.IExpressionEvalMapComponentsBuilder
  parent: Steeltoe.Integration.Expression
  name: IExpressionEvalMapComponentsBuilder
  nameWithType: IExpressionEvalMapComponentsBuilder
  fullName: Steeltoe.Integration.Expression.IExpressionEvalMapComponentsBuilder
- uid: Steeltoe.Common.Expression
  commentId: N:Steeltoe.Common.Expression
  name: Steeltoe.Common.Expression
  nameWithType: Steeltoe.Common.Expression
  fullName: Steeltoe.Common.Expression
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot*
  commentId: Overload:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot
  name: WithRoot
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithRoot
- uid: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType*
  commentId: Overload:Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType
  name: WithReturnType
  nameWithType: ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType
  fullName: Steeltoe.Integration.Expression.ExpressionEvalDictionary.ExpressionEvalDictionaryBuilder.WithReturnType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
