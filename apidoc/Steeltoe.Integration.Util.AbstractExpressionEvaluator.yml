### YamlMime:ManagedReference
items:
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  commentId: T:Steeltoe.Integration.Util.AbstractExpressionEvaluator
  id: AbstractExpressionEvaluator
  parent: Steeltoe.Integration.Util
  children:
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.#ctor(Steeltoe.Common.Contexts.IApplicationContext)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage,System.Type)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression,System.Object,System.Type)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String,System.Object)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String,System.Object,System.Type)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,System.Object)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext(System.Boolean)
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory
  - Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter
  langs:
  - csharp
  - vb
  name: AbstractExpressionEvaluator
  nameWithType: AbstractExpressionEvaluator
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  type: Class
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractExpressionEvaluator
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 14
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: public abstract class AbstractExpressionEvaluator
    content.vb: Public MustInherit Class AbstractExpressionEvaluator
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Integration.Endpoint.AbstractMessageSource`1
  - Steeltoe.Integration.Handler.AbstractMessageProcessor`1
  - Steeltoe.Integration.Handler.Support.DictionaryArgumentResolver
  - Steeltoe.Integration.Handler.Support.PayloadExpressionArgumentResolver
  - Steeltoe.Integration.Handler.Support.PayloadsArgumentResolver
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser
  commentId: P:Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser
  id: ExpressionParser
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: ExpressionParser
  nameWithType: AbstractExpressionEvaluator.ExpressionParser
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser
  type: Property
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ExpressionParser
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 22
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: public IExpressionParser ExpressionParser { get; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.IExpressionParser
    content.vb: Public ReadOnly Property ExpressionParser As IExpressionParser
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext
  commentId: P:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext
  id: EvaluationContext
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluationContext
  nameWithType: AbstractExpressionEvaluator.EvaluationContext
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext
  type: Property
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluationContext
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 24
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: public IEvaluationContext EvaluationContext { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.IEvaluationContext
    content.vb: Public Property EvaluationContext As IEvaluationContext
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices
  commentId: P:Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices
  id: IntegrationServices
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: IntegrationServices
  nameWithType: AbstractExpressionEvaluator.IntegrationServices
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices
  type: Property
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IntegrationServices
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 42
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: public IIntegrationServices IntegrationServices { get; }
    parameters: []
    return:
      type: Steeltoe.Integration.IIntegrationServices
    content.vb: Public ReadOnly Property IntegrationServices As IIntegrationServices
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory
  commentId: P:Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory
  id: MessageBuilderFactory
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: MessageBuilderFactory
  nameWithType: AbstractExpressionEvaluator.MessageBuilderFactory
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory
  type: Property
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MessageBuilderFactory
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 55
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: public IMessageBuilderFactory MessageBuilderFactory { get; set; }
    parameters: []
    return:
      type: Steeltoe.Integration.Support.IMessageBuilderFactory
    content.vb: Public Property MessageBuilderFactory As IMessageBuilderFactory
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter
  commentId: P:Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter
  id: TypeConverter
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: TypeConverter
  nameWithType: AbstractExpressionEvaluator.TypeConverter
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter
  type: Property
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: TypeConverter
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 73
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: public ITypeConverter TypeConverter { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.ITypeConverter
    content.vb: Public Property TypeConverter As ITypeConverter
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext
  commentId: P:Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext
  id: ApplicationContext
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: ApplicationContext
  nameWithType: AbstractExpressionEvaluator.ApplicationContext
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext
  type: Property
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ApplicationContext
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 75
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: public IApplicationContext ApplicationContext { get; }
    parameters: []
    return:
      type: Steeltoe.Common.Contexts.IApplicationContext
    content.vb: Public ReadOnly Property ApplicationContext As IApplicationContext
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.#ctor(Steeltoe.Common.Contexts.IApplicationContext)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.#ctor(Steeltoe.Common.Contexts.IApplicationContext)
  id: '#ctor(Steeltoe.Common.Contexts.IApplicationContext)'
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: AbstractExpressionEvaluator(IApplicationContext)
  nameWithType: AbstractExpressionEvaluator.AbstractExpressionEvaluator(IApplicationContext)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.AbstractExpressionEvaluator(Steeltoe.Common.Contexts.IApplicationContext)
  type: Constructor
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 77
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected AbstractExpressionEvaluator(IApplicationContext context)
    parameters:
    - id: context
      type: Steeltoe.Common.Contexts.IApplicationContext
    content.vb: Protected Sub New(context As IApplicationContext)
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory
  id: GetMessageBuilderFactory
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: GetMessageBuilderFactory()
  nameWithType: AbstractExpressionEvaluator.GetMessageBuilderFactory()
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory()
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMessageBuilderFactory
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 82
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected virtual IMessageBuilderFactory GetMessageBuilderFactory()
    return:
      type: Steeltoe.Integration.Support.IMessageBuilderFactory
    content.vb: Protected Overridable Function GetMessageBuilderFactory As IMessageBuilderFactory
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext(System.Boolean)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext(System.Boolean)
  id: GetEvaluationContext(System.Boolean)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: GetEvaluationContext(Boolean)
  nameWithType: AbstractExpressionEvaluator.GetEvaluationContext(Boolean)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetEvaluationContext
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 87
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected virtual IEvaluationContext GetEvaluationContext(bool contextRequired = true)
    parameters:
    - id: contextRequired
      type: System.Boolean
    return:
      type: Steeltoe.Common.Expression.IEvaluationContext
    content.vb: Protected Overridable Function GetEvaluationContext(contextRequired As Boolean = True) As IEvaluationContext
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage)
  id: EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateExpression<T>(IExpression, IMessage)
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression<T>(IExpression, IMessage)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression<T>(Steeltoe.Common.Expression.IExpression, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluateExpression
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 115
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected T EvaluateExpression<T>(IExpression expression, IMessage message)
    parameters:
    - id: expression
      type: Steeltoe.Common.Expression.IExpression
    - id: message
      type: Steeltoe.Messaging.IMessage
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Protected Function EvaluateExpression(Of T)(expression As IExpression, message As IMessage) As T
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  nameWithType.vb: AbstractExpressionEvaluator.EvaluateExpression(Of T)(IExpression, IMessage)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Of T)(Steeltoe.Common.Expression.IExpression, Steeltoe.Messaging.IMessage)
  name.vb: EvaluateExpression(Of T)(IExpression, IMessage)
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage,System.Type)
  id: EvaluateExpression(Steeltoe.Common.Expression.IExpression,Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateExpression(IExpression, IMessage, Type)
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression(IExpression, IMessage, Type)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression, Steeltoe.Messaging.IMessage, System.Type)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluateExpression
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 120
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected object EvaluateExpression(IExpression expression, IMessage message, Type expectedType)
    parameters:
    - id: expression
      type: Steeltoe.Common.Expression.IExpression
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: expectedType
      type: System.Type
    return:
      type: System.Object
    content.vb: Protected Function EvaluateExpression(expression As IExpression, message As IMessage, expectedType As Type) As Object
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String,System.Object)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String,System.Object)
  id: EvaluateExpression(System.String,System.Object)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateExpression(String, Object)
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression(String, Object)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluateExpression
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 144
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected object EvaluateExpression(string expression, object input)
    parameters:
    - id: expression
      type: System.String
    - id: input
      type: System.Object
    return:
      type: System.Object
    content.vb: Protected Function EvaluateExpression(expression As String, input As Object) As Object
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String,System.Object,System.Type)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String,System.Object,System.Type)
  id: EvaluateExpression(System.String,System.Object,System.Type)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateExpression(String, Object, Type)
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression(String, Object, Type)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(System.String, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluateExpression
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 149
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected object EvaluateExpression(string expression, object input, Type expectedType)
    parameters:
    - id: expression
      type: System.String
    - id: input
      type: System.Object
    - id: expectedType
      type: System.Type
    return:
      type: System.Object
    content.vb: Protected Function EvaluateExpression(expression As String, input As Object, expectedType As Type) As Object
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression)
  id: EvaluateExpression(Steeltoe.Common.Expression.IExpression)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateExpression(IExpression)
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression(IExpression)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluateExpression
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 154
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected object EvaluateExpression(IExpression expression)
    parameters:
    - id: expression
      type: Steeltoe.Common.Expression.IExpression
    return:
      type: System.Object
    content.vb: Protected Function EvaluateExpression(expression As IExpression) As Object
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression,System.Object,System.Type)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression,System.Object,System.Type)
  id: EvaluateExpression(Steeltoe.Common.Expression.IExpression,System.Object,System.Type)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateExpression(IExpression, Object, Type)
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression(IExpression, Object, Type)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Steeltoe.Common.Expression.IExpression, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluateExpression
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 159
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected object EvaluateExpression(IExpression expression, object input, Type expectedType)
    parameters:
    - id: expression
      type: Steeltoe.Common.Expression.IExpression
    - id: input
      type: System.Object
    - id: expectedType
      type: System.Type
    return:
      type: System.Object
    content.vb: Protected Function EvaluateExpression(expression As IExpression, input As Object, expectedType As Type) As Object
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,System.Object)
  commentId: M:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,System.Object)
  id: EvaluateExpression``1(Steeltoe.Common.Expression.IExpression,System.Object)
  parent: Steeltoe.Integration.Util.AbstractExpressionEvaluator
  langs:
  - csharp
  - vb
  name: EvaluateExpression<T>(IExpression, Object)
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression<T>(IExpression, Object)
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression<T>(Steeltoe.Common.Expression.IExpression, System.Object)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluateExpression
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Util/AbstractExpressionEvaluator.cs
    startLine: 164
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Util
  syntax:
    content: protected T EvaluateExpression<T>(IExpression expression, object input)
    parameters:
    - id: expression
      type: Steeltoe.Common.Expression.IExpression
    - id: input
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Protected Function EvaluateExpression(Of T)(expression As IExpression, input As Object) As T
  overload: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  nameWithType.vb: AbstractExpressionEvaluator.EvaluateExpression(Of T)(IExpression, Object)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression(Of T)(Steeltoe.Common.Expression.IExpression, System.Object)
  name.vb: EvaluateExpression(Of T)(IExpression, Object)
references:
- uid: Steeltoe.Integration.Util
  commentId: N:Steeltoe.Integration.Util
  name: Steeltoe.Integration.Util
  nameWithType: Steeltoe.Integration.Util
  fullName: Steeltoe.Integration.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser
  name: ExpressionParser
  nameWithType: AbstractExpressionEvaluator.ExpressionParser
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ExpressionParser
- uid: Steeltoe.Common.Expression.IExpressionParser
  commentId: T:Steeltoe.Common.Expression.IExpressionParser
  parent: Steeltoe.Common.Expression
  name: IExpressionParser
  nameWithType: IExpressionParser
  fullName: Steeltoe.Common.Expression.IExpressionParser
- uid: Steeltoe.Common.Expression
  commentId: N:Steeltoe.Common.Expression
  name: Steeltoe.Common.Expression
  nameWithType: Steeltoe.Common.Expression
  fullName: Steeltoe.Common.Expression
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext
  name: EvaluationContext
  nameWithType: AbstractExpressionEvaluator.EvaluationContext
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluationContext
- uid: Steeltoe.Common.Expression.IEvaluationContext
  commentId: T:Steeltoe.Common.Expression.IEvaluationContext
  parent: Steeltoe.Common.Expression
  name: IEvaluationContext
  nameWithType: IEvaluationContext
  fullName: Steeltoe.Common.Expression.IEvaluationContext
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices
  name: IntegrationServices
  nameWithType: AbstractExpressionEvaluator.IntegrationServices
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.IntegrationServices
- uid: Steeltoe.Integration.IIntegrationServices
  commentId: T:Steeltoe.Integration.IIntegrationServices
  parent: Steeltoe.Integration
  name: IIntegrationServices
  nameWithType: IIntegrationServices
  fullName: Steeltoe.Integration.IIntegrationServices
- uid: Steeltoe.Integration
  commentId: N:Steeltoe.Integration
  name: Steeltoe.Integration
  nameWithType: Steeltoe.Integration
  fullName: Steeltoe.Integration
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory
  name: MessageBuilderFactory
  nameWithType: AbstractExpressionEvaluator.MessageBuilderFactory
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.MessageBuilderFactory
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory
  commentId: T:Steeltoe.Integration.Support.IMessageBuilderFactory
  parent: Steeltoe.Integration.Support
  name: IMessageBuilderFactory
  nameWithType: IMessageBuilderFactory
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory
- uid: Steeltoe.Integration.Support
  commentId: N:Steeltoe.Integration.Support
  name: Steeltoe.Integration.Support
  nameWithType: Steeltoe.Integration.Support
  fullName: Steeltoe.Integration.Support
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter
  name: TypeConverter
  nameWithType: AbstractExpressionEvaluator.TypeConverter
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.TypeConverter
- uid: Steeltoe.Common.Expression.ITypeConverter
  commentId: T:Steeltoe.Common.Expression.ITypeConverter
  parent: Steeltoe.Common.Expression
  name: ITypeConverter
  nameWithType: ITypeConverter
  fullName: Steeltoe.Common.Expression.ITypeConverter
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext
  name: ApplicationContext
  nameWithType: AbstractExpressionEvaluator.ApplicationContext
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.ApplicationContext
- uid: Steeltoe.Common.Contexts.IApplicationContext
  commentId: T:Steeltoe.Common.Contexts.IApplicationContext
  parent: Steeltoe.Common.Contexts
  name: IApplicationContext
  nameWithType: IApplicationContext
  fullName: Steeltoe.Common.Contexts.IApplicationContext
- uid: Steeltoe.Common.Contexts
  commentId: N:Steeltoe.Common.Contexts
  name: Steeltoe.Common.Contexts
  nameWithType: Steeltoe.Common.Contexts
  fullName: Steeltoe.Common.Contexts
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.#ctor*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.#ctor
  name: AbstractExpressionEvaluator
  nameWithType: AbstractExpressionEvaluator.AbstractExpressionEvaluator
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.AbstractExpressionEvaluator
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory
  name: GetMessageBuilderFactory
  nameWithType: AbstractExpressionEvaluator.GetMessageBuilderFactory
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetMessageBuilderFactory
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext
  name: GetEvaluationContext
  nameWithType: AbstractExpressionEvaluator.GetEvaluationContext
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.GetEvaluationContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression*
  commentId: Overload:Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression
  name: EvaluateExpression
  nameWithType: AbstractExpressionEvaluator.EvaluateExpression
  fullName: Steeltoe.Integration.Util.AbstractExpressionEvaluator.EvaluateExpression
- uid: Steeltoe.Common.Expression.IExpression
  commentId: T:Steeltoe.Common.Expression.IExpression
  parent: Steeltoe.Common.Expression
  name: IExpression
  nameWithType: IExpression
  fullName: Steeltoe.Common.Expression.IExpression
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
