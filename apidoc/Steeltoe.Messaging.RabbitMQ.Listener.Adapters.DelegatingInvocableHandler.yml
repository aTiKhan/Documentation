### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  id: DelegatingInvocableHandler
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  children:
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod,System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload(System.Type)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload(System.Type)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor(System.Object,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor(System.Object)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor(System.Object)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod(System.Type,Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext
  langs:
  - csharp
  - vb
  name: DelegatingInvocableHandler
  nameWithType: DelegatingInvocableHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DelegatingInvocableHandler
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 18
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public class DelegatingInvocableHandler
    content.vb: Public Class DelegatingInvocableHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  id: '#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)'
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: DelegatingInvocableHandler(List<IInvocableHandlerMethod>, Object, IServiceExpressionResolver, IServiceExpressionContext)
  nameWithType: DelegatingInvocableHandler.DelegatingInvocableHandler(List<IInvocableHandlerMethod>, Object, IServiceExpressionResolver, IServiceExpressionContext)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DelegatingInvocableHandler(System.Collections.Generic.List<Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod>, System.Object, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 23
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public DelegatingInvocableHandler(List<IInvocableHandlerMethod> handlers, object bean, IServiceExpressionResolver resolver, IServiceExpressionContext context)
    parameters:
    - id: handlers
      type: System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod}
    - id: bean
      type: System.Object
    - id: resolver
      type: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver
    - id: context
      type: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext
    content.vb: Public Sub New(handlers As List(Of IInvocableHandlerMethod), bean As Object, resolver As IServiceExpressionResolver, context As IServiceExpressionContext)
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor*
  nameWithType.vb: DelegatingInvocableHandler.DelegatingInvocableHandler(List(Of IInvocableHandlerMethod), Object, IServiceExpressionResolver, IServiceExpressionContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DelegatingInvocableHandler(System.Collections.Generic.List(Of Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod), System.Object, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  name.vb: DelegatingInvocableHandler(List(Of IInvocableHandlerMethod), Object, IServiceExpressionResolver, IServiceExpressionContext)
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod,System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod,System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  id: '#ctor(System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod},Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod,System.Object,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver,Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)'
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: DelegatingInvocableHandler(List<IInvocableHandlerMethod>, IInvocableHandlerMethod, Object, IServiceExpressionResolver, IServiceExpressionContext)
  nameWithType: DelegatingInvocableHandler.DelegatingInvocableHandler(List<IInvocableHandlerMethod>, IInvocableHandlerMethod, Object, IServiceExpressionResolver, IServiceExpressionContext)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DelegatingInvocableHandler(System.Collections.Generic.List<Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod>, Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod, System.Object, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 28
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public DelegatingInvocableHandler(List<IInvocableHandlerMethod> handlers, IInvocableHandlerMethod defaultHandler, object bean, IServiceExpressionResolver resolver, IServiceExpressionContext context)
    parameters:
    - id: handlers
      type: System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod}
    - id: defaultHandler
      type: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    - id: bean
      type: System.Object
    - id: resolver
      type: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver
    - id: context
      type: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext
    content.vb: Public Sub New(handlers As List(Of IInvocableHandlerMethod), defaultHandler As IInvocableHandlerMethod, bean As Object, resolver As IServiceExpressionResolver, context As IServiceExpressionContext)
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor*
  nameWithType.vb: DelegatingInvocableHandler.DelegatingInvocableHandler(List(Of IInvocableHandlerMethod), IInvocableHandlerMethod, Object, IServiceExpressionResolver, IServiceExpressionContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DelegatingInvocableHandler(System.Collections.Generic.List(Of Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod), Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod, System.Object, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver, Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext)
  name.vb: DelegatingInvocableHandler(List(Of IInvocableHandlerMethod), IInvocableHandlerMethod, Object, IServiceExpressionResolver, IServiceExpressionContext)
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers
  id: Handlers
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: Handlers
  nameWithType: DelegatingInvocableHandler.Handlers
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Handlers
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 37
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public List<IInvocableHandlerMethod> Handlers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod}
    content.vb: Public ReadOnly Property Handlers As List(Of IInvocableHandlerMethod)
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler
  id: DefaultHandler
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: DefaultHandler
  nameWithType: DelegatingInvocableHandler.DefaultHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DefaultHandler
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 39
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public IInvocableHandlerMethod DefaultHandler { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    content.vb: Public ReadOnly Property DefaultHandler As IInvocableHandlerMethod
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean
  id: Bean
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: Bean
  nameWithType: DelegatingInvocableHandler.Bean
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Bean
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 41
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public object Bean { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Bean As Object
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver
  id: Resolver
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: Resolver
  nameWithType: DelegatingInvocableHandler.Resolver
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Resolver
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 43
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public IServiceExpressionResolver Resolver { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver
    content.vb: Public ReadOnly Property Resolver As IServiceExpressionResolver
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext
  id: ServiceExpressionContext
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: ServiceExpressionContext
  nameWithType: DelegatingInvocableHandler.ServiceExpressionContext
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceExpressionContext
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 45
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public IServiceExpressionContext ServiceExpressionContext { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext
    content.vb: Public ReadOnly Property ServiceExpressionContext As IServiceExpressionContext
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler
  id: HasDefaultHandler
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: HasDefaultHandler
  nameWithType: DelegatingInvocableHandler.HasDefaultHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HasDefaultHandler
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 47
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public bool HasDefaultHandler { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasDefaultHandler As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  id: Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: Invoke(IMessage, Object[])
  nameWithType: DelegatingInvocableHandler.Invoke(IMessage, Object[])
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke(Steeltoe.Messaging.IMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Invoke
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 49
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public InvocationResult Invoke(IMessage message, params object[] providedArgs)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: providedArgs
      type: System.Object[]
    return:
      type: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
    content.vb: Public Function Invoke(message As IMessage, ParamArray providedArgs As Object()) As InvocationResult
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke*
  nameWithType.vb: DelegatingInvocableHandler.Invoke(IMessage, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke(Steeltoe.Messaging.IMessage, System.Object())
  name.vb: Invoke(IMessage, Object())
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor(System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor(System.Object)
  id: GetMethodNameFor(System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: GetMethodNameFor(Object)
  nameWithType: DelegatingInvocableHandler.GetMethodNameFor(Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMethodNameFor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 62
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public string GetMethodNameFor(object payload)
    parameters:
    - id: payload
      type: System.Object
    return:
      type: System.String
    content.vb: Public Function GetMethodNameFor(payload As Object) As String
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor(System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor(System.Object)
  id: GetMethodFor(System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: GetMethodFor(Object)
  nameWithType: DelegatingInvocableHandler.GetMethodFor(Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMethodFor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 77
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public MethodInfo GetMethodFor(object payload)
    parameters:
    - id: payload
      type: System.Object
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Function GetMethodFor(payload As Object) As MethodInfo
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor(System.Object,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor(System.Object,System.Object)
  id: GetInvocationResultFor(System.Object,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: GetInvocationResultFor(Object, Object)
  nameWithType: DelegatingInvocableHandler.GetInvocationResultFor(Object, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetInvocationResultFor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 82
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public InvocationResult GetInvocationResultFor(object result, object inboundPayload)
    parameters:
    - id: result
      type: System.Object
    - id: inboundPayload
      type: System.Object
    return:
      type: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
    content.vb: Public Function GetInvocationResultFor(result As Object, inboundPayload As Object) As InvocationResult
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload(System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload(System.Type)
  id: GetHandlerForPayload(System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: GetHandlerForPayload(Type)
  nameWithType: DelegatingInvocableHandler.GetHandlerForPayload(Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetHandlerForPayload
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 94
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: protected IInvocableHandlerMethod GetHandlerForPayload(Type payloadClass)
    parameters:
    - id: payloadClass
      type: System.Type
    return:
      type: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    content.vb: Protected Function GetHandlerForPayload(payloadClass As Type) As IInvocableHandlerMethod
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload(System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload(System.Type)
  id: FindHandlerForPayload(System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: FindHandlerForPayload(Type)
  nameWithType: DelegatingInvocableHandler.FindHandlerForPayload(Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FindHandlerForPayload
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 111
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: protected virtual IInvocableHandlerMethod FindHandlerForPayload(Type payloadClass)
    parameters:
    - id: payloadClass
      type: System.Type
    return:
      type: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    content.vb: Protected Overridable Function FindHandlerForPayload(payloadClass As Type) As IInvocableHandlerMethod
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod(System.Type,Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod(System.Type,Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  id: MatchHandlerMethod(System.Type,Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  langs:
  - csharp
  - vb
  name: MatchHandlerMethod(Type, IInvocableHandlerMethod)
  nameWithType: DelegatingInvocableHandler.MatchHandlerMethod(Type, IInvocableHandlerMethod)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod(System.Type, Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MatchHandlerMethod
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/DelegatingInvocableHandler.cs
    startLine: 139
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: protected bool MatchHandlerMethod(Type payloadClass, IInvocableHandlerMethod handler)
    parameters:
    - id: payloadClass
      type: System.Type
    - id: handler
      type: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    return:
      type: System.Boolean
    content.vb: Protected Function MatchHandlerMethod(payloadClass As Type, handler As IInvocableHandlerMethod) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  commentId: N:Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  name: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  nameWithType: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.#ctor
  name: DelegatingInvocableHandler
  nameWithType: DelegatingInvocableHandler.DelegatingInvocableHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DelegatingInvocableHandler
- uid: System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod}
  commentId: T:System.Collections.Generic.List{Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IInvocableHandlerMethod>
  nameWithType: List<IInvocableHandlerMethod>
  fullName: System.Collections.Generic.List<Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod>
  nameWithType.vb: List(Of IInvocableHandlerMethod)
  fullName.vb: System.Collections.Generic.List(Of Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  name.vb: List(Of IInvocableHandlerMethod)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    name: IInvocableHandlerMethod
    nameWithType: IInvocableHandlerMethod
    fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    name: IInvocableHandlerMethod
    nameWithType: IInvocableHandlerMethod
    fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver
  commentId: T:Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver
  parent: Steeltoe.Messaging.RabbitMQ.Expressions
  name: IServiceExpressionResolver
  nameWithType: IServiceExpressionResolver
  fullName: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionResolver
- uid: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext
  commentId: T:Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext
  parent: Steeltoe.Messaging.RabbitMQ.Expressions
  name: IServiceExpressionContext
  nameWithType: IServiceExpressionContext
  fullName: Steeltoe.Messaging.RabbitMQ.Expressions.IServiceExpressionContext
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.RabbitMQ.Expressions
  commentId: N:Steeltoe.Messaging.RabbitMQ.Expressions
  name: Steeltoe.Messaging.RabbitMQ.Expressions
  nameWithType: Steeltoe.Messaging.RabbitMQ.Expressions
  fullName: Steeltoe.Messaging.RabbitMQ.Expressions
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  commentId: T:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  parent: Steeltoe.Messaging.Handler.Invocation
  name: IInvocableHandlerMethod
  nameWithType: IInvocableHandlerMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
- uid: Steeltoe.Messaging.Handler.Invocation
  commentId: N:Steeltoe.Messaging.Handler.Invocation
  name: Steeltoe.Messaging.Handler.Invocation
  nameWithType: Steeltoe.Messaging.Handler.Invocation
  fullName: Steeltoe.Messaging.Handler.Invocation
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers
  name: Handlers
  nameWithType: DelegatingInvocableHandler.Handlers
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler
  name: DefaultHandler
  nameWithType: DelegatingInvocableHandler.DefaultHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean
  name: Bean
  nameWithType: DelegatingInvocableHandler.Bean
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver
  name: Resolver
  nameWithType: DelegatingInvocableHandler.Resolver
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext
  name: ServiceExpressionContext
  nameWithType: DelegatingInvocableHandler.ServiceExpressionContext
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler
  name: HasDefaultHandler
  nameWithType: DelegatingInvocableHandler.HasDefaultHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke
  name: Invoke
  nameWithType: DelegatingInvocableHandler.Invoke
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  name: InvocationResult
  nameWithType: InvocationResult
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor
  name: GetMethodNameFor
  nameWithType: DelegatingInvocableHandler.GetMethodNameFor
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor
  name: GetMethodFor
  nameWithType: DelegatingInvocableHandler.GetMethodFor
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor
  name: GetInvocationResultFor
  nameWithType: DelegatingInvocableHandler.GetInvocationResultFor
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload
  name: GetHandlerForPayload
  nameWithType: DelegatingInvocableHandler.GetHandlerForPayload
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload
  name: FindHandlerForPayload
  nameWithType: DelegatingInvocableHandler.FindHandlerForPayload
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod
  name: MatchHandlerMethod
  nameWithType: DelegatingInvocableHandler.MatchHandlerMethod
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod
