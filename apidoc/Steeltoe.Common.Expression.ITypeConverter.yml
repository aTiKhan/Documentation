### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Expression.ITypeConverter
  commentId: T:Steeltoe.Common.Expression.ITypeConverter
  id: ITypeConverter
  parent: Steeltoe.Common.Expression
  children:
  - Steeltoe.Common.Expression.ITypeConverter.CanConvert(System.Type,System.Type)
  - Steeltoe.Common.Expression.ITypeConverter.ConversionService
  - Steeltoe.Common.Expression.ITypeConverter.ConvertValue(System.Object,System.Type,System.Type)
  langs:
  - csharp
  - vb
  name: ITypeConverter
  nameWithType: ITypeConverter
  fullName: Steeltoe.Common.Expression.ITypeConverter
  type: Interface
  source:
    remote:
      path: src/Common/src/Abstractions/Expression/ITypeConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ITypeConverter
    path: ../Steeltoe/src/Common/src/Abstractions/Expression/ITypeConverter.cs
    startLine: 14
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Expression
  summary: "\nA type converter can convert values between different types encountered during expression\nevaluation.\nTODO:  This interface is not complete\n"
  example: []
  syntax:
    content: public interface ITypeConverter
    content.vb: Public Interface ITypeConverter
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Common.Expression.ITypeConverter.ConversionService
  commentId: P:Steeltoe.Common.Expression.ITypeConverter.ConversionService
  id: ConversionService
  parent: Steeltoe.Common.Expression.ITypeConverter
  langs:
  - csharp
  - vb
  name: ConversionService
  nameWithType: ITypeConverter.ConversionService
  fullName: Steeltoe.Common.Expression.ITypeConverter.ConversionService
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Expression/ITypeConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConversionService
    path: ../Steeltoe/src/Common/src/Abstractions/Expression/ITypeConverter.cs
    startLine: 16
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Expression
  syntax:
    content: IConversionService ConversionService { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Converter.IConversionService
    content.vb: Property ConversionService As IConversionService
  overload: Steeltoe.Common.Expression.ITypeConverter.ConversionService*
  modifiers.csharp:
  - get
  - set
- uid: Steeltoe.Common.Expression.ITypeConverter.CanConvert(System.Type,System.Type)
  commentId: M:Steeltoe.Common.Expression.ITypeConverter.CanConvert(System.Type,System.Type)
  id: CanConvert(System.Type,System.Type)
  parent: Steeltoe.Common.Expression.ITypeConverter
  langs:
  - csharp
  - vb
  name: CanConvert(Type, Type)
  nameWithType: ITypeConverter.CanConvert(Type, Type)
  fullName: Steeltoe.Common.Expression.ITypeConverter.CanConvert(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Expression/ITypeConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanConvert
    path: ../Steeltoe/src/Common/src/Abstractions/Expression/ITypeConverter.cs
    startLine: 18
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Expression
  syntax:
    content: bool CanConvert(Type source, Type target)
    parameters:
    - id: source
      type: System.Type
    - id: target
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Function CanConvert(source As Type, target As Type) As Boolean
  overload: Steeltoe.Common.Expression.ITypeConverter.CanConvert*
- uid: Steeltoe.Common.Expression.ITypeConverter.ConvertValue(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Expression.ITypeConverter.ConvertValue(System.Object,System.Type,System.Type)
  id: ConvertValue(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Expression.ITypeConverter
  langs:
  - csharp
  - vb
  name: ConvertValue(Object, Type, Type)
  nameWithType: ITypeConverter.ConvertValue(Object, Type, Type)
  fullName: Steeltoe.Common.Expression.ITypeConverter.ConvertValue(System.Object, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Expression/ITypeConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertValue
    path: ../Steeltoe/src/Common/src/Abstractions/Expression/ITypeConverter.cs
    startLine: 20
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Expression
  syntax:
    content: object ConvertValue(object value, Type source, Type target)
    parameters:
    - id: value
      type: System.Object
    - id: source
      type: System.Type
    - id: target
      type: System.Type
    return:
      type: System.Object
    content.vb: Function ConvertValue(value As Object, source As Type, target As Type) As Object
  overload: Steeltoe.Common.Expression.ITypeConverter.ConvertValue*
references:
- uid: Steeltoe.Common.Expression
  commentId: N:Steeltoe.Common.Expression
  name: Steeltoe.Common.Expression
  nameWithType: Steeltoe.Common.Expression
  fullName: Steeltoe.Common.Expression
- uid: Steeltoe.Common.Expression.ITypeConverter.ConversionService*
  commentId: Overload:Steeltoe.Common.Expression.ITypeConverter.ConversionService
  name: ConversionService
  nameWithType: ITypeConverter.ConversionService
  fullName: Steeltoe.Common.Expression.ITypeConverter.ConversionService
- uid: Steeltoe.Common.Converter.IConversionService
  commentId: T:Steeltoe.Common.Converter.IConversionService
  parent: Steeltoe.Common.Converter
  name: IConversionService
  nameWithType: IConversionService
  fullName: Steeltoe.Common.Converter.IConversionService
- uid: Steeltoe.Common.Converter
  commentId: N:Steeltoe.Common.Converter
  name: Steeltoe.Common.Converter
  nameWithType: Steeltoe.Common.Converter
  fullName: Steeltoe.Common.Converter
- uid: Steeltoe.Common.Expression.ITypeConverter.CanConvert*
  commentId: Overload:Steeltoe.Common.Expression.ITypeConverter.CanConvert
  name: CanConvert
  nameWithType: ITypeConverter.CanConvert
  fullName: Steeltoe.Common.Expression.ITypeConverter.CanConvert
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Expression.ITypeConverter.ConvertValue*
  commentId: Overload:Steeltoe.Common.Expression.ITypeConverter.ConvertValue
  name: ConvertValue
  nameWithType: ITypeConverter.ConvertValue
  fullName: Steeltoe.Common.Expression.ITypeConverter.ConvertValue
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
