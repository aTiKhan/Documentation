### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Converter.AbstractGenericConverter
  commentId: T:Steeltoe.Common.Converter.AbstractGenericConverter
  id: AbstractGenericConverter
  parent: Steeltoe.Common.Converter
  children:
  - Steeltoe.Common.Converter.AbstractGenericConverter.#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}})
  - Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  - Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  langs:
  - csharp
  - vb
  name: AbstractGenericConverter
  nameWithType: AbstractGenericConverter
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractGenericConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractGenericConverter
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractGenericConverter.cs
    startLine: 9
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: 'public abstract class AbstractGenericConverter : IGenericConverter'
    content.vb: >-
      Public MustInherit Class AbstractGenericConverter

          Implements IGenericConverter
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  - Steeltoe.Common.Converter.NumberToCharacterConverter
  - Steeltoe.Common.Converter.NumberToStringConverter
  implements:
  - Steeltoe.Common.Converter.IGenericConverter
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}})
  commentId: M:Steeltoe.Common.Converter.AbstractGenericConverter.#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}})
  id: '#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}})'
  parent: Steeltoe.Common.Converter.AbstractGenericConverter
  langs:
  - csharp
  - vb
  name: AbstractGenericConverter(ISet<(Type Source, Type Target)>)
  nameWithType: AbstractGenericConverter.AbstractGenericConverter(ISet<(Type Source, Type Target)>)
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.AbstractGenericConverter(System.Collections.Generic.ISet<System.ValueTuple<System.Type, System.Type>>)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractGenericConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractGenericConverter.cs
    startLine: 11
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: protected AbstractGenericConverter(ISet<(Type Source, Type Target)> convertableTypes)
    parameters:
    - id: convertableTypes
      type: System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
    content.vb: Protected Sub New(convertableTypes As ISet(Of(Source As Type, Target As Type)))
  overload: Steeltoe.Common.Converter.AbstractGenericConverter.#ctor*
  nameWithType.vb: AbstractGenericConverter.AbstractGenericConverter(ISet(Of (Source As Type, Target As Type)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Common.Converter.AbstractGenericConverter.AbstractGenericConverter(System.Collections.Generic.ISet(Of System.ValueTuple(Of System.Type, System.Type)))
  name.vb: AbstractGenericConverter(ISet(Of (Source As Type, Target As Type)))
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  commentId: P:Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  id: ConvertibleTypes
  parent: Steeltoe.Common.Converter.AbstractGenericConverter
  langs:
  - csharp
  - vb
  name: ConvertibleTypes
  nameWithType: AbstractGenericConverter.ConvertibleTypes
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractGenericConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertibleTypes
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractGenericConverter.cs
    startLine: 16
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public ISet<(Type Source, Type Target)> ConvertibleTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
    content.vb: Public ReadOnly Property ConvertibleTypes As ISet(Of(Source As Type, Target As Type))
  overload: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes*
  implements:
  - Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  id: Convert(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Converter.AbstractGenericConverter
  langs:
  - csharp
  - vb
  name: Convert(Object, Type, Type)
  nameWithType: AbstractGenericConverter.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractGenericConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Convert
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractGenericConverter.cs
    startLine: 18
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public abstract object Convert(object source, Type sourceType, Type targetType)
    parameters:
    - id: source
      type: System.Object
    - id: sourceType
      type: System.Type
    - id: targetType
      type: System.Type
    return:
      type: System.Object
    content.vb: Public MustOverride Function Convert(source As Object, sourceType As Type, targetType As Type) As Object
  overload: Steeltoe.Common.Converter.AbstractGenericConverter.Convert*
  implements:
  - Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Steeltoe.Common.Converter
  commentId: N:Steeltoe.Common.Converter
  name: Steeltoe.Common.Converter
  nameWithType: Steeltoe.Common.Converter
  fullName: Steeltoe.Common.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.Converter.IGenericConverter
  commentId: T:Steeltoe.Common.Converter.IGenericConverter
  parent: Steeltoe.Common.Converter
  name: IGenericConverter
  nameWithType: IGenericConverter
  fullName: Steeltoe.Common.Converter.IGenericConverter
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.#ctor*
  commentId: Overload:Steeltoe.Common.Converter.AbstractGenericConverter.#ctor
  name: AbstractGenericConverter
  nameWithType: AbstractGenericConverter.AbstractGenericConverter
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.AbstractGenericConverter
- uid: System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
  commentId: T:System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<ValueTuple<Type, Type>>
  nameWithType: ISet<ValueTuple<Type, Type>>
  fullName: System.Collections.Generic.ISet<System.ValueTuple<System.Type, System.Type>>
  nameWithType.vb: ISet(Of ValueTuple(Of Type, Type))
  fullName.vb: System.Collections.Generic.ISet(Of System.ValueTuple(Of System.Type, System.Type))
  name.vb: ISet(Of ValueTuple(Of Type, Type))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes*
  commentId: Overload:Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  name: ConvertibleTypes
  nameWithType: AbstractGenericConverter.ConvertibleTypes
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
- uid: Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  commentId: P:Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  parent: Steeltoe.Common.Converter.IGenericConverter
  name: ConvertibleTypes
  nameWithType: IGenericConverter.ConvertibleTypes
  fullName: Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert*
  commentId: Overload:Steeltoe.Common.Converter.AbstractGenericConverter.Convert
  name: Convert
  nameWithType: AbstractGenericConverter.Convert
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert
- uid: Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Converter.IGenericConverter
  isExternal: true
  name: Convert(Object, Type, Type)
  nameWithType: IGenericConverter.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object, System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: IGenericConverter.Convert
    fullName: Steeltoe.Common.Converter.IGenericConverter.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: IGenericConverter.Convert
    fullName: Steeltoe.Common.Converter.IGenericConverter.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
