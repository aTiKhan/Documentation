### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  commentId: T:Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  id: AbstractHeaderMapper`1
  parent: Steeltoe.Messaging.Support
  children:
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.#ctor(Microsoft.Extensions.Logging.ILogger)
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1._logger
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaderName(System.String)
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.GetHeaderIfAvailable``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.InboundPrefix
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.OutboundPrefix
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaderName(System.String)
  - Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaders(`0)
  langs:
  - csharp
  - vb
  name: AbstractHeaderMapper<T>
  nameWithType: AbstractHeaderMapper<T>
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractHeaderMapper
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 9
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: 'public abstract class AbstractHeaderMapper<T> : IHeaderMapper<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class AbstractHeaderMapper(Of T)

          Implements IHeaderMapper(Of T)
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Messaging.Support.IHeaderMapper{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: AbstractHeaderMapper(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T)
  name.vb: AbstractHeaderMapper(Of T)
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1._logger
  commentId: F:Steeltoe.Messaging.Support.AbstractHeaderMapper`1._logger
  id: _logger
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: _logger
  nameWithType: AbstractHeaderMapper<T>._logger
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>._logger
  type: Field
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: _logger
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 11
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: protected readonly ILogger _logger
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly _logger As ILogger
  nameWithType.vb: AbstractHeaderMapper(Of T)._logger
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T)._logger
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.#ctor(Microsoft.Extensions.Logging.ILogger)
  commentId: M:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.#ctor(Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Microsoft.Extensions.Logging.ILogger)'
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: AbstractHeaderMapper(ILogger)
  nameWithType: AbstractHeaderMapper<T>.AbstractHeaderMapper(ILogger)
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.AbstractHeaderMapper(Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: protected AbstractHeaderMapper(ILogger logger = null)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected Sub New(logger As ILogger = Nothing)
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.#ctor*
  nameWithType.vb: AbstractHeaderMapper(Of T).AbstractHeaderMapper(ILogger)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).AbstractHeaderMapper(Microsoft.Extensions.Logging.ILogger)
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.InboundPrefix
  commentId: P:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.InboundPrefix
  id: InboundPrefix
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: InboundPrefix
  nameWithType: AbstractHeaderMapper<T>.InboundPrefix
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.InboundPrefix
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: InboundPrefix
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 22
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: public string InboundPrefix { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property InboundPrefix As String
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.InboundPrefix*
  nameWithType.vb: AbstractHeaderMapper(Of T).InboundPrefix
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).InboundPrefix
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.OutboundPrefix
  commentId: P:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.OutboundPrefix
  id: OutboundPrefix
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: OutboundPrefix
  nameWithType: AbstractHeaderMapper<T>.OutboundPrefix
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.OutboundPrefix
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: OutboundPrefix
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 35
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: public string OutboundPrefix { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property OutboundPrefix As String
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.OutboundPrefix*
  nameWithType.vb: AbstractHeaderMapper(Of T).OutboundPrefix
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).OutboundPrefix
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  commentId: M:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  id: FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: FromHeaders(IMessageHeaders, T)
  nameWithType: AbstractHeaderMapper<T>.FromHeaders(IMessageHeaders, T)
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.FromHeaders(Steeltoe.Messaging.IMessageHeaders, T)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromHeaders
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 48
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: public abstract void FromHeaders(IMessageHeaders headers, T target)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: target
      type: '{T}'
    content.vb: Public MustOverride Sub FromHeaders(headers As IMessageHeaders, target As T)
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaders*
  implements:
  - Steeltoe.Messaging.Support.IHeaderMapper{{T}}.FromHeaders(Steeltoe.Messaging.IMessageHeaders,{T})
  nameWithType.vb: AbstractHeaderMapper(Of T).FromHeaders(IMessageHeaders, T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).FromHeaders(Steeltoe.Messaging.IMessageHeaders, T)
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaders(`0)
  commentId: M:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaders(`0)
  id: ToHeaders(`0)
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: ToHeaders(T)
  nameWithType: AbstractHeaderMapper<T>.ToHeaders(T)
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.ToHeaders(T)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToHeaders
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 50
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: public abstract IMessageHeaders ToHeaders(T source)
    parameters:
    - id: source
      type: '{T}'
    return:
      type: Steeltoe.Messaging.IMessageHeaders
    content.vb: Public MustOverride Function ToHeaders(source As T) As IMessageHeaders
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaders*
  implements:
  - Steeltoe.Messaging.Support.IHeaderMapper{{T}}.ToHeaders({T})
  nameWithType.vb: AbstractHeaderMapper(Of T).ToHeaders(T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).ToHeaders(T)
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaderName(System.String)
  commentId: M:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaderName(System.String)
  id: FromHeaderName(System.String)
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: FromHeaderName(String)
  nameWithType: AbstractHeaderMapper<T>.FromHeaderName(String)
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.FromHeaderName(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromHeaderName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 52
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: protected virtual string FromHeaderName(string headerName)
    parameters:
    - id: headerName
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function FromHeaderName(headerName As String) As String
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaderName*
  nameWithType.vb: AbstractHeaderMapper(Of T).FromHeaderName(String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).FromHeaderName(System.String)
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaderName(System.String)
  commentId: M:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaderName(System.String)
  id: ToHeaderName(System.String)
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: ToHeaderName(String)
  nameWithType: AbstractHeaderMapper<T>.ToHeaderName(String)
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.ToHeaderName(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToHeaderName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 63
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: protected virtual string ToHeaderName(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function ToHeaderName(propertyName As String) As String
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaderName*
  nameWithType.vb: AbstractHeaderMapper(Of T).ToHeaderName(String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).ToHeaderName(System.String)
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.GetHeaderIfAvailable``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)
  commentId: M:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.GetHeaderIfAvailable``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)
  id: GetHeaderIfAvailable``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)
  parent: Steeltoe.Messaging.Support.AbstractHeaderMapper`1
  langs:
  - csharp
  - vb
  name: GetHeaderIfAvailable<V>(IDictionary<String, Object>, String)
  nameWithType: AbstractHeaderMapper<T>.GetHeaderIfAvailable<V>(IDictionary<String, Object>, String)
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.GetHeaderIfAvailable<V>(System.Collections.Generic.IDictionary<System.String, System.Object>, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetHeaderIfAvailable
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Support/AbstractHeaderMapper.cs
    startLine: 74
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Support
  syntax:
    content: protected virtual V GetHeaderIfAvailable<V>(IDictionary<string, object> headers, string name)
    parameters:
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    - id: name
      type: System.String
    typeParameters:
    - id: V
    return:
      type: '{V}'
    content.vb: Protected Overridable Function GetHeaderIfAvailable(Of V)(headers As IDictionary(Of String, Object), name As String) As V
  overload: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.GetHeaderIfAvailable*
  nameWithType.vb: AbstractHeaderMapper(Of T).GetHeaderIfAvailable(Of V)(IDictionary(Of String, Object), String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).GetHeaderIfAvailable(Of V)(System.Collections.Generic.IDictionary(Of System.String, System.Object), System.String)
  name.vb: GetHeaderIfAvailable(Of V)(IDictionary(Of String, Object), String)
references:
- uid: Steeltoe.Messaging.Support
  commentId: N:Steeltoe.Messaging.Support
  name: Steeltoe.Messaging.Support
  nameWithType: Steeltoe.Messaging.Support
  fullName: Steeltoe.Messaging.Support
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Support.IHeaderMapper{{T}}
  commentId: T:Steeltoe.Messaging.Support.IHeaderMapper{`0}
  parent: Steeltoe.Messaging.Support
  definition: Steeltoe.Messaging.Support.IHeaderMapper`1
  name: IHeaderMapper<T>
  nameWithType: IHeaderMapper<T>
  fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>
  nameWithType.vb: IHeaderMapper(Of T)
  fullName.vb: Steeltoe.Messaging.Support.IHeaderMapper(Of T)
  name.vb: IHeaderMapper(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1
    name: IHeaderMapper
    nameWithType: IHeaderMapper
    fullName: Steeltoe.Messaging.Support.IHeaderMapper
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1
    name: IHeaderMapper
    nameWithType: IHeaderMapper
    fullName: Steeltoe.Messaging.Support.IHeaderMapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Support.IHeaderMapper`1
  commentId: T:Steeltoe.Messaging.Support.IHeaderMapper`1
  name: IHeaderMapper<T>
  nameWithType: IHeaderMapper<T>
  fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>
  nameWithType.vb: IHeaderMapper(Of T)
  fullName.vb: Steeltoe.Messaging.Support.IHeaderMapper(Of T)
  name.vb: IHeaderMapper(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1
    name: IHeaderMapper
    nameWithType: IHeaderMapper
    fullName: Steeltoe.Messaging.Support.IHeaderMapper
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1
    name: IHeaderMapper
    nameWithType: IHeaderMapper
    fullName: Steeltoe.Messaging.Support.IHeaderMapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.#ctor*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.#ctor
  name: AbstractHeaderMapper
  nameWithType: AbstractHeaderMapper<T>.AbstractHeaderMapper
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.AbstractHeaderMapper
  nameWithType.vb: AbstractHeaderMapper(Of T).AbstractHeaderMapper
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).AbstractHeaderMapper
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.InboundPrefix*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.InboundPrefix
  name: InboundPrefix
  nameWithType: AbstractHeaderMapper<T>.InboundPrefix
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.InboundPrefix
  nameWithType.vb: AbstractHeaderMapper(Of T).InboundPrefix
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).InboundPrefix
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.OutboundPrefix*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.OutboundPrefix
  name: OutboundPrefix
  nameWithType: AbstractHeaderMapper<T>.OutboundPrefix
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.OutboundPrefix
  nameWithType.vb: AbstractHeaderMapper(Of T).OutboundPrefix
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).OutboundPrefix
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaders*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaders
  name: FromHeaders
  nameWithType: AbstractHeaderMapper<T>.FromHeaders
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.FromHeaders
  nameWithType.vb: AbstractHeaderMapper(Of T).FromHeaders
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).FromHeaders
- uid: Steeltoe.Messaging.Support.IHeaderMapper{{T}}.FromHeaders(Steeltoe.Messaging.IMessageHeaders,{T})
  commentId: M:Steeltoe.Messaging.Support.IHeaderMapper{`0}.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  parent: Steeltoe.Messaging.Support.IHeaderMapper{{T}}
  definition: Steeltoe.Messaging.Support.IHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  name: FromHeaders(IMessageHeaders, T)
  nameWithType: IHeaderMapper<T>.FromHeaders(IMessageHeaders, T)
  fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.FromHeaders(Steeltoe.Messaging.IMessageHeaders, T)
  nameWithType.vb: IHeaderMapper(Of T).FromHeaders(IMessageHeaders, T)
  fullName.vb: Steeltoe.Messaging.Support.IHeaderMapper(Of T).FromHeaders(Steeltoe.Messaging.IMessageHeaders, T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
    name: FromHeaders
    nameWithType: IHeaderMapper<T>.FromHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.FromHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
    name: FromHeaders
    nameWithType: IHeaderMapper(Of T).FromHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper(Of T).FromHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Support.IHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  commentId: M:Steeltoe.Messaging.Support.IHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
  name: FromHeaders(IMessageHeaders, T)
  nameWithType: IHeaderMapper<T>.FromHeaders(IMessageHeaders, T)
  fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.FromHeaders(Steeltoe.Messaging.IMessageHeaders, T)
  nameWithType.vb: IHeaderMapper(Of T).FromHeaders(IMessageHeaders, T)
  fullName.vb: Steeltoe.Messaging.Support.IHeaderMapper(Of T).FromHeaders(Steeltoe.Messaging.IMessageHeaders, T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
    name: FromHeaders
    nameWithType: IHeaderMapper<T>.FromHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.FromHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.FromHeaders(Steeltoe.Messaging.IMessageHeaders,`0)
    name: FromHeaders
    nameWithType: IHeaderMapper(Of T).FromHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper(Of T).FromHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaders*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaders
  name: ToHeaders
  nameWithType: AbstractHeaderMapper<T>.ToHeaders
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.ToHeaders
  nameWithType.vb: AbstractHeaderMapper(Of T).ToHeaders
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).ToHeaders
- uid: Steeltoe.Messaging.Support.IHeaderMapper{{T}}.ToHeaders({T})
  commentId: M:Steeltoe.Messaging.Support.IHeaderMapper{`0}.ToHeaders(`0)
  parent: Steeltoe.Messaging.Support.IHeaderMapper{{T}}
  definition: Steeltoe.Messaging.Support.IHeaderMapper`1.ToHeaders(`0)
  name: ToHeaders(T)
  nameWithType: IHeaderMapper<T>.ToHeaders(T)
  fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.ToHeaders(T)
  nameWithType.vb: IHeaderMapper(Of T).ToHeaders(T)
  fullName.vb: Steeltoe.Messaging.Support.IHeaderMapper(Of T).ToHeaders(T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.ToHeaders(`0)
    name: ToHeaders
    nameWithType: IHeaderMapper<T>.ToHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.ToHeaders
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.ToHeaders(`0)
    name: ToHeaders
    nameWithType: IHeaderMapper(Of T).ToHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper(Of T).ToHeaders
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.IHeaderMapper`1.ToHeaders(`0)
  commentId: M:Steeltoe.Messaging.Support.IHeaderMapper`1.ToHeaders(`0)
  name: ToHeaders(T)
  nameWithType: IHeaderMapper<T>.ToHeaders(T)
  fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.ToHeaders(T)
  nameWithType.vb: IHeaderMapper(Of T).ToHeaders(T)
  fullName.vb: Steeltoe.Messaging.Support.IHeaderMapper(Of T).ToHeaders(T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.ToHeaders(`0)
    name: ToHeaders
    nameWithType: IHeaderMapper<T>.ToHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper<T>.ToHeaders
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.IHeaderMapper`1.ToHeaders(`0)
    name: ToHeaders
    nameWithType: IHeaderMapper(Of T).ToHeaders
    fullName: Steeltoe.Messaging.Support.IHeaderMapper(Of T).ToHeaders
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaderName*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.FromHeaderName
  name: FromHeaderName
  nameWithType: AbstractHeaderMapper<T>.FromHeaderName
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.FromHeaderName
  nameWithType.vb: AbstractHeaderMapper(Of T).FromHeaderName
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).FromHeaderName
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaderName*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.ToHeaderName
  name: ToHeaderName
  nameWithType: AbstractHeaderMapper<T>.ToHeaderName
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.ToHeaderName
  nameWithType.vb: AbstractHeaderMapper(Of T).ToHeaderName
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).ToHeaderName
- uid: Steeltoe.Messaging.Support.AbstractHeaderMapper`1.GetHeaderIfAvailable*
  commentId: Overload:Steeltoe.Messaging.Support.AbstractHeaderMapper`1.GetHeaderIfAvailable
  name: GetHeaderIfAvailable
  nameWithType: AbstractHeaderMapper<T>.GetHeaderIfAvailable
  fullName: Steeltoe.Messaging.Support.AbstractHeaderMapper<T>.GetHeaderIfAvailable
  nameWithType.vb: AbstractHeaderMapper(Of T).GetHeaderIfAvailable
  fullName.vb: Steeltoe.Messaging.Support.AbstractHeaderMapper(Of T).GetHeaderIfAvailable
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: V
  name: V
  nameWithType: V
  fullName: V
