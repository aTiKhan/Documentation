### YamlMime:ManagedReference
items:
- uid: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions
  commentId: T:Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions
  id: SerilogLoggingBuilderExtensions
  parent: Steeltoe.Extensions.Logging.DynamicSerilog
  children:
  - Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder,LoggerConfiguration,System.Boolean,System.Boolean)
  - Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder,System.Boolean)
  - Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder)
  - Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder,LoggerConfiguration,System.Boolean)
  langs:
  - csharp
  - vb
  name: SerilogLoggingBuilderExtensions
  nameWithType: SerilogLoggingBuilderExtensions
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SerilogLoggingBuilderExtensions
    path: ../Steeltoe/src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
    startLine: 16
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicSerilogBase
  namespace: Steeltoe.Extensions.Logging.DynamicSerilog
  syntax:
    content: public static class SerilogLoggingBuilderExtensions
    content.vb: Public Module SerilogLoggingBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder,System.Boolean)
  commentId: M:Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder,System.Boolean)
  id: AddDynamicSerilog(ILoggingBuilder,System.Boolean)
  isExtensionMethod: true
  parent: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions
  langs:
  - csharp
  - vb
  name: AddDynamicSerilog(ILoggingBuilder, Boolean)
  nameWithType: SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder, Boolean)
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddDynamicSerilog
    path: ../Steeltoe/src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
    startLine: 25
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicSerilogBase
  namespace: Steeltoe.Extensions.Logging.DynamicSerilog
  summary: "\nAdd Serilog with Console sink, wrapped in a <xref href=\"Steeltoe.Extensions.Logging.IDynamicLoggerProvider\" data-throw-if-not-resolved=\"false\"></xref> that supports\ndynamically controlling the minimum log level via management endpoints\n"
  example: []
  syntax:
    content: public static ILoggingBuilder AddDynamicSerilog(this ILoggingBuilder builder, bool preserveDefaultConsole = false)
    parameters:
    - id: builder
      type: ILoggingBuilder
      description: The <see cref="!:ILoggingBuilder"></see> for configuring the LoggerFactory
    - id: preserveDefaultConsole
      type: System.Boolean
      description: When true, do not remove Microsoft&apos;s ConsoleLoggerProvider
    return:
      type: ILoggingBuilder
      description: The configured <see cref="!:ILoggingBuilder"></see>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddDynamicSerilog(builder As ILoggingBuilder, preserveDefaultConsole As Boolean = False) As ILoggingBuilder
  overload: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder,LoggerConfiguration,System.Boolean,System.Boolean)
  commentId: M:Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder,LoggerConfiguration,System.Boolean,System.Boolean)
  id: AddDynamicSerilog(ILoggingBuilder,LoggerConfiguration,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions
  langs:
  - csharp
  - vb
  name: AddDynamicSerilog(ILoggingBuilder, LoggerConfiguration, Boolean, Boolean)
  nameWithType: SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder, LoggerConfiguration, Boolean, Boolean)
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog(ILoggingBuilder, LoggerConfiguration, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddDynamicSerilog
    path: ../Steeltoe/src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
    startLine: 39
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicSerilogBase
  namespace: Steeltoe.Extensions.Logging.DynamicSerilog
  summary: "\nAdd Serilog, wrapped in a <xref href=\"Steeltoe.Extensions.Logging.IDynamicLoggerProvider\" data-throw-if-not-resolved=\"false\"></xref> that supports\ndynamically controlling the minimum log level via management endpoints. Will add a Console sink if <code data-dev-comment-type=\"paramref\" class=\"paramref\">loggerConfiguration</code> is not provided.\n"
  example: []
  syntax:
    content: public static ILoggingBuilder AddDynamicSerilog(this ILoggingBuilder builder, LoggerConfiguration loggerConfiguration, bool preserveStaticLogger = false, bool preserveDefaultConsole = false)
    parameters:
    - id: builder
      type: ILoggingBuilder
      description: The <see cref="!:ILoggingBuilder"></see> for configuring the LoggerFactory
    - id: loggerConfiguration
      type: LoggerConfiguration
      description: An initial <see cref="!:LoggerConfiguration"></see>
    - id: preserveStaticLogger
      type: System.Boolean
      description: Indicates whether to preserve the value of <see cref="!:Log.Logger"></see>.
    - id: preserveDefaultConsole
      type: System.Boolean
      description: When true, do not remove Microsoft&apos;s ConsoleLoggerProvider
    return:
      type: ILoggingBuilder
      description: The configured <see cref="!:ILoggingBuilder"></see>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddDynamicSerilog(builder As ILoggingBuilder, loggerConfiguration As LoggerConfiguration, preserveStaticLogger As Boolean = False, preserveDefaultConsole As Boolean = False) As ILoggingBuilder
  overload: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder)
  commentId: M:Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder)
  id: AddSerilogDynamicConsole(ILoggingBuilder)
  isExtensionMethod: true
  parent: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions
  langs:
  - csharp
  - vb
  name: AddSerilogDynamicConsole(ILoggingBuilder)
  nameWithType: SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder)
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddSerilogDynamicConsole
    path: ../Steeltoe/src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
    startLine: 81
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicSerilogBase
  namespace: Steeltoe.Extensions.Logging.DynamicSerilog
  summary: "\nAdd Steeltoe logger wrapped in a <xref href=\"Steeltoe.Extensions.Logging.IDynamicLoggerProvider\" data-throw-if-not-resolved=\"false\"></xref> that supports\ndynamically controlling the minimum log level via management endpoints\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Please use AddDynamicSerilog instead")]

      public static ILoggingBuilder AddSerilogDynamicConsole(this ILoggingBuilder builder)
    parameters:
    - id: builder
      type: ILoggingBuilder
      description: 'The <see cref="!:ILoggingBuilder"></see> for configuring the LoggerFactory  '
    return:
      type: ILoggingBuilder
      description: The configured <see cref="!:ILoggingBuilder"></see>
    content.vb: >-
      <Obsolete("Please use AddDynamicSerilog instead")>

      <ExtensionAttribute>

      Public Shared Function AddSerilogDynamicConsole(builder As ILoggingBuilder) As ILoggingBuilder
  overload: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Please use AddDynamicSerilog instead
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder,LoggerConfiguration,System.Boolean)
  commentId: M:Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder,LoggerConfiguration,System.Boolean)
  id: AddSerilogDynamicConsole(ILoggingBuilder,LoggerConfiguration,System.Boolean)
  isExtensionMethod: true
  parent: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions
  langs:
  - csharp
  - vb
  name: AddSerilogDynamicConsole(ILoggingBuilder, LoggerConfiguration, Boolean)
  nameWithType: SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder, LoggerConfiguration, Boolean)
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole(ILoggingBuilder, LoggerConfiguration, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddSerilogDynamicConsole
    path: ../Steeltoe/src/Logging/src/DynamicSerilogBase/SerilogLoggingBuilderExtensions.cs
    startLine: 92
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicSerilogBase
  namespace: Steeltoe.Extensions.Logging.DynamicSerilog
  summary: "\nAdd Steeltoe logger wrapped in a <xref href=\"Steeltoe.Extensions.Logging.IDynamicLoggerProvider\" data-throw-if-not-resolved=\"false\"></xref> that supports\ndynamically controlling the minimum log level via management endpoints\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Please use AddDynamicSerilog instead")]

      public static ILoggingBuilder AddSerilogDynamicConsole(this ILoggingBuilder builder, LoggerConfiguration loggerConfiguration, bool preserveStaticLogger = false)
    parameters:
    - id: builder
      type: ILoggingBuilder
      description: 'The <see cref="!:ILoggingBuilder"></see> for configuring the LoggerFactory  '
    - id: loggerConfiguration
      type: LoggerConfiguration
      description: An initial <see cref="!:LoggerConfiguration"></see>
    - id: preserveStaticLogger
      type: System.Boolean
      description: Indicates whether to preserve the value of <see cref="!:Log.Logger"></see>.
    return:
      type: ILoggingBuilder
      description: The configured <see cref="!:ILoggingBuilder"></see>
    content.vb: >-
      <Obsolete("Please use AddDynamicSerilog instead")>

      <ExtensionAttribute>

      Public Shared Function AddSerilogDynamicConsole(builder As ILoggingBuilder, loggerConfiguration As LoggerConfiguration, preserveStaticLogger As Boolean = False) As ILoggingBuilder
  overload: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Please use AddDynamicSerilog instead
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Extensions.Logging.DynamicSerilog
  commentId: N:Steeltoe.Extensions.Logging.DynamicSerilog
  name: Steeltoe.Extensions.Logging.DynamicSerilog
  nameWithType: Steeltoe.Extensions.Logging.DynamicSerilog
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Extensions.Logging.IDynamicLoggerProvider
  commentId: T:Steeltoe.Extensions.Logging.IDynamicLoggerProvider
  parent: Steeltoe.Extensions.Logging
  name: IDynamicLoggerProvider
  nameWithType: IDynamicLoggerProvider
  fullName: Steeltoe.Extensions.Logging.IDynamicLoggerProvider
- uid: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog
  name: AddDynamicSerilog
  nameWithType: SerilogLoggingBuilderExtensions.AddDynamicSerilog
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddDynamicSerilog
- uid: ILoggingBuilder
  isExternal: true
  name: ILoggingBuilder
  nameWithType: ILoggingBuilder
  fullName: ILoggingBuilder
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Extensions.Logging
  commentId: N:Steeltoe.Extensions.Logging
  name: Steeltoe.Extensions.Logging
  nameWithType: Steeltoe.Extensions.Logging
  fullName: Steeltoe.Extensions.Logging
- uid: LoggerConfiguration
  isExternal: true
  name: LoggerConfiguration
  nameWithType: LoggerConfiguration
  fullName: LoggerConfiguration
- uid: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole
  name: AddSerilogDynamicConsole
  nameWithType: SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole
  fullName: Steeltoe.Extensions.Logging.DynamicSerilog.SerilogLoggingBuilderExtensions.AddSerilogDynamicConsole
