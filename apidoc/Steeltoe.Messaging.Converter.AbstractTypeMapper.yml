### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper
  commentId: T:Steeltoe.Messaging.Converter.AbstractTypeMapper
  id: AbstractTypeMapper
  parent: Steeltoe.Messaging.Converter
  children:
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader(Steeltoe.Messaging.IMessageHeaders,System.String,System.Type)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CLASSID_FIELD_NAME
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CONTENT_CLASSID_FIELD_NAME
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_KEY_CLASSID_FIELD_NAME
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName(System.Type)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType(System.Type)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType(System.Type)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType(System.Type)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader(Steeltoe.Messaging.IMessageHeaders,System.String)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString(Steeltoe.Messaging.IMessageHeaders,System.String)
  - Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping(System.Collections.Generic.Dictionary{System.String,System.Type})
  langs:
  - csharp
  - vb
  name: AbstractTypeMapper
  nameWithType: AbstractTypeMapper
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractTypeMapper
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 10
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public abstract class AbstractTypeMapper
    content.vb: Public MustInherit Class AbstractTypeMapper
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Messaging.Converter.DefaultTypeMapper
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CLASSID_FIELD_NAME
  commentId: F:Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CLASSID_FIELD_NAME
  id: DEFAULT_CLASSID_FIELD_NAME
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: DEFAULT_CLASSID_FIELD_NAME
  nameWithType: AbstractTypeMapper.DEFAULT_CLASSID_FIELD_NAME
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CLASSID_FIELD_NAME
  type: Field
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DEFAULT_CLASSID_FIELD_NAME
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 12
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public const string DEFAULT_CLASSID_FIELD_NAME = "__TypeId__"
    return:
      type: System.String
    content.vb: Public Const DEFAULT_CLASSID_FIELD_NAME As String = "__TypeId__"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CONTENT_CLASSID_FIELD_NAME
  commentId: F:Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CONTENT_CLASSID_FIELD_NAME
  id: DEFAULT_CONTENT_CLASSID_FIELD_NAME
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: DEFAULT_CONTENT_CLASSID_FIELD_NAME
  nameWithType: AbstractTypeMapper.DEFAULT_CONTENT_CLASSID_FIELD_NAME
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_CONTENT_CLASSID_FIELD_NAME
  type: Field
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DEFAULT_CONTENT_CLASSID_FIELD_NAME
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public const string DEFAULT_CONTENT_CLASSID_FIELD_NAME = "__ContentTypeId__"
    return:
      type: System.String
    content.vb: Public Const DEFAULT_CONTENT_CLASSID_FIELD_NAME As String = "__ContentTypeId__"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_KEY_CLASSID_FIELD_NAME
  commentId: F:Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_KEY_CLASSID_FIELD_NAME
  id: DEFAULT_KEY_CLASSID_FIELD_NAME
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: DEFAULT_KEY_CLASSID_FIELD_NAME
  nameWithType: AbstractTypeMapper.DEFAULT_KEY_CLASSID_FIELD_NAME
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.DEFAULT_KEY_CLASSID_FIELD_NAME
  type: Field
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DEFAULT_KEY_CLASSID_FIELD_NAME
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 14
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public const string DEFAULT_KEY_CLASSID_FIELD_NAME = "__KeyTypeId__"
    return:
      type: System.String
    content.vb: Public Const DEFAULT_KEY_CLASSID_FIELD_NAME As String = "__KeyTypeId__"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping
  commentId: P:Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping
  id: IdClassMapping
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: IdClassMapping
  nameWithType: AbstractTypeMapper.IdClassMapping
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IdClassMapping
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 20
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public Dictionary<string, Type> IdClassMapping { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Type}
    content.vb: Public ReadOnly Property IdClassMapping As Dictionary(Of String, Type)
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName
  commentId: P:Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName
  id: ClassIdFieldName
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: ClassIdFieldName
  nameWithType: AbstractTypeMapper.ClassIdFieldName
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ClassIdFieldName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 22
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public string ClassIdFieldName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ClassIdFieldName As String
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName
  commentId: P:Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName
  id: ContentClassIdFieldName
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: ContentClassIdFieldName
  nameWithType: AbstractTypeMapper.ContentClassIdFieldName
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ContentClassIdFieldName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 24
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public string ContentClassIdFieldName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ContentClassIdFieldName As String
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName
  commentId: P:Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName
  id: KeyClassIdFieldName
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: KeyClassIdFieldName
  nameWithType: AbstractTypeMapper.KeyClassIdFieldName
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: KeyClassIdFieldName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 26
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public string KeyClassIdFieldName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property KeyClassIdFieldName As String
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping(System.Collections.Generic.Dictionary{System.String,System.Type})
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping(System.Collections.Generic.Dictionary{System.String,System.Type})
  id: SetIdClassMapping(System.Collections.Generic.Dictionary{System.String,System.Type})
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: SetIdClassMapping(Dictionary<String, Type>)
  nameWithType: AbstractTypeMapper.SetIdClassMapping(Dictionary<String, Type>)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping(System.Collections.Generic.Dictionary<System.String, System.Type>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetIdClassMapping
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 28
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public void SetIdClassMapping(Dictionary<string, Type> mapping)
    parameters:
    - id: mapping
      type: System.Collections.Generic.Dictionary{System.String,System.Type}
    content.vb: Public Sub SetIdClassMapping(mapping As Dictionary(Of String, Type))
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping*
  nameWithType.vb: AbstractTypeMapper.SetIdClassMapping(Dictionary(Of String, Type))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping(System.Collections.Generic.Dictionary(Of System.String, System.Type))
  name.vb: SetIdClassMapping(Dictionary(Of String, Type))
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader(Steeltoe.Messaging.IMessageHeaders,System.String,System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader(Steeltoe.Messaging.IMessageHeaders,System.String,System.Type)
  id: AddHeader(Steeltoe.Messaging.IMessageHeaders,System.String,System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: AddHeader(IMessageHeaders, String, Type)
  nameWithType: AbstractTypeMapper.AddHeader(IMessageHeaders, String, Type)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader(Steeltoe.Messaging.IMessageHeaders, System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddHeader
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 38
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual void AddHeader(IMessageHeaders headers, string headerName, Type clazz)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: headerName
      type: System.String
    - id: clazz
      type: System.Type
    content.vb: Protected Overridable Sub AddHeader(headers As IMessageHeaders, headerName As String, clazz As Type)
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader(Steeltoe.Messaging.IMessageHeaders,System.String)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader(Steeltoe.Messaging.IMessageHeaders,System.String)
  id: RetrieveHeader(Steeltoe.Messaging.IMessageHeaders,System.String)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: RetrieveHeader(IMessageHeaders, String)
  nameWithType: AbstractTypeMapper.RetrieveHeader(IMessageHeaders, String)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader(Steeltoe.Messaging.IMessageHeaders, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RetrieveHeader
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 51
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual string RetrieveHeader(IMessageHeaders headers, string headerName)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: headerName
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function RetrieveHeader(headers As IMessageHeaders, headerName As String) As String
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString(Steeltoe.Messaging.IMessageHeaders,System.String)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString(Steeltoe.Messaging.IMessageHeaders,System.String)
  id: RetrieveHeaderAsString(Steeltoe.Messaging.IMessageHeaders,System.String)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: RetrieveHeaderAsString(IMessageHeaders, String)
  nameWithType: AbstractTypeMapper.RetrieveHeaderAsString(IMessageHeaders, String)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString(Steeltoe.Messaging.IMessageHeaders, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RetrieveHeaderAsString
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 63
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual string RetrieveHeaderAsString(IMessageHeaders headers, string headerName)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: headerName
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function RetrieveHeaderAsString(headers As IMessageHeaders, headerName As String) As String
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  id: HasInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: HasInferredTypeHeader(IMessageHeaders)
  nameWithType: AbstractTypeMapper.HasInferredTypeHeader(IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HasInferredTypeHeader
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 75
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual bool HasInferredTypeHeader(IMessageHeaders headers)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function HasInferredTypeHeader(headers As IMessageHeaders) As Boolean
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  id: FromInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: FromInferredTypeHeader(IMessageHeaders)
  nameWithType: AbstractTypeMapper.FromInferredTypeHeader(IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader(Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromInferredTypeHeader
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 80
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected Type FromInferredTypeHeader(IMessageHeaders headers)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: System.Type
    content.vb: Protected Function FromInferredTypeHeader(headers As IMessageHeaders) As Type
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType(System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType(System.Type)
  id: GetContentType(System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: GetContentType(Type)
  nameWithType: AbstractTypeMapper.GetContentType(Type)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetContentType
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 85
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual Type GetContentType(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Type
    content.vb: Protected Overridable Function GetContentType(type As Type) As Type
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType(System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType(System.Type)
  id: IsContainerType(System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: IsContainerType(Type)
  nameWithType: AbstractTypeMapper.IsContainerType(Type)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsContainerType
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 103
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual bool IsContainerType(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function IsContainerType(type As Type) As Boolean
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType(System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType(System.Type)
  id: GetKeyType(System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: GetKeyType(Type)
  nameWithType: AbstractTypeMapper.GetKeyType(Type)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetKeyType
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 122
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual Type GetKeyType(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Type
    content.vb: Protected Overridable Function GetKeyType(type As Type) As Type
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName(System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName(System.Type)
  id: GetClassName(System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractTypeMapper
  langs:
  - csharp
  - vb
  name: GetClassName(Type)
  nameWithType: AbstractTypeMapper.GetClassName(Type)
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetClassName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractTypeMapper.cs
    startLine: 136
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual string GetClassName(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.String
    content.vb: Protected Overridable Function GetClassName(type As Type) As String
  overload: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Steeltoe.Messaging.Converter
  commentId: N:Steeltoe.Messaging.Converter
  name: Steeltoe.Messaging.Converter
  nameWithType: Steeltoe.Messaging.Converter
  fullName: Steeltoe.Messaging.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping
  name: IdClassMapping
  nameWithType: AbstractTypeMapper.IdClassMapping
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.IdClassMapping
- uid: System.Collections.Generic.Dictionary{System.String,System.Type}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Type>
  nameWithType: Dictionary<String, Type>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Type>
  nameWithType.vb: Dictionary(Of String, Type)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Type)
  name.vb: Dictionary(Of String, Type)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName
  name: ClassIdFieldName
  nameWithType: AbstractTypeMapper.ClassIdFieldName
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.ClassIdFieldName
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName
  name: ContentClassIdFieldName
  nameWithType: AbstractTypeMapper.ContentClassIdFieldName
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.ContentClassIdFieldName
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName
  name: KeyClassIdFieldName
  nameWithType: AbstractTypeMapper.KeyClassIdFieldName
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.KeyClassIdFieldName
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping
  name: SetIdClassMapping
  nameWithType: AbstractTypeMapper.SetIdClassMapping
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.SetIdClassMapping
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader
  name: AddHeader
  nameWithType: AbstractTypeMapper.AddHeader
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.AddHeader
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader
  name: RetrieveHeader
  nameWithType: AbstractTypeMapper.RetrieveHeader
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeader
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString
  name: RetrieveHeaderAsString
  nameWithType: AbstractTypeMapper.RetrieveHeaderAsString
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.RetrieveHeaderAsString
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader
  name: HasInferredTypeHeader
  nameWithType: AbstractTypeMapper.HasInferredTypeHeader
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.HasInferredTypeHeader
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader
  name: FromInferredTypeHeader
  nameWithType: AbstractTypeMapper.FromInferredTypeHeader
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.FromInferredTypeHeader
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType
  name: GetContentType
  nameWithType: AbstractTypeMapper.GetContentType
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetContentType
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType
  name: IsContainerType
  nameWithType: AbstractTypeMapper.IsContainerType
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.IsContainerType
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType
  name: GetKeyType
  nameWithType: AbstractTypeMapper.GetKeyType
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetKeyType
- uid: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName
  name: GetClassName
  nameWithType: AbstractTypeMapper.GetClassName
  fullName: Steeltoe.Messaging.Converter.AbstractTypeMapper.GetClassName
