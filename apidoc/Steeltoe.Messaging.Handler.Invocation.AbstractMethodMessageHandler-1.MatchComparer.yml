### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer
  commentId: T:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer
  id: AbstractMethodMessageHandler`1.MatchComparer
  parent: Steeltoe.Messaging.Handler.Invocation
  children:
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.#ctor(System.Collections.Generic.IComparer{`0})
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match,Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match)
  langs:
  - csharp
  - vb
  name: AbstractMethodMessageHandler<T>.MatchComparer
  nameWithType: AbstractMethodMessageHandler<T>.MatchComparer
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MatchComparer
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MatchComparer
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 475
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: 'protected class MatchComparer : IComparer<AbstractMethodMessageHandler<T>.Match>'
    content.vb: >-
      Protected Class MatchComparer

          Implements IComparer(Of AbstractMethodMessageHandler(Of T).Match)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MatchComparer
  modifiers.csharp:
  - protected
  - class
  modifiers.vb:
  - Protected
  - Class
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MatchComparer
  name.vb: AbstractMethodMessageHandler(Of T).MatchComparer
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer
  langs:
  - csharp
  - vb
  name: MatchComparer(IComparer<T>)
  nameWithType: AbstractMethodMessageHandler<T>.MatchComparer.MatchComparer(IComparer<T>)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MatchComparer.MatchComparer(System.Collections.Generic.IComparer<T>)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 479
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public MatchComparer(IComparer<T> comparator)
    parameters:
    - id: comparator
      type: System.Collections.Generic.IComparer{{T}}
    content.vb: Public Sub New(comparator As IComparer(Of T))
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.#ctor*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MatchComparer.MatchComparer(IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MatchComparer.MatchComparer(System.Collections.Generic.IComparer(Of T))
  name.vb: MatchComparer(IComparer(Of T))
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match,Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match,Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match)
  id: Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match,Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer
  langs:
  - csharp
  - vb
  name: Compare(AbstractMethodMessageHandler<T>.Match, AbstractMethodMessageHandler<T>.Match)
  nameWithType: AbstractMethodMessageHandler<T>.MatchComparer.Compare(AbstractMethodMessageHandler<T>.Match, AbstractMethodMessageHandler<T>.Match)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MatchComparer.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.Match, Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.Match)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Compare
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 484
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public int Compare(AbstractMethodMessageHandler<T>.Match match1, AbstractMethodMessageHandler<T>.Match match2)
    parameters:
    - id: match1
      type: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    - id: match2
      type: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    return:
      type: System.Int32
    content.vb: Public Function Compare(match1 As AbstractMethodMessageHandler(Of T).Match, match2 As AbstractMethodMessageHandler(Of T).Match) As Integer
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.Compare*
  implements:
  - System.Collections.Generic.IComparer{Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match}.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{{T}}.Match,Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{{T}}.Match)
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MatchComparer.Compare(AbstractMethodMessageHandler(Of T).Match, AbstractMethodMessageHandler(Of T).Match)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MatchComparer.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).Match, Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).Match)
  name.vb: Compare(AbstractMethodMessageHandler(Of T).Match, AbstractMethodMessageHandler(Of T).Match)
references:
- uid: Steeltoe.Messaging.Handler.Invocation
  commentId: N:Steeltoe.Messaging.Handler.Invocation
  name: Steeltoe.Messaging.Handler.Invocation
  nameWithType: Steeltoe.Messaging.Handler.Invocation
  fullName: Steeltoe.Messaging.Handler.Invocation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IComparer{Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match}
  commentId: T:System.Collections.Generic.IComparer{Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<AbstractMethodMessageHandler.Match<>>
  nameWithType: IComparer<AbstractMethodMessageHandler.Match<>>
  fullName: System.Collections.Generic.IComparer<Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match<>>
  nameWithType.vb: IComparer(Of AbstractMethodMessageHandler.Match(Of ))
  fullName.vb: System.Collections.Generic.IComparer(Of Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match(Of ))
  name.vb: IComparer(Of AbstractMethodMessageHandler.Match(Of ))
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.#ctor*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.#ctor
  name: MatchComparer
  nameWithType: AbstractMethodMessageHandler<T>.MatchComparer.MatchComparer
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MatchComparer.MatchComparer
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MatchComparer.MatchComparer
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MatchComparer.MatchComparer
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.Compare*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MatchComparer.Compare
  name: Compare
  nameWithType: AbstractMethodMessageHandler<T>.MatchComparer.Compare
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MatchComparer.Compare
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MatchComparer.Compare
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MatchComparer.Compare
- uid: System.Collections.Generic.IComparer{Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match}.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{{T}}.Match,Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{{T}}.Match)
  commentId: M:System.Collections.Generic.IComparer{Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match}.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match,Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler{`0}.Match)
  parent: System.Collections.Generic.IComparer{Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(AbstractMethodMessageHandler.Match<>, AbstractMethodMessageHandler.Match<>)
  nameWithType: IComparer<AbstractMethodMessageHandler<T>.Match>.Compare(AbstractMethodMessageHandler.Match<>, AbstractMethodMessageHandler.Match<>)
  fullName: System.Collections.Generic.IComparer<Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.Match>.Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match<>, Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match<>)
  nameWithType.vb: IComparer(Of AbstractMethodMessageHandler(Of T).Match).Compare(AbstractMethodMessageHandler.Match(Of ), AbstractMethodMessageHandler.Match(Of ))
  fullName.vb: System.Collections.Generic.IComparer(Of Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).Match).Compare(Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match(Of ), Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match(Of ))
  name.vb: Compare(AbstractMethodMessageHandler.Match(Of ), AbstractMethodMessageHandler.Match(Of ))
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<AbstractMethodMessageHandler<T>.Match>.Compare
    fullName: System.Collections.Generic.IComparer<Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.Match>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of AbstractMethodMessageHandler(Of T).Match).Compare
    fullName: System.Collections.Generic.IComparer(Of Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).Match).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
  commentId: T:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
  parent: Steeltoe.Messaging.Handler.Invocation
  name: AbstractMethodMessageHandler.Match<>
  nameWithType: AbstractMethodMessageHandler.Match<>
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match<>
  nameWithType.vb: AbstractMethodMessageHandler.Match(Of )
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match(Of )
  name.vb: AbstractMethodMessageHandler.Match(Of )
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.Match
    name: AbstractMethodMessageHandler.Match
    nameWithType: AbstractMethodMessageHandler.Match
    fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler.Match
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
