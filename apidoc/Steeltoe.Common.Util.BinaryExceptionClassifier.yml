### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier
  commentId: T:Steeltoe.Common.Util.BinaryExceptionClassifier
  id: BinaryExceptionClassifier
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Boolean)
  - Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean})
  - Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean},System.Boolean)
  - Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.IList{System.Type})
  - Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.IList{System.Type},System.Boolean)
  - Steeltoe.Common.Util.BinaryExceptionClassifier.Classify(System.Exception)
  - Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions
  langs:
  - csharp
  - vb
  name: BinaryExceptionClassifier
  nameWithType: BinaryExceptionClassifier
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: BinaryExceptionClassifier
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 10
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: 'public class BinaryExceptionClassifier : SubclassClassifier<Exception, bool>, IClassifier<Exception, bool>'
    content.vb: >-
      Public Class BinaryExceptionClassifier

          Inherits SubclassClassifier(Of Exception, Boolean)

          Implements IClassifier(Of Exception, Boolean)
  inheritance:
  - System.Object
  - Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}
  implements:
  - Steeltoe.Common.Util.IClassifier{System.Exception,System.Boolean}
  inheritedMembers:
  - Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.DefaultValue
  - Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.TypeMap
  - Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.Classify(System.Exception)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions
  commentId: P:Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions
  id: TraverseInnerExceptions
  parent: Steeltoe.Common.Util.BinaryExceptionClassifier
  langs:
  - csharp
  - vb
  name: TraverseInnerExceptions
  nameWithType: BinaryExceptionClassifier.TraverseInnerExceptions
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: TraverseInnerExceptions
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 12
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool TraverseInnerExceptions { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property TraverseInnerExceptions As Boolean
  overload: Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Boolean)
  commentId: M:Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Steeltoe.Common.Util.BinaryExceptionClassifier
  langs:
  - csharp
  - vb
  name: BinaryExceptionClassifier(Boolean)
  nameWithType: BinaryExceptionClassifier.BinaryExceptionClassifier(Boolean)
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 14
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public BinaryExceptionClassifier(bool defaultValue)
    parameters:
    - id: defaultValue
      type: System.Boolean
    content.vb: Public Sub New(defaultValue As Boolean)
  overload: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.IList{System.Type},System.Boolean)
  commentId: M:Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.IList{System.Type},System.Boolean)
  id: '#ctor(System.Collections.Generic.IList{System.Type},System.Boolean)'
  parent: Steeltoe.Common.Util.BinaryExceptionClassifier
  langs:
  - csharp
  - vb
  name: BinaryExceptionClassifier(IList<Type>, Boolean)
  nameWithType: BinaryExceptionClassifier.BinaryExceptionClassifier(IList<Type>, Boolean)
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.IList<System.Type>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 19
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public BinaryExceptionClassifier(IList<Type> exceptionClasses, bool defaultValue)
    parameters:
    - id: exceptionClasses
      type: System.Collections.Generic.IList{System.Type}
    - id: defaultValue
      type: System.Boolean
    content.vb: Public Sub New(exceptionClasses As IList(Of Type), defaultValue As Boolean)
  overload: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor*
  nameWithType.vb: BinaryExceptionClassifier.BinaryExceptionClassifier(IList(Of Type), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.IList(Of System.Type), System.Boolean)
  name.vb: BinaryExceptionClassifier(IList(Of Type), Boolean)
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.IList{System.Type})
  commentId: M:Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.IList{System.Type})
  id: '#ctor(System.Collections.Generic.IList{System.Type})'
  parent: Steeltoe.Common.Util.BinaryExceptionClassifier
  langs:
  - csharp
  - vb
  name: BinaryExceptionClassifier(IList<Type>)
  nameWithType: BinaryExceptionClassifier.BinaryExceptionClassifier(IList<Type>)
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.IList<System.Type>)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 34
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public BinaryExceptionClassifier(IList<Type> exceptionClasses)
    parameters:
    - id: exceptionClasses
      type: System.Collections.Generic.IList{System.Type}
    content.vb: Public Sub New(exceptionClasses As IList(Of Type))
  overload: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor*
  nameWithType.vb: BinaryExceptionClassifier.BinaryExceptionClassifier(IList(Of Type))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.IList(Of System.Type))
  name.vb: BinaryExceptionClassifier(IList(Of Type))
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean})
  commentId: M:Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean})
  id: '#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean})'
  parent: Steeltoe.Common.Util.BinaryExceptionClassifier
  langs:
  - csharp
  - vb
  name: BinaryExceptionClassifier(Dictionary<Type, Boolean>)
  nameWithType: BinaryExceptionClassifier.BinaryExceptionClassifier(Dictionary<Type, Boolean>)
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.Dictionary<System.Type, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 39
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public BinaryExceptionClassifier(Dictionary<Type, bool> typeMap)
    parameters:
    - id: typeMap
      type: System.Collections.Generic.Dictionary{System.Type,System.Boolean}
    content.vb: Public Sub New(typeMap As Dictionary(Of Type, Boolean))
  overload: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor*
  nameWithType.vb: BinaryExceptionClassifier.BinaryExceptionClassifier(Dictionary(Of Type, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.Dictionary(Of System.Type, System.Boolean))
  name.vb: BinaryExceptionClassifier(Dictionary(Of Type, Boolean))
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean},System.Boolean)
  commentId: M:Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean},System.Boolean)
  id: '#ctor(System.Collections.Generic.Dictionary{System.Type,System.Boolean},System.Boolean)'
  parent: Steeltoe.Common.Util.BinaryExceptionClassifier
  langs:
  - csharp
  - vb
  name: BinaryExceptionClassifier(Dictionary<Type, Boolean>, Boolean)
  nameWithType: BinaryExceptionClassifier.BinaryExceptionClassifier(Dictionary<Type, Boolean>, Boolean)
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.Dictionary<System.Type, System.Boolean>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 44
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public BinaryExceptionClassifier(Dictionary<Type, bool> typeMap, bool defaultValue)
    parameters:
    - id: typeMap
      type: System.Collections.Generic.Dictionary{System.Type,System.Boolean}
    - id: defaultValue
      type: System.Boolean
    content.vb: Public Sub New(typeMap As Dictionary(Of Type, Boolean), defaultValue As Boolean)
  overload: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor*
  nameWithType.vb: BinaryExceptionClassifier.BinaryExceptionClassifier(Dictionary(Of Type, Boolean), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier(System.Collections.Generic.Dictionary(Of System.Type, System.Boolean), System.Boolean)
  name.vb: BinaryExceptionClassifier(Dictionary(Of Type, Boolean), Boolean)
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.Classify(System.Exception)
  commentId: M:Steeltoe.Common.Util.BinaryExceptionClassifier.Classify(System.Exception)
  id: Classify(System.Exception)
  parent: Steeltoe.Common.Util.BinaryExceptionClassifier
  langs:
  - csharp
  - vb
  name: Classify(Exception)
  nameWithType: BinaryExceptionClassifier.Classify(Exception)
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.Classify(System.Exception)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/BinaryExceptionClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Classify
    path: ../Steeltoe/src/Common/src/Common/Util/BinaryExceptionClassifier.cs
    startLine: 49
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public override bool Classify(Exception classifiable)
    parameters:
    - id: classifiable
      type: System.Exception
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Classify(classifiable As Exception) As Boolean
  overridden: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.Classify(System.Exception)
  overload: Steeltoe.Common.Util.BinaryExceptionClassifier.Classify*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}
  commentId: T:Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}
  parent: Steeltoe.Common.Util
  definition: Steeltoe.Common.Util.SubclassClassifier`2
  name: SubclassClassifier<Exception, Boolean>
  nameWithType: SubclassClassifier<Exception, Boolean>
  fullName: Steeltoe.Common.Util.SubclassClassifier<System.Exception, System.Boolean>
  nameWithType.vb: SubclassClassifier(Of Exception, Boolean)
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of System.Exception, System.Boolean)
  name.vb: SubclassClassifier(Of Exception, Boolean)
  spec.csharp:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2
    name: SubclassClassifier
    nameWithType: SubclassClassifier
    fullName: Steeltoe.Common.Util.SubclassClassifier
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2
    name: SubclassClassifier
    nameWithType: SubclassClassifier
    fullName: Steeltoe.Common.Util.SubclassClassifier
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.IClassifier{System.Exception,System.Boolean}
  commentId: T:Steeltoe.Common.Util.IClassifier{System.Exception,System.Boolean}
  parent: Steeltoe.Common.Util
  definition: Steeltoe.Common.Util.IClassifier`2
  name: IClassifier<Exception, Boolean>
  nameWithType: IClassifier<Exception, Boolean>
  fullName: Steeltoe.Common.Util.IClassifier<System.Exception, System.Boolean>
  nameWithType.vb: IClassifier(Of Exception, Boolean)
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of System.Exception, System.Boolean)
  name.vb: IClassifier(Of Exception, Boolean)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.DefaultValue
  commentId: P:Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.DefaultValue
  parent: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}
  definition: Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue
  name: DefaultValue
  nameWithType: SubclassClassifier<Exception, Boolean>.DefaultValue
  fullName: Steeltoe.Common.Util.SubclassClassifier<System.Exception, System.Boolean>.DefaultValue
  nameWithType.vb: SubclassClassifier(Of Exception, Boolean).DefaultValue
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of System.Exception, System.Boolean).DefaultValue
- uid: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.TypeMap
  commentId: P:Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.TypeMap
  parent: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}
  definition: Steeltoe.Common.Util.SubclassClassifier`2.TypeMap
  name: TypeMap
  nameWithType: SubclassClassifier<Exception, Boolean>.TypeMap
  fullName: Steeltoe.Common.Util.SubclassClassifier<System.Exception, System.Boolean>.TypeMap
  nameWithType.vb: SubclassClassifier(Of Exception, Boolean).TypeMap
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of System.Exception, System.Boolean).TypeMap
- uid: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.Classify(System.Exception)
  commentId: M:Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}.Classify(System.Exception)
  parent: Steeltoe.Common.Util.SubclassClassifier{System.Exception,System.Boolean}
  definition: Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
  name: Classify(Exception)
  nameWithType: SubclassClassifier<Exception, Boolean>.Classify(Exception)
  fullName: Steeltoe.Common.Util.SubclassClassifier<System.Exception, System.Boolean>.Classify(System.Exception)
  nameWithType.vb: SubclassClassifier(Of Exception, Boolean).Classify(Exception)
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of System.Exception, System.Boolean).Classify(System.Exception)
  spec.csharp:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
    name: Classify
    nameWithType: SubclassClassifier<Exception, Boolean>.Classify
    fullName: Steeltoe.Common.Util.SubclassClassifier<System.Exception, System.Boolean>.Classify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
    name: Classify
    nameWithType: SubclassClassifier(Of Exception, Boolean).Classify
    fullName: Steeltoe.Common.Util.SubclassClassifier(Of System.Exception, System.Boolean).Classify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Util.SubclassClassifier`2
  commentId: T:Steeltoe.Common.Util.SubclassClassifier`2
  name: SubclassClassifier<T, C>
  nameWithType: SubclassClassifier<T, C>
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>
  nameWithType.vb: SubclassClassifier(Of T, C)
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C)
  name.vb: SubclassClassifier(Of T, C)
  spec.csharp:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2
    name: SubclassClassifier
    nameWithType: SubclassClassifier
    fullName: Steeltoe.Common.Util.SubclassClassifier
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2
    name: SubclassClassifier
    nameWithType: SubclassClassifier
    fullName: Steeltoe.Common.Util.SubclassClassifier
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.IClassifier`2
  commentId: T:Steeltoe.Common.Util.IClassifier`2
  name: IClassifier<C, T>
  nameWithType: IClassifier<C, T>
  fullName: Steeltoe.Common.Util.IClassifier<C, T>
  nameWithType.vb: IClassifier(Of C, T)
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of C, T)
  name.vb: IClassifier(Of C, T)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: <
    nameWithType: <
    fullName: <
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue
  commentId: P:Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue
  name: DefaultValue
  nameWithType: SubclassClassifier<T, C>.DefaultValue
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.DefaultValue
  nameWithType.vb: SubclassClassifier(Of T, C).DefaultValue
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).DefaultValue
- uid: Steeltoe.Common.Util.SubclassClassifier`2.TypeMap
  commentId: P:Steeltoe.Common.Util.SubclassClassifier`2.TypeMap
  name: TypeMap
  nameWithType: SubclassClassifier<T, C>.TypeMap
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.TypeMap
  nameWithType.vb: SubclassClassifier(Of T, C).TypeMap
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).TypeMap
- uid: Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
  commentId: M:Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
  name: Classify(T)
  nameWithType: SubclassClassifier<T, C>.Classify(T)
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.Classify(T)
  nameWithType.vb: SubclassClassifier(Of T, C).Classify(T)
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).Classify(T)
  spec.csharp:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
    name: Classify
    nameWithType: SubclassClassifier<T, C>.Classify
    fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.Classify
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
    name: Classify
    nameWithType: SubclassClassifier(Of T, C).Classify
    fullName: Steeltoe.Common.Util.SubclassClassifier(Of T, C).Classify
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions*
  commentId: Overload:Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions
  name: TraverseInnerExceptions
  nameWithType: BinaryExceptionClassifier.TraverseInnerExceptions
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.TraverseInnerExceptions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor*
  commentId: Overload:Steeltoe.Common.Util.BinaryExceptionClassifier.#ctor
  name: BinaryExceptionClassifier
  nameWithType: BinaryExceptionClassifier.BinaryExceptionClassifier
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.BinaryExceptionClassifier
- uid: System.Collections.Generic.IList{System.Type}
  commentId: T:System.Collections.Generic.IList{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Type>
  nameWithType: IList<Type>
  fullName: System.Collections.Generic.IList<System.Type>
  nameWithType.vb: IList(Of Type)
  fullName.vb: System.Collections.Generic.IList(Of System.Type)
  name.vb: IList(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.Type,System.Boolean}
  commentId: T:System.Collections.Generic.Dictionary{System.Type,System.Boolean}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Type, Boolean>
  nameWithType: Dictionary<Type, Boolean>
  fullName: System.Collections.Generic.Dictionary<System.Type, System.Boolean>
  nameWithType.vb: Dictionary(Of Type, Boolean)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Type, System.Boolean)
  name.vb: Dictionary(Of Type, Boolean)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.BinaryExceptionClassifier.Classify*
  commentId: Overload:Steeltoe.Common.Util.BinaryExceptionClassifier.Classify
  name: Classify
  nameWithType: BinaryExceptionClassifier.Classify
  fullName: Steeltoe.Common.Util.BinaryExceptionClassifier.Classify
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
