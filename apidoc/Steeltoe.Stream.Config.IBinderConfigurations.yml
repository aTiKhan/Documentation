### YamlMime:ManagedReference
items:
- uid: Steeltoe.Stream.Config.IBinderConfigurations
  commentId: T:Steeltoe.Stream.Config.IBinderConfigurations
  id: IBinderConfigurations
  parent: Steeltoe.Stream.Config
  children:
  - Steeltoe.Stream.Config.IBinderConfigurations.Configurations
  - Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny(Steeltoe.Stream.Binder.IBinder)
  langs:
  - csharp
  - vb
  name: IBinderConfigurations
  nameWithType: IBinderConfigurations
  fullName: Steeltoe.Stream.Config.IBinderConfigurations
  type: Interface
  source:
    remote:
      path: src/Stream/src/StreamBase/Config/IBinderConfigurations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IBinderConfigurations
    path: ../Steeltoe/src/Stream/src/StreamBase/Config/IBinderConfigurations.cs
    startLine: 9
  assemblies:
  - Steeltoe.Stream.StreamBase
  namespace: Steeltoe.Stream.Config
  syntax:
    content: public interface IBinderConfigurations
    content.vb: Public Interface IBinderConfigurations
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Stream.Config.IBinderConfigurations.Configurations
  commentId: P:Steeltoe.Stream.Config.IBinderConfigurations.Configurations
  id: Configurations
  parent: Steeltoe.Stream.Config.IBinderConfigurations
  langs:
  - csharp
  - vb
  name: Configurations
  nameWithType: IBinderConfigurations.Configurations
  fullName: Steeltoe.Stream.Config.IBinderConfigurations.Configurations
  type: Property
  source:
    remote:
      path: src/Stream/src/StreamBase/Config/IBinderConfigurations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Configurations
    path: ../Steeltoe/src/Stream/src/StreamBase/Config/IBinderConfigurations.cs
    startLine: 11
  assemblies:
  - Steeltoe.Stream.StreamBase
  namespace: Steeltoe.Stream.Config
  syntax:
    content: Dictionary<string, BinderConfiguration> Configurations { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Steeltoe.Stream.Binder.BinderConfiguration}
    content.vb: ReadOnly Property Configurations As Dictionary(Of String, BinderConfiguration)
  overload: Steeltoe.Stream.Config.IBinderConfigurations.Configurations*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny(Steeltoe.Stream.Binder.IBinder)
  commentId: M:Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny(Steeltoe.Stream.Binder.IBinder)
  id: FindMatchingConfigurationsIfAny(Steeltoe.Stream.Binder.IBinder)
  parent: Steeltoe.Stream.Config.IBinderConfigurations
  langs:
  - csharp
  - vb
  name: FindMatchingConfigurationsIfAny(IBinder)
  nameWithType: IBinderConfigurations.FindMatchingConfigurationsIfAny(IBinder)
  fullName: Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny(Steeltoe.Stream.Binder.IBinder)
  type: Method
  source:
    remote:
      path: src/Stream/src/StreamBase/Config/IBinderConfigurations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FindMatchingConfigurationsIfAny
    path: ../Steeltoe/src/Stream/src/StreamBase/Config/IBinderConfigurations.cs
    startLine: 13
  assemblies:
  - Steeltoe.Stream.StreamBase
  namespace: Steeltoe.Stream.Config
  syntax:
    content: List<string> FindMatchingConfigurationsIfAny(IBinder binder)
    parameters:
    - id: binder
      type: Steeltoe.Stream.Binder.IBinder
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Function FindMatchingConfigurationsIfAny(binder As IBinder) As List(Of String)
  overload: Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny*
references:
- uid: Steeltoe.Stream.Config
  commentId: N:Steeltoe.Stream.Config
  name: Steeltoe.Stream.Config
  nameWithType: Steeltoe.Stream.Config
  fullName: Steeltoe.Stream.Config
- uid: Steeltoe.Stream.Config.IBinderConfigurations.Configurations*
  commentId: Overload:Steeltoe.Stream.Config.IBinderConfigurations.Configurations
  name: Configurations
  nameWithType: IBinderConfigurations.Configurations
  fullName: Steeltoe.Stream.Config.IBinderConfigurations.Configurations
- uid: System.Collections.Generic.Dictionary{System.String,Steeltoe.Stream.Binder.BinderConfiguration}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Steeltoe.Stream.Binder.BinderConfiguration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, BinderConfiguration>
  nameWithType: Dictionary<String, BinderConfiguration>
  fullName: System.Collections.Generic.Dictionary<System.String, Steeltoe.Stream.Binder.BinderConfiguration>
  nameWithType.vb: Dictionary(Of String, BinderConfiguration)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Steeltoe.Stream.Binder.BinderConfiguration)
  name.vb: Dictionary(Of String, BinderConfiguration)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Stream.Binder.BinderConfiguration
    name: BinderConfiguration
    nameWithType: BinderConfiguration
    fullName: Steeltoe.Stream.Binder.BinderConfiguration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Stream.Binder.BinderConfiguration
    name: BinderConfiguration
    nameWithType: BinderConfiguration
    fullName: Steeltoe.Stream.Binder.BinderConfiguration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny*
  commentId: Overload:Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny
  name: FindMatchingConfigurationsIfAny
  nameWithType: IBinderConfigurations.FindMatchingConfigurationsIfAny
  fullName: Steeltoe.Stream.Config.IBinderConfigurations.FindMatchingConfigurationsIfAny
- uid: Steeltoe.Stream.Binder.IBinder
  commentId: T:Steeltoe.Stream.Binder.IBinder
  parent: Steeltoe.Stream.Binder
  name: IBinder
  nameWithType: IBinder
  fullName: Steeltoe.Stream.Binder.IBinder
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Stream.Binder
  commentId: N:Steeltoe.Stream.Binder
  name: Steeltoe.Stream.Binder
  nameWithType: Steeltoe.Stream.Binder
  fullName: Steeltoe.Stream.Binder
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
