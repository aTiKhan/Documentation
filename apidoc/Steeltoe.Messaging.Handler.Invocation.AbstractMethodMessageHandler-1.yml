### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  commentId: T:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  id: AbstractMethodMessageHandler`1
  parent: Steeltoe.Messaging.Handler.Invocation
  children:
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.#ctor
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ArgumentResolvers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateExceptionHandlerMethodResolverFor(System.Type)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateHandlerMethod(System.Object,System.Reflection.MethodInfo)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomArgumentResolvers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomReturnValueHandlers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DestinationPrefixes
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DetectHandlerMethods(System.Object)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDestination(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDirectLookupDestinations(`0)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetExceptionHandlerMethod(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetLookupDestination(System.String)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingComparer(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingForMethod(System.Reflection.MethodInfo,System.Type)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMatchingMapping(`0,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMatch(`0,Steeltoe.Messaging.Handler.HandlerMethod,System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessage(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessageInternal(Steeltoe.Messaging.IMessage,System.String)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleNoMatch(System.Collections.Generic.ICollection{`0},System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandlerMethods
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitArgumentResolvers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitReturnValueHandlers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodArgumentResolvers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodReturnValueHandlers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ProcessHandlerMethodException(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.RegisterHandlerMethod(System.Object,System.Reflection.MethodInfo,`0)
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ReturnValueHandlers
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ServiceName
  - Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ToString
  langs:
  - csharp
  - vb
  name: AbstractMethodMessageHandler<T>
  nameWithType: AbstractMethodMessageHandler<T>
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractMethodMessageHandler
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: 'public abstract class AbstractMethodMessageHandler<T> : IMessageHandler, IServiceNameAware'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class AbstractMethodMessageHandler(Of T)

          Implements IMessageHandler, IServiceNameAware
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Messaging.IMessageHandler
  - IServiceNameAware
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: AbstractMethodMessageHandler(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T)
  name.vb: AbstractMethodMessageHandler(Of T)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.#ctor
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.#ctor
  id: '#ctor'
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: AbstractMethodMessageHandler()
  nameWithType: AbstractMethodMessageHandler<T>.AbstractMethodMessageHandler()
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.AbstractMethodMessageHandler()
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 24
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected AbstractMethodMessageHandler()
    content.vb: Protected Sub New
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.#ctor*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).AbstractMethodMessageHandler()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).AbstractMethodMessageHandler()
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ServiceName
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ServiceName
  id: ServiceName
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: AbstractMethodMessageHandler<T>.ServiceName
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ServiceName
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 29
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual string ServiceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property ServiceName As String
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ServiceName*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ServiceName
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ServiceName
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DestinationPrefixes
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DestinationPrefixes
  id: DestinationPrefixes
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: DestinationPrefixes
  nameWithType: AbstractMethodMessageHandler<T>.DestinationPrefixes
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.DestinationPrefixes
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DestinationPrefixes
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 31
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual IList<string> DestinationPrefixes { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: Public Overridable Property DestinationPrefixes As IList(Of String)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DestinationPrefixes*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).DestinationPrefixes
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).DestinationPrefixes
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomArgumentResolvers
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomArgumentResolvers
  id: CustomArgumentResolvers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: CustomArgumentResolvers
  nameWithType: AbstractMethodMessageHandler<T>.CustomArgumentResolvers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CustomArgumentResolvers
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CustomArgumentResolvers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 53
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual IList<IHandlerMethodArgumentResolver> CustomArgumentResolvers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver}
    content.vb: Public Overridable Property CustomArgumentResolvers As IList(Of IHandlerMethodArgumentResolver)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomArgumentResolvers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CustomArgumentResolvers
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CustomArgumentResolvers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ArgumentResolvers
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ArgumentResolvers
  id: ArgumentResolvers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: ArgumentResolvers
  nameWithType: AbstractMethodMessageHandler<T>.ArgumentResolvers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ArgumentResolvers
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ArgumentResolvers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 72
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual IList<IHandlerMethodArgumentResolver> ArgumentResolvers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver}
    content.vb: Public Overridable Property ArgumentResolvers As IList(Of IHandlerMethodArgumentResolver)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ArgumentResolvers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ArgumentResolvers
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ArgumentResolvers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ReturnValueHandlers
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ReturnValueHandlers
  id: ReturnValueHandlers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: ReturnValueHandlers
  nameWithType: AbstractMethodMessageHandler<T>.ReturnValueHandlers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ReturnValueHandlers
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReturnValueHandlers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 95
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual IList<IHandlerMethodReturnValueHandler> ReturnValueHandlers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler}
    content.vb: Public Overridable Property ReturnValueHandlers As IList(Of IHandlerMethodReturnValueHandler)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ReturnValueHandlers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ReturnValueHandlers
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ReturnValueHandlers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomReturnValueHandlers
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomReturnValueHandlers
  id: CustomReturnValueHandlers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: CustomReturnValueHandlers
  nameWithType: AbstractMethodMessageHandler<T>.CustomReturnValueHandlers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CustomReturnValueHandlers
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CustomReturnValueHandlers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 118
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual IList<IHandlerMethodReturnValueHandler> CustomReturnValueHandlers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler}
    content.vb: Public Overridable Property CustomReturnValueHandlers As IList(Of IHandlerMethodReturnValueHandler)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomReturnValueHandlers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CustomReturnValueHandlers
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CustomReturnValueHandlers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandlerMethods
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandlerMethods
  id: HandlerMethods
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: HandlerMethods
  nameWithType: AbstractMethodMessageHandler<T>.HandlerMethods
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandlerMethods
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandlerMethods
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 137
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual IDictionary<T, HandlerMethod> HandlerMethods { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{{T},Steeltoe.Messaging.Handler.HandlerMethod}
    content.vb: Public Overridable ReadOnly Property HandlerMethods As IDictionary(Of T, HandlerMethod)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandlerMethods*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandlerMethods
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandlerMethods
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessage(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessage(Steeltoe.Messaging.IMessage)
  id: HandleMessage(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: HandleMessage(IMessage)
  nameWithType: AbstractMethodMessageHandler<T>.HandleMessage(IMessage)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleMessage(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandleMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 145
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public virtual void HandleMessage(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Sub HandleMessage(message As IMessage)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessage*
  implements:
  - Steeltoe.Messaging.IMessageHandler.HandleMessage(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleMessage(IMessage)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleMessage(Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ToString
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ToString
  id: ToString
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AbstractMethodMessageHandler<T>.ToString()
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ToString()
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToString
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 168
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ToString*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ToString()
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodArgumentResolvers
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodArgumentResolvers
  id: MethodArgumentResolvers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: MethodArgumentResolvers
  nameWithType: AbstractMethodMessageHandler<T>.MethodArgumentResolvers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MethodArgumentResolvers
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MethodArgumentResolvers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 173
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected HandlerMethodArgumentResolverComposite MethodArgumentResolvers { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.Handler.Invocation.HandlerMethodArgumentResolverComposite
    content.vb: Protected ReadOnly Property MethodArgumentResolvers As HandlerMethodArgumentResolverComposite
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodArgumentResolvers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MethodArgumentResolvers
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MethodArgumentResolvers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodReturnValueHandlers
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodReturnValueHandlers
  id: MethodReturnValueHandlers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: MethodReturnValueHandlers
  nameWithType: AbstractMethodMessageHandler<T>.MethodReturnValueHandlers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MethodReturnValueHandlers
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MethodReturnValueHandlers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 186
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected HandlerMethodReturnValueHandlerComposite MethodReturnValueHandlers { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.Handler.Invocation.HandlerMethodReturnValueHandlerComposite
    content.vb: Protected ReadOnly Property MethodReturnValueHandlers As HandlerMethodReturnValueHandlerComposite
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodReturnValueHandlers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MethodReturnValueHandlers
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MethodReturnValueHandlers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitArgumentResolvers
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitArgumentResolvers
  id: InitArgumentResolvers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: InitArgumentResolvers()
  nameWithType: AbstractMethodMessageHandler<T>.InitArgumentResolvers()
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.InitArgumentResolvers()
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: InitArgumentResolvers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 199
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract IList<IHandlerMethodArgumentResolver> InitArgumentResolvers()
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver}
    content.vb: Protected MustOverride Function InitArgumentResolvers As IList(Of IHandlerMethodArgumentResolver)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitArgumentResolvers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).InitArgumentResolvers()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).InitArgumentResolvers()
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitReturnValueHandlers
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitReturnValueHandlers
  id: InitReturnValueHandlers
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: InitReturnValueHandlers()
  nameWithType: AbstractMethodMessageHandler<T>.InitReturnValueHandlers()
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.InitReturnValueHandlers()
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: InitReturnValueHandlers
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 201
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract IList<IHandlerMethodReturnValueHandler> InitReturnValueHandlers()
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler}
    content.vb: Protected MustOverride Function InitReturnValueHandlers As IList(Of IHandlerMethodReturnValueHandler)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitReturnValueHandlers*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).InitReturnValueHandlers()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).InitReturnValueHandlers()
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingForMethod(System.Reflection.MethodInfo,System.Type)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingForMethod(System.Reflection.MethodInfo,System.Type)
  id: GetMappingForMethod(System.Reflection.MethodInfo,System.Type)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: GetMappingForMethod(MethodInfo, Type)
  nameWithType: AbstractMethodMessageHandler<T>.GetMappingForMethod(MethodInfo, Type)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetMappingForMethod(System.Reflection.MethodInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMappingForMethod
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 203
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract T GetMappingForMethod(MethodInfo method, Type handlerType)
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: handlerType
      type: System.Type
    return:
      type: '{T}'
    content.vb: Protected MustOverride Function GetMappingForMethod(method As MethodInfo, handlerType As Type) As T
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingForMethod*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetMappingForMethod(MethodInfo, Type)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetMappingForMethod(System.Reflection.MethodInfo, System.Type)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDestination(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDestination(Steeltoe.Messaging.IMessage)
  id: GetDestination(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: GetDestination(IMessage)
  nameWithType: AbstractMethodMessageHandler<T>.GetDestination(IMessage)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetDestination(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDestination
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 205
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract string GetDestination(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: System.String
    content.vb: Protected MustOverride Function GetDestination(message As IMessage) As String
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDestination*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetDestination(IMessage)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetDestination(Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDirectLookupDestinations(`0)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDirectLookupDestinations(`0)
  id: GetDirectLookupDestinations(`0)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: GetDirectLookupDestinations(T)
  nameWithType: AbstractMethodMessageHandler<T>.GetDirectLookupDestinations(T)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetDirectLookupDestinations(T)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDirectLookupDestinations
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 207
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract ISet<string> GetDirectLookupDestinations(T mapping)
    parameters:
    - id: mapping
      type: '{T}'
    return:
      type: System.Collections.Generic.ISet{System.String}
    content.vb: Protected MustOverride Function GetDirectLookupDestinations(mapping As T) As ISet(Of String)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDirectLookupDestinations*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetDirectLookupDestinations(T)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetDirectLookupDestinations(T)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMatchingMapping(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMatchingMapping(`0,Steeltoe.Messaging.IMessage)
  id: GetMatchingMapping(`0,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: GetMatchingMapping(T, IMessage)
  nameWithType: AbstractMethodMessageHandler<T>.GetMatchingMapping(T, IMessage)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetMatchingMapping(T, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMatchingMapping
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 209
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract T GetMatchingMapping(T mapping, IMessage message)
    parameters:
    - id: mapping
      type: '{T}'
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: '{T}'
    content.vb: Protected MustOverride Function GetMatchingMapping(mapping As T, message As IMessage) As T
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMatchingMapping*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetMatchingMapping(T, IMessage)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetMatchingMapping(T, Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingComparer(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingComparer(Steeltoe.Messaging.IMessage)
  id: GetMappingComparer(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: GetMappingComparer(IMessage)
  nameWithType: AbstractMethodMessageHandler<T>.GetMappingComparer(IMessage)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetMappingComparer(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMappingComparer
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 211
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract IComparer<T> GetMappingComparer(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: System.Collections.Generic.IComparer{{T}}
    content.vb: Protected MustOverride Function GetMappingComparer(message As IMessage) As IComparer(Of T)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingComparer*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetMappingComparer(IMessage)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetMappingComparer(Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateExceptionHandlerMethodResolverFor(System.Type)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateExceptionHandlerMethodResolverFor(System.Type)
  id: CreateExceptionHandlerMethodResolverFor(System.Type)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: CreateExceptionHandlerMethodResolverFor(Type)
  nameWithType: AbstractMethodMessageHandler<T>.CreateExceptionHandlerMethodResolverFor(Type)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CreateExceptionHandlerMethodResolverFor(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateExceptionHandlerMethodResolverFor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 213
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected abstract AbstractExceptionHandlerMethodResolver CreateExceptionHandlerMethodResolverFor(Type beanType)
    parameters:
    - id: beanType
      type: System.Type
    return:
      type: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
    content.vb: Protected MustOverride Function CreateExceptionHandlerMethodResolverFor(beanType As Type) As AbstractExceptionHandlerMethodResolver
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateExceptionHandlerMethodResolverFor*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CreateExceptionHandlerMethodResolverFor(Type)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CreateExceptionHandlerMethodResolverFor(System.Type)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DetectHandlerMethods(System.Object)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DetectHandlerMethods(System.Object)
  id: DetectHandlerMethods(System.Object)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: DetectHandlerMethods(Object)
  nameWithType: AbstractMethodMessageHandler<T>.DetectHandlerMethods(Object)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.DetectHandlerMethods(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DetectHandlerMethods
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 215
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected void DetectHandlerMethods(object handler)
    parameters:
    - id: handler
      type: System.Object
    content.vb: Protected Sub DetectHandlerMethods(handler As Object)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DetectHandlerMethods*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).DetectHandlerMethods(Object)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).DetectHandlerMethods(System.Object)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetLookupDestination(System.String)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetLookupDestination(System.String)
  id: GetLookupDestination(System.String)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: GetLookupDestination(String)
  nameWithType: AbstractMethodMessageHandler<T>.GetLookupDestination(String)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetLookupDestination(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetLookupDestination
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 249
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual string GetLookupDestination(string destination)
    parameters:
    - id: destination
      type: System.String
    return:
      type: System.String
    content.vb: Protected Overridable Function GetLookupDestination(destination As String) As String
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetLookupDestination*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetLookupDestination(String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetLookupDestination(System.String)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.RegisterHandlerMethod(System.Object,System.Reflection.MethodInfo,`0)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.RegisterHandlerMethod(System.Object,System.Reflection.MethodInfo,`0)
  id: RegisterHandlerMethod(System.Object,System.Reflection.MethodInfo,`0)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: RegisterHandlerMethod(Object, MethodInfo, T)
  nameWithType: AbstractMethodMessageHandler<T>.RegisterHandlerMethod(Object, MethodInfo, T)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.RegisterHandlerMethod(System.Object, System.Reflection.MethodInfo, T)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RegisterHandlerMethod
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 273
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual void RegisterHandlerMethod(object handler, MethodInfo method, T mapping)
    parameters:
    - id: handler
      type: System.Object
    - id: method
      type: System.Reflection.MethodInfo
    - id: mapping
      type: '{T}'
    content.vb: Protected Overridable Sub RegisterHandlerMethod(handler As Object, method As MethodInfo, mapping As T)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.RegisterHandlerMethod*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).RegisterHandlerMethod(Object, MethodInfo, T)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).RegisterHandlerMethod(System.Object, System.Reflection.MethodInfo, T)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateHandlerMethod(System.Object,System.Reflection.MethodInfo)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateHandlerMethod(System.Object,System.Reflection.MethodInfo)
  id: CreateHandlerMethod(System.Object,System.Reflection.MethodInfo)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: CreateHandlerMethod(Object, MethodInfo)
  nameWithType: AbstractMethodMessageHandler<T>.CreateHandlerMethod(Object, MethodInfo)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CreateHandlerMethod(System.Object, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateHandlerMethod
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 307
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual HandlerMethod CreateHandlerMethod(object handler, MethodInfo method)
    parameters:
    - id: handler
      type: System.Object
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: Steeltoe.Messaging.Handler.HandlerMethod
    content.vb: Protected Overridable Function CreateHandlerMethod(handler As Object, method As MethodInfo) As HandlerMethod
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateHandlerMethod*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CreateHandlerMethod(Object, MethodInfo)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CreateHandlerMethod(System.Object, System.Reflection.MethodInfo)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessageInternal(Steeltoe.Messaging.IMessage,System.String)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessageInternal(Steeltoe.Messaging.IMessage,System.String)
  id: HandleMessageInternal(Steeltoe.Messaging.IMessage,System.String)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: HandleMessageInternal(IMessage, String)
  nameWithType: AbstractMethodMessageHandler<T>.HandleMessageInternal(IMessage, String)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleMessageInternal(Steeltoe.Messaging.IMessage, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandleMessageInternal
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 314
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual void HandleMessageInternal(IMessage message, string lookupDestination)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: lookupDestination
      type: System.String
    content.vb: Protected Overridable Sub HandleMessageInternal(message As IMessage, lookupDestination As String)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessageInternal*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleMessageInternal(IMessage, String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleMessageInternal(Steeltoe.Messaging.IMessage, System.String)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMatch(`0,Steeltoe.Messaging.Handler.HandlerMethod,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMatch(`0,Steeltoe.Messaging.Handler.HandlerMethod,System.String,Steeltoe.Messaging.IMessage)
  id: HandleMatch(`0,Steeltoe.Messaging.Handler.HandlerMethod,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: HandleMatch(T, HandlerMethod, String, IMessage)
  nameWithType: AbstractMethodMessageHandler<T>.HandleMatch(T, HandlerMethod, String, IMessage)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleMatch(T, Steeltoe.Messaging.Handler.HandlerMethod, System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandleMatch
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 356
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual void HandleMatch(T mapping, HandlerMethod handlerMethod, string lookupDestination, IMessage message)
    parameters:
    - id: mapping
      type: '{T}'
    - id: handlerMethod
      type: Steeltoe.Messaging.Handler.HandlerMethod
    - id: lookupDestination
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Sub HandleMatch(mapping As T, handlerMethod As HandlerMethod, lookupDestination As String, message As IMessage)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMatch*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleMatch(T, HandlerMethod, String, IMessage)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleMatch(T, Steeltoe.Messaging.Handler.HandlerMethod, System.String, Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ProcessHandlerMethodException(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ProcessHandlerMethodException(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception,Steeltoe.Messaging.IMessage)
  id: ProcessHandlerMethodException(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: ProcessHandlerMethodException(HandlerMethod, Exception, IMessage)
  nameWithType: AbstractMethodMessageHandler<T>.ProcessHandlerMethodException(HandlerMethod, Exception, IMessage)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ProcessHandlerMethodException(Steeltoe.Messaging.Handler.HandlerMethod, System.Exception, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ProcessHandlerMethodException
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 390
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual void ProcessHandlerMethodException(HandlerMethod handlerMethod, Exception exception, IMessage message)
    parameters:
    - id: handlerMethod
      type: Steeltoe.Messaging.Handler.HandlerMethod
    - id: exception
      type: System.Exception
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Sub ProcessHandlerMethodException(handlerMethod As HandlerMethod, exception As Exception, message As IMessage)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ProcessHandlerMethodException*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ProcessHandlerMethodException(HandlerMethod, Exception, IMessage)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ProcessHandlerMethodException(Steeltoe.Messaging.Handler.HandlerMethod, System.Exception, Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetExceptionHandlerMethod(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetExceptionHandlerMethod(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception)
  id: GetExceptionHandlerMethod(Steeltoe.Messaging.Handler.HandlerMethod,System.Exception)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: GetExceptionHandlerMethod(HandlerMethod, Exception)
  nameWithType: AbstractMethodMessageHandler<T>.GetExceptionHandlerMethod(HandlerMethod, Exception)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetExceptionHandlerMethod(Steeltoe.Messaging.Handler.HandlerMethod, System.Exception)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetExceptionHandlerMethod
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 421
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual InvocableHandlerMethod GetExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception)
    parameters:
    - id: handlerMethod
      type: Steeltoe.Messaging.Handler.HandlerMethod
    - id: exception
      type: System.Exception
    return:
      type: Steeltoe.Messaging.Handler.Invocation.InvocableHandlerMethod
    content.vb: Protected Overridable Function GetExceptionHandlerMethod(handlerMethod As HandlerMethod, exception As Exception) As InvocableHandlerMethod
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetExceptionHandlerMethod*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetExceptionHandlerMethod(HandlerMethod, Exception)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetExceptionHandlerMethod(Steeltoe.Messaging.Handler.HandlerMethod, System.Exception)
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleNoMatch(System.Collections.Generic.ICollection{`0},System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleNoMatch(System.Collections.Generic.ICollection{`0},System.String,Steeltoe.Messaging.IMessage)
  id: HandleNoMatch(System.Collections.Generic.ICollection{`0},System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1
  langs:
  - csharp
  - vb
  name: HandleNoMatch(ICollection<T>, String, IMessage)
  nameWithType: AbstractMethodMessageHandler<T>.HandleNoMatch(ICollection<T>, String, IMessage)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleNoMatch(System.Collections.Generic.ICollection<T>, System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandleNoMatch
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractMethodMessageHandler.cs
    startLine: 440
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected virtual Task HandleNoMatch(ICollection<T> ts, string lookupDestination, IMessage message)
    parameters:
    - id: ts
      type: System.Collections.Generic.ICollection{{T}}
    - id: lookupDestination
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function HandleNoMatch(ts As ICollection(Of T), lookupDestination As String, message As IMessage) As Task
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleNoMatch*
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleNoMatch(ICollection(Of T), String, IMessage)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleNoMatch(System.Collections.Generic.ICollection(Of T), System.String, Steeltoe.Messaging.IMessage)
  name.vb: HandleNoMatch(ICollection(Of T), String, IMessage)
references:
- uid: Steeltoe.Messaging.Handler.Invocation
  commentId: N:Steeltoe.Messaging.Handler.Invocation
  name: Steeltoe.Messaging.Handler.Invocation
  nameWithType: Steeltoe.Messaging.Handler.Invocation
  fullName: Steeltoe.Messaging.Handler.Invocation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.IMessageHandler
  commentId: T:Steeltoe.Messaging.IMessageHandler
  parent: Steeltoe.Messaging
  name: IMessageHandler
  nameWithType: IMessageHandler
  fullName: Steeltoe.Messaging.IMessageHandler
- uid: IServiceNameAware
  isExternal: true
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: IServiceNameAware
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.#ctor*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.#ctor
  name: AbstractMethodMessageHandler
  nameWithType: AbstractMethodMessageHandler<T>.AbstractMethodMessageHandler
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.AbstractMethodMessageHandler
  nameWithType.vb: AbstractMethodMessageHandler(Of T).AbstractMethodMessageHandler
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).AbstractMethodMessageHandler
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ServiceName*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ServiceName
  name: ServiceName
  nameWithType: AbstractMethodMessageHandler<T>.ServiceName
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ServiceName
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ServiceName
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ServiceName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DestinationPrefixes*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DestinationPrefixes
  name: DestinationPrefixes
  nameWithType: AbstractMethodMessageHandler<T>.DestinationPrefixes
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.DestinationPrefixes
  nameWithType.vb: AbstractMethodMessageHandler(Of T).DestinationPrefixes
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).DestinationPrefixes
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomArgumentResolvers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomArgumentResolvers
  name: CustomArgumentResolvers
  nameWithType: AbstractMethodMessageHandler<T>.CustomArgumentResolvers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CustomArgumentResolvers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CustomArgumentResolvers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CustomArgumentResolvers
- uid: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver}
  commentId: T:System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IHandlerMethodArgumentResolver>
  nameWithType: IList<IHandlerMethodArgumentResolver>
  fullName: System.Collections.Generic.IList<Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver>
  nameWithType.vb: IList(Of IHandlerMethodArgumentResolver)
  fullName.vb: System.Collections.Generic.IList(Of Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver)
  name.vb: IList(Of IHandlerMethodArgumentResolver)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver
    name: IHandlerMethodArgumentResolver
    nameWithType: IHandlerMethodArgumentResolver
    fullName: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver
    name: IHandlerMethodArgumentResolver
    nameWithType: IHandlerMethodArgumentResolver
    fullName: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodArgumentResolver
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ArgumentResolvers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ArgumentResolvers
  name: ArgumentResolvers
  nameWithType: AbstractMethodMessageHandler<T>.ArgumentResolvers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ArgumentResolvers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ArgumentResolvers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ArgumentResolvers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ReturnValueHandlers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ReturnValueHandlers
  name: ReturnValueHandlers
  nameWithType: AbstractMethodMessageHandler<T>.ReturnValueHandlers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ReturnValueHandlers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ReturnValueHandlers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ReturnValueHandlers
- uid: System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler}
  commentId: T:System.Collections.Generic.IList{Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IHandlerMethodReturnValueHandler>
  nameWithType: IList<IHandlerMethodReturnValueHandler>
  fullName: System.Collections.Generic.IList<Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler>
  nameWithType.vb: IList(Of IHandlerMethodReturnValueHandler)
  fullName.vb: System.Collections.Generic.IList(Of Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler)
  name.vb: IList(Of IHandlerMethodReturnValueHandler)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler
    name: IHandlerMethodReturnValueHandler
    nameWithType: IHandlerMethodReturnValueHandler
    fullName: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler
    name: IHandlerMethodReturnValueHandler
    nameWithType: IHandlerMethodReturnValueHandler
    fullName: Steeltoe.Messaging.Handler.Invocation.IHandlerMethodReturnValueHandler
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomReturnValueHandlers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CustomReturnValueHandlers
  name: CustomReturnValueHandlers
  nameWithType: AbstractMethodMessageHandler<T>.CustomReturnValueHandlers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CustomReturnValueHandlers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CustomReturnValueHandlers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CustomReturnValueHandlers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandlerMethods*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandlerMethods
  name: HandlerMethods
  nameWithType: AbstractMethodMessageHandler<T>.HandlerMethods
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandlerMethods
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandlerMethods
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandlerMethods
- uid: System.Collections.Generic.IDictionary{{T},Steeltoe.Messaging.Handler.HandlerMethod}
  commentId: T:System.Collections.Generic.IDictionary{`0,Steeltoe.Messaging.Handler.HandlerMethod}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<T, HandlerMethod>
  nameWithType: IDictionary<T, HandlerMethod>
  fullName: System.Collections.Generic.IDictionary<T, Steeltoe.Messaging.Handler.HandlerMethod>
  nameWithType.vb: IDictionary(Of T, HandlerMethod)
  fullName.vb: System.Collections.Generic.IDictionary(Of T, Steeltoe.Messaging.Handler.HandlerMethod)
  name.vb: IDictionary(Of T, HandlerMethod)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Handler.HandlerMethod
    name: HandlerMethod
    nameWithType: HandlerMethod
    fullName: Steeltoe.Messaging.Handler.HandlerMethod
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Handler.HandlerMethod
    name: HandlerMethod
    nameWithType: HandlerMethod
    fullName: Steeltoe.Messaging.Handler.HandlerMethod
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessage*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessage
  name: HandleMessage
  nameWithType: AbstractMethodMessageHandler<T>.HandleMessage
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleMessage
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleMessage
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleMessage
- uid: Steeltoe.Messaging.IMessageHandler.HandleMessage(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.IMessageHandler.HandleMessage(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.IMessageHandler
  name: HandleMessage(IMessage)
  nameWithType: IMessageHandler.HandleMessage(IMessage)
  fullName: Steeltoe.Messaging.IMessageHandler.HandleMessage(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessageHandler.HandleMessage(Steeltoe.Messaging.IMessage)
    name: HandleMessage
    nameWithType: IMessageHandler.HandleMessage
    fullName: Steeltoe.Messaging.IMessageHandler.HandleMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.IMessageHandler.HandleMessage(Steeltoe.Messaging.IMessage)
    name: HandleMessage
    nameWithType: IMessageHandler.HandleMessage
    fullName: Steeltoe.Messaging.IMessageHandler.HandleMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ToString*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ToString
  name: ToString
  nameWithType: AbstractMethodMessageHandler<T>.ToString
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ToString
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ToString
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ToString
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodArgumentResolvers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodArgumentResolvers
  name: MethodArgumentResolvers
  nameWithType: AbstractMethodMessageHandler<T>.MethodArgumentResolvers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MethodArgumentResolvers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MethodArgumentResolvers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MethodArgumentResolvers
- uid: Steeltoe.Messaging.Handler.Invocation.HandlerMethodArgumentResolverComposite
  commentId: T:Steeltoe.Messaging.Handler.Invocation.HandlerMethodArgumentResolverComposite
  parent: Steeltoe.Messaging.Handler.Invocation
  name: HandlerMethodArgumentResolverComposite
  nameWithType: HandlerMethodArgumentResolverComposite
  fullName: Steeltoe.Messaging.Handler.Invocation.HandlerMethodArgumentResolverComposite
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodReturnValueHandlers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.MethodReturnValueHandlers
  name: MethodReturnValueHandlers
  nameWithType: AbstractMethodMessageHandler<T>.MethodReturnValueHandlers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.MethodReturnValueHandlers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).MethodReturnValueHandlers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).MethodReturnValueHandlers
- uid: Steeltoe.Messaging.Handler.Invocation.HandlerMethodReturnValueHandlerComposite
  commentId: T:Steeltoe.Messaging.Handler.Invocation.HandlerMethodReturnValueHandlerComposite
  parent: Steeltoe.Messaging.Handler.Invocation
  name: HandlerMethodReturnValueHandlerComposite
  nameWithType: HandlerMethodReturnValueHandlerComposite
  fullName: Steeltoe.Messaging.Handler.Invocation.HandlerMethodReturnValueHandlerComposite
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitArgumentResolvers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitArgumentResolvers
  name: InitArgumentResolvers
  nameWithType: AbstractMethodMessageHandler<T>.InitArgumentResolvers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.InitArgumentResolvers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).InitArgumentResolvers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).InitArgumentResolvers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitReturnValueHandlers*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.InitReturnValueHandlers
  name: InitReturnValueHandlers
  nameWithType: AbstractMethodMessageHandler<T>.InitReturnValueHandlers
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.InitReturnValueHandlers
  nameWithType.vb: AbstractMethodMessageHandler(Of T).InitReturnValueHandlers
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).InitReturnValueHandlers
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingForMethod*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingForMethod
  name: GetMappingForMethod
  nameWithType: AbstractMethodMessageHandler<T>.GetMappingForMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetMappingForMethod
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetMappingForMethod
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetMappingForMethod
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDestination*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDestination
  name: GetDestination
  nameWithType: AbstractMethodMessageHandler<T>.GetDestination
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetDestination
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetDestination
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetDestination
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDirectLookupDestinations*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetDirectLookupDestinations
  name: GetDirectLookupDestinations
  nameWithType: AbstractMethodMessageHandler<T>.GetDirectLookupDestinations
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetDirectLookupDestinations
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetDirectLookupDestinations
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetDirectLookupDestinations
- uid: System.Collections.Generic.ISet{System.String}
  commentId: T:System.Collections.Generic.ISet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<String>
  nameWithType: ISet<String>
  fullName: System.Collections.Generic.ISet<System.String>
  nameWithType.vb: ISet(Of String)
  fullName.vb: System.Collections.Generic.ISet(Of System.String)
  name.vb: ISet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMatchingMapping*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMatchingMapping
  name: GetMatchingMapping
  nameWithType: AbstractMethodMessageHandler<T>.GetMatchingMapping
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetMatchingMapping
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetMatchingMapping
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetMatchingMapping
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingComparer*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetMappingComparer
  name: GetMappingComparer
  nameWithType: AbstractMethodMessageHandler<T>.GetMappingComparer
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetMappingComparer
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetMappingComparer
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetMappingComparer
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateExceptionHandlerMethodResolverFor*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateExceptionHandlerMethodResolverFor
  name: CreateExceptionHandlerMethodResolverFor
  nameWithType: AbstractMethodMessageHandler<T>.CreateExceptionHandlerMethodResolverFor
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CreateExceptionHandlerMethodResolverFor
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CreateExceptionHandlerMethodResolverFor
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CreateExceptionHandlerMethodResolverFor
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  commentId: T:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  parent: Steeltoe.Messaging.Handler.Invocation
  name: AbstractExceptionHandlerMethodResolver
  nameWithType: AbstractExceptionHandlerMethodResolver
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DetectHandlerMethods*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.DetectHandlerMethods
  name: DetectHandlerMethods
  nameWithType: AbstractMethodMessageHandler<T>.DetectHandlerMethods
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.DetectHandlerMethods
  nameWithType.vb: AbstractMethodMessageHandler(Of T).DetectHandlerMethods
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).DetectHandlerMethods
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetLookupDestination*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetLookupDestination
  name: GetLookupDestination
  nameWithType: AbstractMethodMessageHandler<T>.GetLookupDestination
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetLookupDestination
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetLookupDestination
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetLookupDestination
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.RegisterHandlerMethod*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.RegisterHandlerMethod
  name: RegisterHandlerMethod
  nameWithType: AbstractMethodMessageHandler<T>.RegisterHandlerMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.RegisterHandlerMethod
  nameWithType.vb: AbstractMethodMessageHandler(Of T).RegisterHandlerMethod
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).RegisterHandlerMethod
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateHandlerMethod*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.CreateHandlerMethod
  name: CreateHandlerMethod
  nameWithType: AbstractMethodMessageHandler<T>.CreateHandlerMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.CreateHandlerMethod
  nameWithType.vb: AbstractMethodMessageHandler(Of T).CreateHandlerMethod
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).CreateHandlerMethod
- uid: Steeltoe.Messaging.Handler.HandlerMethod
  commentId: T:Steeltoe.Messaging.Handler.HandlerMethod
  parent: Steeltoe.Messaging.Handler
  name: HandlerMethod
  nameWithType: HandlerMethod
  fullName: Steeltoe.Messaging.Handler.HandlerMethod
- uid: Steeltoe.Messaging.Handler
  commentId: N:Steeltoe.Messaging.Handler
  name: Steeltoe.Messaging.Handler
  nameWithType: Steeltoe.Messaging.Handler
  fullName: Steeltoe.Messaging.Handler
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessageInternal*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMessageInternal
  name: HandleMessageInternal
  nameWithType: AbstractMethodMessageHandler<T>.HandleMessageInternal
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleMessageInternal
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleMessageInternal
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleMessageInternal
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMatch*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleMatch
  name: HandleMatch
  nameWithType: AbstractMethodMessageHandler<T>.HandleMatch
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleMatch
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleMatch
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleMatch
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ProcessHandlerMethodException*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.ProcessHandlerMethodException
  name: ProcessHandlerMethodException
  nameWithType: AbstractMethodMessageHandler<T>.ProcessHandlerMethodException
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.ProcessHandlerMethodException
  nameWithType.vb: AbstractMethodMessageHandler(Of T).ProcessHandlerMethodException
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).ProcessHandlerMethodException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetExceptionHandlerMethod*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.GetExceptionHandlerMethod
  name: GetExceptionHandlerMethod
  nameWithType: AbstractMethodMessageHandler<T>.GetExceptionHandlerMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.GetExceptionHandlerMethod
  nameWithType.vb: AbstractMethodMessageHandler(Of T).GetExceptionHandlerMethod
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).GetExceptionHandlerMethod
- uid: Steeltoe.Messaging.Handler.Invocation.InvocableHandlerMethod
  commentId: T:Steeltoe.Messaging.Handler.Invocation.InvocableHandlerMethod
  parent: Steeltoe.Messaging.Handler.Invocation
  name: InvocableHandlerMethod
  nameWithType: InvocableHandlerMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.InvocableHandlerMethod
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleNoMatch*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler`1.HandleNoMatch
  name: HandleNoMatch
  nameWithType: AbstractMethodMessageHandler<T>.HandleNoMatch
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler<T>.HandleNoMatch
  nameWithType.vb: AbstractMethodMessageHandler(Of T).HandleNoMatch
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractMethodMessageHandler(Of T).HandleNoMatch
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
