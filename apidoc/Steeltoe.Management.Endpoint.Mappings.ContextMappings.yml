### YamlMime:ManagedReference
items:
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings
  commentId: T:Steeltoe.Management.Endpoint.Mappings.ContextMappings
  id: ContextMappings
  parent: Steeltoe.Management.Endpoint.Mappings
  children:
  - Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor
  - Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}},System.String)
  - Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings
  - Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId
  langs:
  - csharp
  - vb
  name: ContextMappings
  nameWithType: ContextMappings
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings
  type: Class
  source:
    remote:
      path: src/Management/src/EndpointBase/Mappings/ContextMappings.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ContextMappings
    path: ../Steeltoe/src/Management/src/EndpointBase/Mappings/ContextMappings.cs
    startLine: 9
  assemblies:
  - Steeltoe.Management.EndpointBase
  namespace: Steeltoe.Management.Endpoint.Mappings
  syntax:
    content: public class ContextMappings
    content.vb: Public Class ContextMappings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor
  commentId: M:Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor
  id: '#ctor'
  parent: Steeltoe.Management.Endpoint.Mappings.ContextMappings
  langs:
  - csharp
  - vb
  name: ContextMappings()
  nameWithType: ContextMappings.ContextMappings()
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ContextMappings()
  type: Constructor
  source:
    remote:
      path: src/Management/src/EndpointBase/Mappings/ContextMappings.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Management/src/EndpointBase/Mappings/ContextMappings.cs
    startLine: 11
  assemblies:
  - Steeltoe.Management.EndpointBase
  namespace: Steeltoe.Management.Endpoint.Mappings
  syntax:
    content: public ContextMappings()
    content.vb: Public Sub New
  overload: Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}},System.String)
  commentId: M:Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}},System.String)
  id: '#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}},System.String)'
  parent: Steeltoe.Management.Endpoint.Mappings.ContextMappings
  langs:
  - csharp
  - vb
  name: ContextMappings(IDictionary<String, IList<MappingDescription>>, String)
  nameWithType: ContextMappings.ContextMappings(IDictionary<String, IList<MappingDescription>>, String)
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ContextMappings(System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<Steeltoe.Management.Endpoint.Mappings.MappingDescription>>, System.String)
  type: Constructor
  source:
    remote:
      path: src/Management/src/EndpointBase/Mappings/ContextMappings.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Management/src/EndpointBase/Mappings/ContextMappings.cs
    startLine: 25
  assemblies:
  - Steeltoe.Management.EndpointBase
  namespace: Steeltoe.Management.Endpoint.Mappings
  syntax:
    content: public ContextMappings(IDictionary<string, IList<MappingDescription>> mappingDict, string parentId = null)
    parameters:
    - id: mappingDict
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}}
    - id: parentId
      type: System.String
    content.vb: Public Sub New(mappingDict As IDictionary(Of String, IList(Of MappingDescription)), parentId As String = Nothing)
  overload: Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor*
  nameWithType.vb: ContextMappings.ContextMappings(IDictionary(Of String, IList(Of MappingDescription)), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ContextMappings(System.Collections.Generic.IDictionary(Of System.String, System.Collections.Generic.IList(Of Steeltoe.Management.Endpoint.Mappings.MappingDescription)), System.String)
  name.vb: ContextMappings(IDictionary(Of String, IList(Of MappingDescription)), String)
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId
  commentId: P:Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId
  id: ParentId
  parent: Steeltoe.Management.Endpoint.Mappings.ContextMappings
  langs:
  - csharp
  - vb
  name: ParentId
  nameWithType: ContextMappings.ParentId
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId
  type: Property
  source:
    remote:
      path: src/Management/src/EndpointBase/Mappings/ContextMappings.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ParentId
    path: ../Steeltoe/src/Management/src/EndpointBase/Mappings/ContextMappings.cs
    startLine: 48
  assemblies:
  - Steeltoe.Management.EndpointBase
  namespace: Steeltoe.Management.Endpoint.Mappings
  syntax:
    content: >-
      [JsonPropertyName("parentId")]

      public string ParentId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonPropertyName("parentId")>

      Public ReadOnly Property ParentId As String
  overload: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: parentId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings
  commentId: P:Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings
  id: Mappings
  parent: Steeltoe.Management.Endpoint.Mappings.ContextMappings
  langs:
  - csharp
  - vb
  name: Mappings
  nameWithType: ContextMappings.Mappings
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings
  type: Property
  source:
    remote:
      path: src/Management/src/EndpointBase/Mappings/ContextMappings.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Mappings
    path: ../Steeltoe/src/Management/src/EndpointBase/Mappings/ContextMappings.cs
    startLine: 51
  assemblies:
  - Steeltoe.Management.EndpointBase
  namespace: Steeltoe.Management.Endpoint.Mappings
  syntax:
    content: >-
      [JsonPropertyName("mappings")]

      public IDictionary<string, IDictionary<string, IList<MappingDescription>>> Mappings { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}}}
    content.vb: >-
      <JsonPropertyName("mappings")>

      Public ReadOnly Property Mappings As IDictionary(Of String, IDictionary(Of String, IList(Of MappingDescription)))
  overload: Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings*
  attributes:
  - type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    ctor: System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: mappings
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Steeltoe.Management.Endpoint.Mappings
  commentId: N:Steeltoe.Management.Endpoint.Mappings
  name: Steeltoe.Management.Endpoint.Mappings
  nameWithType: Steeltoe.Management.Endpoint.Mappings
  fullName: Steeltoe.Management.Endpoint.Mappings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor*
  commentId: Overload:Steeltoe.Management.Endpoint.Mappings.ContextMappings.#ctor
  name: ContextMappings
  nameWithType: ContextMappings.ContextMappings
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ContextMappings
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, IList<MappingDescription>>
  nameWithType: IDictionary<String, IList<MappingDescription>>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<Steeltoe.Management.Endpoint.Mappings.MappingDescription>>
  nameWithType.vb: IDictionary(Of String, IList(Of MappingDescription))
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Collections.Generic.IList(Of Steeltoe.Management.Endpoint.Mappings.MappingDescription))
  name.vb: IDictionary(Of String, IList(Of MappingDescription))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Management.Endpoint.Mappings.MappingDescription
    name: MappingDescription
    nameWithType: MappingDescription
    fullName: Steeltoe.Management.Endpoint.Mappings.MappingDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Management.Endpoint.Mappings.MappingDescription
    name: MappingDescription
    nameWithType: MappingDescription
    fullName: Steeltoe.Management.Endpoint.Mappings.MappingDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId*
  commentId: Overload:Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId
  name: ParentId
  nameWithType: ContextMappings.ParentId
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings.ParentId
- uid: Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings*
  commentId: Overload:Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings
  name: Mappings
  nameWithType: ContextMappings.Mappings
  fullName: Steeltoe.Management.Endpoint.Mappings.ContextMappings.Mappings
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}}}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Steeltoe.Management.Endpoint.Mappings.MappingDescription}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, IDictionary<String, IList<MappingDescription>>>
  nameWithType: IDictionary<String, IDictionary<String, IList<MappingDescription>>>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<Steeltoe.Management.Endpoint.Mappings.MappingDescription>>>
  nameWithType.vb: IDictionary(Of String, IDictionary(Of String, IList(Of MappingDescription)))
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Collections.Generic.IDictionary(Of System.String, System.Collections.Generic.IList(Of Steeltoe.Management.Endpoint.Mappings.MappingDescription)))
  name.vb: IDictionary(Of String, IDictionary(Of String, IList(Of MappingDescription)))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Management.Endpoint.Mappings.MappingDescription
    name: MappingDescription
    nameWithType: MappingDescription
    fullName: Steeltoe.Management.Endpoint.Mappings.MappingDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Management.Endpoint.Mappings.MappingDescription
    name: MappingDescription
    nameWithType: MappingDescription
    fullName: Steeltoe.Management.Endpoint.Mappings.MappingDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
