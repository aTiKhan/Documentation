### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  id: AbstractRabbitListenerContainerFactory`1
  parent: Steeltoe.Messaging.RabbitMQ.Config
  children:
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILoggerFactory)
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1._logger
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1._loggerFactory
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AcknowledgeMode
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AfterReceivePostProcessors
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ApplicationContext
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AutoStartup
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchingStrategy
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchListener
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BeforeSendReplyPostProcessors
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConnectionFactory
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConsumerTagStrategy
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ContainerCustomizer
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateContainerInstance
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DeBatchingEnabled
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DefaultRequeueRejected
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ErrorHandler
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.FailedDeclarationRetryInterval
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IdleEventInterval
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.InitializeContainer(`0,Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IsChannelTransacted
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MessageConverter
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MismatchedQueuesFatal
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MissingQueuesFatal
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Options
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Phase
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PossibleAuthenticationFailureFatal
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PrefetchCount
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryBackOff
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryInterval
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ReplyRecoveryCallback
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RetryTemplate
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ServiceName
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetBeforeSendReplyPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Steeltoe#Messaging#RabbitMQ#Listener#IRabbitListenerContainerFactory#CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  - Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.TransactionManager
  langs:
  - csharp
  - vb
  name: AbstractRabbitListenerContainerFactory<C>
  nameWithType: AbstractRabbitListenerContainerFactory<C>
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractRabbitListenerContainerFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 22
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: 'public abstract class AbstractRabbitListenerContainerFactory<C> : IRabbitListenerContainerFactory<C>, IRabbitListenerContainerFactory, IServiceNameAware where C : AbstractMessageListenerContainer'
    typeParameters:
    - id: C
    content.vb: >-
      Public MustInherit Class AbstractRabbitListenerContainerFactory(Of C As AbstractMessageListenerContainer)

          Implements IRabbitListenerContainerFactory(Of C), IRabbitListenerContainerFactory, IServiceNameAware
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory
  implements:
  - Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory{{C}}
  - Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  - Steeltoe.Common.Services.IServiceNameAware
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C)
  name.vb: AbstractRabbitListenerContainerFactory(Of C)
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1._logger
  commentId: F:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1._logger
  id: _logger
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: _logger
  nameWithType: AbstractRabbitListenerContainerFactory<C>._logger
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>._logger
  type: Field
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: _logger
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 25
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected readonly ILogger _logger
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly _logger As ILogger
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C)._logger
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C)._logger
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1._loggerFactory
  commentId: F:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1._loggerFactory
  id: _loggerFactory
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: _loggerFactory
  nameWithType: AbstractRabbitListenerContainerFactory<C>._loggerFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>._loggerFactory
  type: Field
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: _loggerFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 26
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected readonly ILoggerFactory _loggerFactory
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
    content.vb: Protected ReadOnly _loggerFactory As ILoggerFactory
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C)._loggerFactory
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C)._loggerFactory
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILoggerFactory)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILoggerFactory)
  id: '#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILoggerFactory)'
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: AbstractRabbitListenerContainerFactory(IApplicationContext, ILoggerFactory)
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(IApplicationContext, ILoggerFactory)
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext, Microsoft.Extensions.Logging.ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 31
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected AbstractRabbitListenerContainerFactory(IApplicationContext applicationContext, ILoggerFactory loggerFactory = null)
    parameters:
    - id: applicationContext
      type: Steeltoe.Common.Contexts.IApplicationContext
    - id: loggerFactory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    content.vb: Protected Sub New(applicationContext As IApplicationContext, loggerFactory As ILoggerFactory = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory(IApplicationContext, ILoggerFactory)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext, Microsoft.Extensions.Logging.ILoggerFactory)
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)
  id: '#ctor(Steeltoe.Common.Contexts.IApplicationContext,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)'
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: AbstractRabbitListenerContainerFactory(IApplicationContext, IConnectionFactory, ILoggerFactory)
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(IApplicationContext, IConnectionFactory, ILoggerFactory)
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 37
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected AbstractRabbitListenerContainerFactory(IApplicationContext applicationContext, IConnectionFactory connectionFactory, ILoggerFactory loggerFactory = null)
    parameters:
    - id: applicationContext
      type: Steeltoe.Common.Contexts.IApplicationContext
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    - id: loggerFactory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    content.vb: Protected Sub New(applicationContext As IApplicationContext, connectionFactory As IConnectionFactory, loggerFactory As ILoggerFactory = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory(IApplicationContext, IConnectionFactory, ILoggerFactory)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILoggerFactory)
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)
  id: '#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILoggerFactory)'
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: AbstractRabbitListenerContainerFactory(IApplicationContext, IOptionsMonitor<RabbitOptions>, IConnectionFactory, ILoggerFactory)
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(IApplicationContext, IOptionsMonitor<RabbitOptions>, IConnectionFactory, ILoggerFactory)
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext, Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions>, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 44
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected AbstractRabbitListenerContainerFactory(IApplicationContext applicationContext, IOptionsMonitor<RabbitOptions> optionsMonitor, IConnectionFactory connectionFactory, ILoggerFactory loggerFactory = null)
    parameters:
    - id: applicationContext
      type: Steeltoe.Common.Contexts.IApplicationContext
    - id: optionsMonitor
      type: Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions}
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    - id: loggerFactory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    content.vb: Protected Sub New(applicationContext As IApplicationContext, optionsMonitor As IOptionsMonitor(Of RabbitOptions), connectionFactory As IConnectionFactory, loggerFactory As ILoggerFactory = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory(IApplicationContext, IOptionsMonitor(Of RabbitOptions), IConnectionFactory, ILoggerFactory)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext, Microsoft.Extensions.Options.IOptionsMonitor(Of Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions), Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILoggerFactory)
  name.vb: AbstractRabbitListenerContainerFactory(IApplicationContext, IOptionsMonitor(Of RabbitOptions), IConnectionFactory, ILoggerFactory)
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ApplicationContext
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ApplicationContext
  id: ApplicationContext
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: ApplicationContext
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ApplicationContext
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ApplicationContext
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ApplicationContext
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 52
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IApplicationContext ApplicationContext { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Contexts.IApplicationContext
    content.vb: Public Property ApplicationContext As IApplicationContext
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ApplicationContext*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ApplicationContext
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ApplicationContext
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConnectionFactory
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConnectionFactory
  id: ConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: ConnectionFactory
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConnectionFactory
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 54
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IConnectionFactory ConnectionFactory { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    content.vb: Public Property ConnectionFactory As IConnectionFactory
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConnectionFactory*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ConnectionFactory
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ErrorHandler
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ErrorHandler
  id: ErrorHandler
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: ErrorHandler
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ErrorHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ErrorHandler
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ErrorHandler
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 56
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IErrorHandler ErrorHandler { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Util.IErrorHandler
    content.vb: Public Property ErrorHandler As IErrorHandler
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ErrorHandler*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ErrorHandler
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ErrorHandler
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MessageConverter
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MessageConverter
  id: MessageConverter
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: MessageConverter
  nameWithType: AbstractRabbitListenerContainerFactory<C>.MessageConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MessageConverter
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 58
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public ISmartMessageConverter MessageConverter { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    content.vb: Public Property MessageConverter As ISmartMessageConverter
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MessageConverter*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).MessageConverter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).MessageConverter
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AcknowledgeMode
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AcknowledgeMode
  id: AcknowledgeMode
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: AcknowledgeMode
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AcknowledgeMode
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AcknowledgeMode
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AcknowledgeMode
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 77
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public AcknowledgeMode? AcknowledgeMode { get; set; }
    parameters: []
    return:
      type: System.Nullable{Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode}
    content.vb: Public Property AcknowledgeMode As AcknowledgeMode?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AcknowledgeMode*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AcknowledgeMode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AcknowledgeMode
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IsChannelTransacted
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IsChannelTransacted
  id: IsChannelTransacted
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: IsChannelTransacted
  nameWithType: AbstractRabbitListenerContainerFactory<C>.IsChannelTransacted
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IsChannelTransacted
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsChannelTransacted
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 79
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool? IsChannelTransacted { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property IsChannelTransacted As Boolean?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IsChannelTransacted*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).IsChannelTransacted
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).IsChannelTransacted
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.TransactionManager
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.TransactionManager
  id: TransactionManager
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: TransactionManager
  nameWithType: AbstractRabbitListenerContainerFactory<C>.TransactionManager
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.TransactionManager
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: TransactionManager
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 81
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IPlatformTransactionManager TransactionManager { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Transaction.IPlatformTransactionManager
    content.vb: Public Property TransactionManager As IPlatformTransactionManager
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.TransactionManager*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).TransactionManager
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).TransactionManager
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PrefetchCount
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PrefetchCount
  id: PrefetchCount
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: AbstractRabbitListenerContainerFactory<C>.PrefetchCount
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PrefetchCount
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: PrefetchCount
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 83
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public int? PrefetchCount { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property PrefetchCount As Integer?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PrefetchCount*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).PrefetchCount
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).PrefetchCount
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DefaultRequeueRejected
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DefaultRequeueRejected
  id: DefaultRequeueRejected
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: DefaultRequeueRejected
  nameWithType: AbstractRabbitListenerContainerFactory<C>.DefaultRequeueRejected
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DefaultRequeueRejected
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DefaultRequeueRejected
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 85
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool? DefaultRequeueRejected { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property DefaultRequeueRejected As Boolean?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DefaultRequeueRejected*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).DefaultRequeueRejected
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).DefaultRequeueRejected
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryInterval
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryInterval
  id: RecoveryInterval
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: RecoveryInterval
  nameWithType: AbstractRabbitListenerContainerFactory<C>.RecoveryInterval
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryInterval
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RecoveryInterval
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 87
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public int? RecoveryInterval { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property RecoveryInterval As Integer?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryInterval*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).RecoveryInterval
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).RecoveryInterval
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryBackOff
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryBackOff
  id: RecoveryBackOff
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: RecoveryBackOff
  nameWithType: AbstractRabbitListenerContainerFactory<C>.RecoveryBackOff
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryBackOff
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RecoveryBackOff
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 89
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IBackOff RecoveryBackOff { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Util.IBackOff
    content.vb: Public Property RecoveryBackOff As IBackOff
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryBackOff*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).RecoveryBackOff
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).RecoveryBackOff
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MissingQueuesFatal
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MissingQueuesFatal
  id: MissingQueuesFatal
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: MissingQueuesFatal
  nameWithType: AbstractRabbitListenerContainerFactory<C>.MissingQueuesFatal
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MissingQueuesFatal
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MissingQueuesFatal
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 91
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool? MissingQueuesFatal { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property MissingQueuesFatal As Boolean?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MissingQueuesFatal*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).MissingQueuesFatal
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).MissingQueuesFatal
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MismatchedQueuesFatal
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MismatchedQueuesFatal
  id: MismatchedQueuesFatal
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: MismatchedQueuesFatal
  nameWithType: AbstractRabbitListenerContainerFactory<C>.MismatchedQueuesFatal
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MismatchedQueuesFatal
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MismatchedQueuesFatal
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 93
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool? MismatchedQueuesFatal { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property MismatchedQueuesFatal As Boolean?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MismatchedQueuesFatal*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).MismatchedQueuesFatal
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).MismatchedQueuesFatal
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConsumerTagStrategy
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConsumerTagStrategy
  id: ConsumerTagStrategy
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: ConsumerTagStrategy
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ConsumerTagStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConsumerTagStrategy
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConsumerTagStrategy
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 95
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IConsumerTagStrategy ConsumerTagStrategy { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
    content.vb: Public Property ConsumerTagStrategy As IConsumerTagStrategy
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConsumerTagStrategy*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ConsumerTagStrategy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ConsumerTagStrategy
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IdleEventInterval
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IdleEventInterval
  id: IdleEventInterval
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: IdleEventInterval
  nameWithType: AbstractRabbitListenerContainerFactory<C>.IdleEventInterval
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IdleEventInterval
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IdleEventInterval
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 97
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public int? IdleEventInterval { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property IdleEventInterval As Integer?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IdleEventInterval*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).IdleEventInterval
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).IdleEventInterval
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.FailedDeclarationRetryInterval
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.FailedDeclarationRetryInterval
  id: FailedDeclarationRetryInterval
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: FailedDeclarationRetryInterval
  nameWithType: AbstractRabbitListenerContainerFactory<C>.FailedDeclarationRetryInterval
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.FailedDeclarationRetryInterval
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FailedDeclarationRetryInterval
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 99
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public int? FailedDeclarationRetryInterval { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property FailedDeclarationRetryInterval As Integer?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.FailedDeclarationRetryInterval*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).FailedDeclarationRetryInterval
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).FailedDeclarationRetryInterval
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AutoStartup
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AutoStartup
  id: AutoStartup
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: AutoStartup
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AutoStartup
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AutoStartup
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AutoStartup
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 101
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool? AutoStartup { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property AutoStartup As Boolean?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AutoStartup*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AutoStartup
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AutoStartup
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Phase
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Phase
  id: Phase
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: Phase
  nameWithType: AbstractRabbitListenerContainerFactory<C>.Phase
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Phase
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Phase
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 103
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public int Phase { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Phase As Integer
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Phase*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).Phase
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).Phase
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AfterReceivePostProcessors
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AfterReceivePostProcessors
  id: AfterReceivePostProcessors
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: AfterReceivePostProcessors
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AfterReceivePostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AfterReceivePostProcessors
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AfterReceivePostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 105
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public List<IMessagePostProcessor> AfterReceivePostProcessors { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
    content.vb: Public Property AfterReceivePostProcessors As List(Of IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AfterReceivePostProcessors*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AfterReceivePostProcessors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AfterReceivePostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BeforeSendReplyPostProcessors
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BeforeSendReplyPostProcessors
  id: BeforeSendReplyPostProcessors
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: BeforeSendReplyPostProcessors
  nameWithType: AbstractRabbitListenerContainerFactory<C>.BeforeSendReplyPostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BeforeSendReplyPostProcessors
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: BeforeSendReplyPostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 107
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public List<IMessagePostProcessor> BeforeSendReplyPostProcessors { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
    content.vb: Public Property BeforeSendReplyPostProcessors As List(Of IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BeforeSendReplyPostProcessors*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).BeforeSendReplyPostProcessors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).BeforeSendReplyPostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RetryTemplate
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RetryTemplate
  id: RetryTemplate
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: RetryTemplate
  nameWithType: AbstractRabbitListenerContainerFactory<C>.RetryTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RetryTemplate
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RetryTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 109
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public RetryTemplate RetryTemplate { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Retry.RetryTemplate
    content.vb: Public Property RetryTemplate As RetryTemplate
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RetryTemplate*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).RetryTemplate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).RetryTemplate
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ReplyRecoveryCallback
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ReplyRecoveryCallback
  id: ReplyRecoveryCallback
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: ReplyRecoveryCallback
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ReplyRecoveryCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ReplyRecoveryCallback
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReplyRecoveryCallback
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 111
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IRecoveryCallback ReplyRecoveryCallback { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Retry.IRecoveryCallback
    content.vb: Public Property ReplyRecoveryCallback As IRecoveryCallback
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ReplyRecoveryCallback*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ReplyRecoveryCallback
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ReplyRecoveryCallback
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ContainerCustomizer
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ContainerCustomizer
  id: ContainerCustomizer
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: ContainerCustomizer
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ContainerCustomizer
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ContainerCustomizer
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ContainerCustomizer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 113
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public Action<C> ContainerCustomizer { get; set; }
    parameters: []
    return:
      type: System.Action{{C}}
    content.vb: Public Property ContainerCustomizer As Action(Of C)
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ContainerCustomizer*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ContainerCustomizer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ContainerCustomizer
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchListener
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchListener
  id: BatchListener
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: BatchListener
  nameWithType: AbstractRabbitListenerContainerFactory<C>.BatchListener
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchListener
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: BatchListener
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 115
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool BatchListener { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property BatchListener As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchListener*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).BatchListener
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).BatchListener
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchingStrategy
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchingStrategy
  id: BatchingStrategy
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: BatchingStrategy
  nameWithType: AbstractRabbitListenerContainerFactory<C>.BatchingStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchingStrategy
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: BatchingStrategy
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 117
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IBatchingStrategy BatchingStrategy { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
    content.vb: Public Property BatchingStrategy As IBatchingStrategy
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchingStrategy*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).BatchingStrategy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).BatchingStrategy
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DeBatchingEnabled
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DeBatchingEnabled
  id: DeBatchingEnabled
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: DeBatchingEnabled
  nameWithType: AbstractRabbitListenerContainerFactory<C>.DeBatchingEnabled
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DeBatchingEnabled
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DeBatchingEnabled
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 119
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool? DeBatchingEnabled { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property DeBatchingEnabled As Boolean?
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DeBatchingEnabled*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).DeBatchingEnabled
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).DeBatchingEnabled
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ServiceName
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ServiceName
  id: ServiceName
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ServiceName
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceName
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 121
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public virtual string ServiceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property ServiceName As String
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ServiceName*
  implements:
  - Steeltoe.Common.Services.IServiceNameAware.ServiceName
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ServiceName
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ServiceName
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PossibleAuthenticationFailureFatal
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PossibleAuthenticationFailureFatal
  id: PossibleAuthenticationFailureFatal
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: PossibleAuthenticationFailureFatal
  nameWithType: AbstractRabbitListenerContainerFactory<C>.PossibleAuthenticationFailureFatal
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PossibleAuthenticationFailureFatal
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: PossibleAuthenticationFailureFatal
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 123
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public bool PossibleAuthenticationFailureFatal { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PossibleAuthenticationFailureFatal As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PossibleAuthenticationFailureFatal*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).PossibleAuthenticationFailureFatal
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).PossibleAuthenticationFailureFatal
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Options
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Options
  id: Options
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: AbstractRabbitListenerContainerFactory<C>.Options
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Options
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Options
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 125
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected RabbitOptions Options { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    content.vb: Protected ReadOnly Property Options As RabbitOptions
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Options*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).Options
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).Options
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  id: SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: SetAfterReceivePostProcessors(IMessagePostProcessor[])
  nameWithType: AbstractRabbitListenerContainerFactory<C>.SetAfterReceivePostProcessors(IMessagePostProcessor[])
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetAfterReceivePostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 138
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public void SetAfterReceivePostProcessors(params IMessagePostProcessor[] postProcessors)
    parameters:
    - id: postProcessors
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
    content.vb: Public Sub SetAfterReceivePostProcessors(ParamArray postProcessors As IMessagePostProcessor())
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetAfterReceivePostProcessors*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).SetAfterReceivePostProcessors(IMessagePostProcessor())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor())
  name.vb: SetAfterReceivePostProcessors(IMessagePostProcessor())
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetBeforeSendReplyPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetBeforeSendReplyPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  id: SetBeforeSendReplyPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: SetBeforeSendReplyPostProcessors(IMessagePostProcessor[])
  nameWithType: AbstractRabbitListenerContainerFactory<C>.SetBeforeSendReplyPostProcessors(IMessagePostProcessor[])
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.SetBeforeSendReplyPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetBeforeSendReplyPostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 156
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public void SetBeforeSendReplyPostProcessors(params IMessagePostProcessor[] postProcessors)
    parameters:
    - id: postProcessors
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
    content.vb: Public Sub SetBeforeSendReplyPostProcessors(ParamArray postProcessors As IMessagePostProcessor())
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetBeforeSendReplyPostProcessors*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).SetBeforeSendReplyPostProcessors(IMessagePostProcessor())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).SetBeforeSendReplyPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor())
  name.vb: SetBeforeSendReplyPostProcessors(IMessagePostProcessor())
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  id: CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: CreateListenerContainer(IRabbitListenerEndpoint)
  nameWithType: AbstractRabbitListenerContainerFactory<C>.CreateListenerContainer(IRabbitListenerEndpoint)
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateListenerContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 174
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public C CreateListenerContainer(IRabbitListenerEndpoint endpoint)
    parameters:
    - id: endpoint
      type: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    return:
      type: '{C}'
    content.vb: Public Function CreateListenerContainer(endpoint As IRabbitListenerEndpoint) As C
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateListenerContainer*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory{{C}}.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).CreateListenerContainer(IRabbitListenerEndpoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Steeltoe#Messaging#RabbitMQ#Listener#IRabbitListenerContainerFactory#CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Steeltoe#Messaging#RabbitMQ#Listener#IRabbitListenerContainerFactory#CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  id: Steeltoe#Messaging#RabbitMQ#Listener#IRabbitListenerContainerFactory#CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  isEii: true
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: IRabbitListenerContainerFactory.CreateListenerContainer(IRabbitListenerEndpoint)
  nameWithType: AbstractRabbitListenerContainerFactory<C>.IRabbitListenerContainerFactory.CreateListenerContainer(IRabbitListenerEndpoint)
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 326
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: IMessageListenerContainer IRabbitListenerContainerFactory.CreateListenerContainer(IRabbitListenerEndpoint endpoint)
    parameters:
    - id: endpoint
      type: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    return:
      type: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
    content.vb: Function Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(endpoint As IRabbitListenerEndpoint) As IMessageListenerContainer Implements IRabbitListenerContainerFactory.CreateListenerContainer
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Steeltoe#Messaging#RabbitMQ#Listener#IRabbitListenerContainerFactory#CreateListenerContainer*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(IRabbitListenerEndpoint)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  name.vb: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(IRabbitListenerEndpoint)
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateContainerInstance
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateContainerInstance
  id: CreateContainerInstance
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: CreateContainerInstance()
  nameWithType: AbstractRabbitListenerContainerFactory<C>.CreateContainerInstance()
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.CreateContainerInstance()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateContainerInstance
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 331
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected abstract C CreateContainerInstance()
    return:
      type: '{C}'
    content.vb: Protected MustOverride Function CreateContainerInstance As C
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateContainerInstance*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).CreateContainerInstance()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).CreateContainerInstance()
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.InitializeContainer(`0,Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.InitializeContainer(`0,Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  id: InitializeContainer(`0,Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  parent: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1
  langs:
  - csharp
  - vb
  name: InitializeContainer(C, IRabbitListenerEndpoint)
  nameWithType: AbstractRabbitListenerContainerFactory<C>.InitializeContainer(C, IRabbitListenerEndpoint)
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.InitializeContainer(C, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: InitializeContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/AbstractRabbitListenerContainerFactory.cs
    startLine: 333
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: protected virtual void InitializeContainer(C instance, IRabbitListenerEndpoint endpoint)
    parameters:
    - id: instance
      type: '{C}'
    - id: endpoint
      type: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    content.vb: Protected Overridable Sub InitializeContainer(instance As C, endpoint As IRabbitListenerEndpoint)
  overload: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.InitializeContainer*
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).InitializeContainer(C, IRabbitListenerEndpoint)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).InitializeContainer(C, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
references:
- uid: Steeltoe.Messaging.RabbitMQ.Config
  commentId: N:Steeltoe.Messaging.RabbitMQ.Config
  name: Steeltoe.Messaging.RabbitMQ.Config
  nameWithType: Steeltoe.Messaging.RabbitMQ.Config
  fullName: Steeltoe.Messaging.RabbitMQ.Config
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory{{C}}
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory{`0}
  parent: Steeltoe.Messaging.RabbitMQ.Listener
  definition: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1
  name: IRabbitListenerContainerFactory<C>
  nameWithType: IRabbitListenerContainerFactory<C>
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>
  nameWithType.vb: IRabbitListenerContainerFactory(Of C)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory(Of C)
  name.vb: IRabbitListenerContainerFactory(Of C)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1
    name: IRabbitListenerContainerFactory
    nameWithType: IRabbitListenerContainerFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1
    name: IRabbitListenerContainerFactory
    nameWithType: IRabbitListenerContainerFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  parent: Steeltoe.Messaging.RabbitMQ.Listener
  name: IRabbitListenerContainerFactory
  nameWithType: IRabbitListenerContainerFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
- uid: Steeltoe.Common.Services.IServiceNameAware
  commentId: T:Steeltoe.Common.Services.IServiceNameAware
  parent: Steeltoe.Common.Services
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: Steeltoe.Common.Services.IServiceNameAware
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1
  name: IRabbitListenerContainerFactory<C>
  nameWithType: IRabbitListenerContainerFactory<C>
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>
  nameWithType.vb: IRabbitListenerContainerFactory(Of C)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory(Of C)
  name.vb: IRabbitListenerContainerFactory(Of C)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1
    name: IRabbitListenerContainerFactory
    nameWithType: IRabbitListenerContainerFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1
    name: IRabbitListenerContainerFactory
    nameWithType: IRabbitListenerContainerFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Listener
  commentId: N:Steeltoe.Messaging.RabbitMQ.Listener
  name: Steeltoe.Messaging.RabbitMQ.Listener
  nameWithType: Steeltoe.Messaging.RabbitMQ.Listener
  fullName: Steeltoe.Messaging.RabbitMQ.Listener
- uid: Steeltoe.Common.Services
  commentId: N:Steeltoe.Common.Services
  name: Steeltoe.Common.Services
  nameWithType: Steeltoe.Common.Services
  fullName: Steeltoe.Common.Services
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Logging.ILoggerFactory
  commentId: T:Microsoft.Extensions.Logging.ILoggerFactory
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Microsoft.Extensions.Logging.ILoggerFactory
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.#ctor
  name: AbstractRabbitListenerContainerFactory
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AbstractRabbitListenerContainerFactory
- uid: Steeltoe.Common.Contexts.IApplicationContext
  commentId: T:Steeltoe.Common.Contexts.IApplicationContext
  parent: Steeltoe.Common.Contexts
  name: IApplicationContext
  nameWithType: IApplicationContext
  fullName: Steeltoe.Common.Contexts.IApplicationContext
- uid: Steeltoe.Common.Contexts
  commentId: N:Steeltoe.Common.Contexts
  name: Steeltoe.Common.Contexts
  nameWithType: Steeltoe.Common.Contexts
  fullName: Steeltoe.Common.Contexts
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: IConnectionFactory
  nameWithType: IConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Connection
  commentId: N:Steeltoe.Messaging.RabbitMQ.Connection
  name: Steeltoe.Messaging.RabbitMQ.Connection
  nameWithType: Steeltoe.Messaging.RabbitMQ.Connection
  fullName: Steeltoe.Messaging.RabbitMQ.Connection
- uid: Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions}
  commentId: T:Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptionsMonitor`1
  name: IOptionsMonitor<RabbitOptions>
  nameWithType: IOptionsMonitor<RabbitOptions>
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions>
  nameWithType.vb: IOptionsMonitor(Of RabbitOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions)
  name.vb: IOptionsMonitor(Of RabbitOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    name: RabbitOptions
    nameWithType: RabbitOptions
    fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    name: RabbitOptions
    nameWithType: RabbitOptions
    fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.IOptionsMonitor`1
  commentId: T:Microsoft.Extensions.Options.IOptionsMonitor`1
  isExternal: true
  name: IOptionsMonitor<TOptions>
  nameWithType: IOptionsMonitor<TOptions>
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<TOptions>
  nameWithType.vb: IOptionsMonitor(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of TOptions)
  name.vb: IOptionsMonitor(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: true
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ApplicationContext*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ApplicationContext
  name: ApplicationContext
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ApplicationContext
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ApplicationContext
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ApplicationContext
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ApplicationContext
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConnectionFactory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConnectionFactory
  name: ConnectionFactory
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConnectionFactory
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ConnectionFactory
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ErrorHandler*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ErrorHandler
  name: ErrorHandler
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ErrorHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ErrorHandler
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ErrorHandler
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ErrorHandler
- uid: Steeltoe.Common.Util.IErrorHandler
  commentId: T:Steeltoe.Common.Util.IErrorHandler
  parent: Steeltoe.Common.Util
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: Steeltoe.Common.Util.IErrorHandler
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MessageConverter*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MessageConverter
  name: MessageConverter
  nameWithType: AbstractRabbitListenerContainerFactory<C>.MessageConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MessageConverter
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).MessageConverter
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).MessageConverter
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.ISmartMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: ISmartMessageConverter
  nameWithType: ISmartMessageConverter
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter
- uid: Steeltoe.Messaging.Converter
  commentId: N:Steeltoe.Messaging.Converter
  name: Steeltoe.Messaging.Converter
  nameWithType: Steeltoe.Messaging.Converter
  fullName: Steeltoe.Messaging.Converter
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AcknowledgeMode*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AcknowledgeMode
  name: AcknowledgeMode
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AcknowledgeMode
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AcknowledgeMode
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AcknowledgeMode
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AcknowledgeMode
- uid: System.Nullable{Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode}
  commentId: T:System.Nullable{Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode}
  parent: System
  definition: System.Nullable`1
  name: Nullable<AcknowledgeMode>
  nameWithType: Nullable<AcknowledgeMode>
  fullName: System.Nullable<Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode>
  nameWithType.vb: Nullable(Of AcknowledgeMode)
  fullName.vb: System.Nullable(Of Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  name.vb: Nullable(Of AcknowledgeMode)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
    name: AcknowledgeMode
    nameWithType: AcknowledgeMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
    name: AcknowledgeMode
    nameWithType: AcknowledgeMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IsChannelTransacted*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IsChannelTransacted
  name: IsChannelTransacted
  nameWithType: AbstractRabbitListenerContainerFactory<C>.IsChannelTransacted
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IsChannelTransacted
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).IsChannelTransacted
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).IsChannelTransacted
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.TransactionManager*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.TransactionManager
  name: TransactionManager
  nameWithType: AbstractRabbitListenerContainerFactory<C>.TransactionManager
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.TransactionManager
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).TransactionManager
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).TransactionManager
- uid: Steeltoe.Common.Transaction.IPlatformTransactionManager
  commentId: T:Steeltoe.Common.Transaction.IPlatformTransactionManager
  parent: Steeltoe.Common.Transaction
  name: IPlatformTransactionManager
  nameWithType: IPlatformTransactionManager
  fullName: Steeltoe.Common.Transaction.IPlatformTransactionManager
- uid: Steeltoe.Common.Transaction
  commentId: N:Steeltoe.Common.Transaction
  name: Steeltoe.Common.Transaction
  nameWithType: Steeltoe.Common.Transaction
  fullName: Steeltoe.Common.Transaction
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PrefetchCount*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PrefetchCount
  name: PrefetchCount
  nameWithType: AbstractRabbitListenerContainerFactory<C>.PrefetchCount
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PrefetchCount
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).PrefetchCount
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).PrefetchCount
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DefaultRequeueRejected*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DefaultRequeueRejected
  name: DefaultRequeueRejected
  nameWithType: AbstractRabbitListenerContainerFactory<C>.DefaultRequeueRejected
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DefaultRequeueRejected
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).DefaultRequeueRejected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).DefaultRequeueRejected
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryInterval*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryInterval
  name: RecoveryInterval
  nameWithType: AbstractRabbitListenerContainerFactory<C>.RecoveryInterval
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryInterval
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).RecoveryInterval
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).RecoveryInterval
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryBackOff*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RecoveryBackOff
  name: RecoveryBackOff
  nameWithType: AbstractRabbitListenerContainerFactory<C>.RecoveryBackOff
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryBackOff
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).RecoveryBackOff
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).RecoveryBackOff
- uid: Steeltoe.Common.Util.IBackOff
  commentId: T:Steeltoe.Common.Util.IBackOff
  parent: Steeltoe.Common.Util
  name: IBackOff
  nameWithType: IBackOff
  fullName: Steeltoe.Common.Util.IBackOff
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MissingQueuesFatal*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MissingQueuesFatal
  name: MissingQueuesFatal
  nameWithType: AbstractRabbitListenerContainerFactory<C>.MissingQueuesFatal
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MissingQueuesFatal
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).MissingQueuesFatal
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).MissingQueuesFatal
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MismatchedQueuesFatal*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.MismatchedQueuesFatal
  name: MismatchedQueuesFatal
  nameWithType: AbstractRabbitListenerContainerFactory<C>.MismatchedQueuesFatal
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MismatchedQueuesFatal
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).MismatchedQueuesFatal
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).MismatchedQueuesFatal
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConsumerTagStrategy*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ConsumerTagStrategy
  name: ConsumerTagStrategy
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ConsumerTagStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConsumerTagStrategy
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ConsumerTagStrategy
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ConsumerTagStrategy
- uid: Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: IConsumerTagStrategy
  nameWithType: IConsumerTagStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
- uid: Steeltoe.Messaging.RabbitMQ.Core
  commentId: N:Steeltoe.Messaging.RabbitMQ.Core
  name: Steeltoe.Messaging.RabbitMQ.Core
  nameWithType: Steeltoe.Messaging.RabbitMQ.Core
  fullName: Steeltoe.Messaging.RabbitMQ.Core
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IdleEventInterval*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.IdleEventInterval
  name: IdleEventInterval
  nameWithType: AbstractRabbitListenerContainerFactory<C>.IdleEventInterval
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IdleEventInterval
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).IdleEventInterval
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).IdleEventInterval
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.FailedDeclarationRetryInterval*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.FailedDeclarationRetryInterval
  name: FailedDeclarationRetryInterval
  nameWithType: AbstractRabbitListenerContainerFactory<C>.FailedDeclarationRetryInterval
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.FailedDeclarationRetryInterval
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).FailedDeclarationRetryInterval
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).FailedDeclarationRetryInterval
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AutoStartup*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AutoStartup
  name: AutoStartup
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AutoStartup
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AutoStartup
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AutoStartup
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AutoStartup
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Phase*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Phase
  name: Phase
  nameWithType: AbstractRabbitListenerContainerFactory<C>.Phase
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Phase
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).Phase
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).Phase
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AfterReceivePostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.AfterReceivePostProcessors
  name: AfterReceivePostProcessors
  nameWithType: AbstractRabbitListenerContainerFactory<C>.AfterReceivePostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AfterReceivePostProcessors
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).AfterReceivePostProcessors
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).AfterReceivePostProcessors
- uid: System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
  commentId: T:System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IMessagePostProcessor>
  nameWithType: List<IMessagePostProcessor>
  fullName: System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
  nameWithType.vb: List(Of IMessagePostProcessor)
  fullName.vb: System.Collections.Generic.List(Of Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  name.vb: List(Of IMessagePostProcessor)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BeforeSendReplyPostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BeforeSendReplyPostProcessors
  name: BeforeSendReplyPostProcessors
  nameWithType: AbstractRabbitListenerContainerFactory<C>.BeforeSendReplyPostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BeforeSendReplyPostProcessors
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).BeforeSendReplyPostProcessors
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).BeforeSendReplyPostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RetryTemplate*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.RetryTemplate
  name: RetryTemplate
  nameWithType: AbstractRabbitListenerContainerFactory<C>.RetryTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RetryTemplate
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).RetryTemplate
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).RetryTemplate
- uid: Steeltoe.Common.Retry.RetryTemplate
  commentId: T:Steeltoe.Common.Retry.RetryTemplate
  parent: Steeltoe.Common.Retry
  name: RetryTemplate
  nameWithType: RetryTemplate
  fullName: Steeltoe.Common.Retry.RetryTemplate
- uid: Steeltoe.Common.Retry
  commentId: N:Steeltoe.Common.Retry
  name: Steeltoe.Common.Retry
  nameWithType: Steeltoe.Common.Retry
  fullName: Steeltoe.Common.Retry
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ReplyRecoveryCallback*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ReplyRecoveryCallback
  name: ReplyRecoveryCallback
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ReplyRecoveryCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ReplyRecoveryCallback
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ReplyRecoveryCallback
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ReplyRecoveryCallback
- uid: Steeltoe.Common.Retry.IRecoveryCallback
  commentId: T:Steeltoe.Common.Retry.IRecoveryCallback
  parent: Steeltoe.Common.Retry
  name: IRecoveryCallback
  nameWithType: IRecoveryCallback
  fullName: Steeltoe.Common.Retry.IRecoveryCallback
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ContainerCustomizer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ContainerCustomizer
  name: ContainerCustomizer
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ContainerCustomizer
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ContainerCustomizer
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ContainerCustomizer
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ContainerCustomizer
- uid: System.Action{{C}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<C>
  nameWithType: Action<C>
  fullName: System.Action<C>
  nameWithType.vb: Action(Of C)
  fullName.vb: System.Action(Of C)
  name.vb: Action(Of C)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchListener*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchListener
  name: BatchListener
  nameWithType: AbstractRabbitListenerContainerFactory<C>.BatchListener
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchListener
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).BatchListener
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).BatchListener
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchingStrategy*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.BatchingStrategy
  name: BatchingStrategy
  nameWithType: AbstractRabbitListenerContainerFactory<C>.BatchingStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchingStrategy
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).BatchingStrategy
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).BatchingStrategy
- uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  commentId: T:Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  parent: Steeltoe.Messaging.RabbitMQ.Batch
  name: IBatchingStrategy
  nameWithType: IBatchingStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
- uid: Steeltoe.Messaging.RabbitMQ.Batch
  commentId: N:Steeltoe.Messaging.RabbitMQ.Batch
  name: Steeltoe.Messaging.RabbitMQ.Batch
  nameWithType: Steeltoe.Messaging.RabbitMQ.Batch
  fullName: Steeltoe.Messaging.RabbitMQ.Batch
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DeBatchingEnabled*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.DeBatchingEnabled
  name: DeBatchingEnabled
  nameWithType: AbstractRabbitListenerContainerFactory<C>.DeBatchingEnabled
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DeBatchingEnabled
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).DeBatchingEnabled
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).DeBatchingEnabled
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ServiceName*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.ServiceName
  name: ServiceName
  nameWithType: AbstractRabbitListenerContainerFactory<C>.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ServiceName
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).ServiceName
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).ServiceName
- uid: Steeltoe.Common.Services.IServiceNameAware.ServiceName
  commentId: P:Steeltoe.Common.Services.IServiceNameAware.ServiceName
  parent: Steeltoe.Common.Services.IServiceNameAware
  name: ServiceName
  nameWithType: IServiceNameAware.ServiceName
  fullName: Steeltoe.Common.Services.IServiceNameAware.ServiceName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PossibleAuthenticationFailureFatal*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.PossibleAuthenticationFailureFatal
  name: PossibleAuthenticationFailureFatal
  nameWithType: AbstractRabbitListenerContainerFactory<C>.PossibleAuthenticationFailureFatal
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PossibleAuthenticationFailureFatal
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).PossibleAuthenticationFailureFatal
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).PossibleAuthenticationFailureFatal
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Options*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Options
  name: Options
  nameWithType: AbstractRabbitListenerContainerFactory<C>.Options
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Options
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).Options
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).Options
- uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: RabbitOptions
  nameWithType: RabbitOptions
  fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetAfterReceivePostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetAfterReceivePostProcessors
  name: SetAfterReceivePostProcessors
  nameWithType: AbstractRabbitListenerContainerFactory<C>.SetAfterReceivePostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.SetAfterReceivePostProcessors
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).SetAfterReceivePostProcessors
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).SetAfterReceivePostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
  isExternal: true
  name: IMessagePostProcessor[]
  nameWithType: IMessagePostProcessor[]
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
  nameWithType.vb: IMessagePostProcessor()
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor()
  name.vb: IMessagePostProcessor()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetBeforeSendReplyPostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.SetBeforeSendReplyPostProcessors
  name: SetBeforeSendReplyPostProcessors
  nameWithType: AbstractRabbitListenerContainerFactory<C>.SetBeforeSendReplyPostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.SetBeforeSendReplyPostProcessors
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).SetBeforeSendReplyPostProcessors
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).SetBeforeSendReplyPostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateListenerContainer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateListenerContainer
  name: CreateListenerContainer
  nameWithType: AbstractRabbitListenerContainerFactory<C>.CreateListenerContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.CreateListenerContainer
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).CreateListenerContainer
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).CreateListenerContainer
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory{{C}}.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory{`0}.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory{{C}}
  definition: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  name: CreateListenerContainer(IRabbitListenerEndpoint)
  nameWithType: IRabbitListenerContainerFactory<C>.CreateListenerContainer(IRabbitListenerEndpoint)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  nameWithType.vb: IRabbitListenerContainerFactory(Of C).CreateListenerContainer(IRabbitListenerEndpoint)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory(Of C).CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
    name: CreateListenerContainer
    nameWithType: IRabbitListenerContainerFactory<C>.CreateListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>.CreateListenerContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    name: IRabbitListenerEndpoint
    nameWithType: IRabbitListenerEndpoint
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
    name: CreateListenerContainer
    nameWithType: IRabbitListenerContainerFactory(Of C).CreateListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory(Of C).CreateListenerContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    name: IRabbitListenerEndpoint
    nameWithType: IRabbitListenerEndpoint
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  parent: Steeltoe.Messaging.RabbitMQ.Listener
  name: IRabbitListenerEndpoint
  nameWithType: IRabbitListenerEndpoint
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
- uid: '{C}'
  commentId: '!:C'
  definition: C
  name: C
  nameWithType: C
  fullName: C
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  name: CreateListenerContainer(IRabbitListenerEndpoint)
  nameWithType: IRabbitListenerContainerFactory<C>.CreateListenerContainer(IRabbitListenerEndpoint)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  nameWithType.vb: IRabbitListenerContainerFactory(Of C).CreateListenerContainer(IRabbitListenerEndpoint)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory(Of C).CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
    name: CreateListenerContainer
    nameWithType: IRabbitListenerContainerFactory<C>.CreateListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>.CreateListenerContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    name: IRabbitListenerEndpoint
    nameWithType: IRabbitListenerEndpoint
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory`1.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
    name: CreateListenerContainer
    nameWithType: IRabbitListenerContainerFactory(Of C).CreateListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory(Of C).CreateListenerContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    name: IRabbitListenerEndpoint
    nameWithType: IRabbitListenerEndpoint
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: C
  name: C
  nameWithType: C
  fullName: C
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Steeltoe#Messaging#RabbitMQ#Listener#IRabbitListenerContainerFactory#CreateListenerContainer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.Steeltoe#Messaging#RabbitMQ#Listener#IRabbitListenerContainerFactory#CreateListenerContainer
  name: IRabbitListenerContainerFactory.CreateListenerContainer
  nameWithType: AbstractRabbitListenerContainerFactory<C>.IRabbitListenerContainerFactory.CreateListenerContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer
  name.vb: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
  name: CreateListenerContainer(IRabbitListenerEndpoint)
  nameWithType: IRabbitListenerContainerFactory.CreateListenerContainer(IRabbitListenerEndpoint)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
    name: CreateListenerContainer
    nameWithType: IRabbitListenerContainerFactory.CreateListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    name: IRabbitListenerEndpoint
    nameWithType: IRabbitListenerEndpoint
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint)
    name: CreateListenerContainer
    nameWithType: IRabbitListenerContainerFactory.CreateListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
    name: IRabbitListenerEndpoint
    nameWithType: IRabbitListenerEndpoint
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
  parent: Steeltoe.Messaging.RabbitMQ.Listener
  name: IMessageListenerContainer
  nameWithType: IMessageListenerContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateContainerInstance*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.CreateContainerInstance
  name: CreateContainerInstance
  nameWithType: AbstractRabbitListenerContainerFactory<C>.CreateContainerInstance
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.CreateContainerInstance
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).CreateContainerInstance
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).CreateContainerInstance
- uid: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.InitializeContainer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory`1.InitializeContainer
  name: InitializeContainer
  nameWithType: AbstractRabbitListenerContainerFactory<C>.InitializeContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.InitializeContainer
  nameWithType.vb: AbstractRabbitListenerContainerFactory(Of C).InitializeContainer
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory(Of C).InitializeContainer
