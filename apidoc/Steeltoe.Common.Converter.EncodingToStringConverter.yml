### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Converter.EncodingToStringConverter
  commentId: T:Steeltoe.Common.Converter.EncodingToStringConverter
  id: EncodingToStringConverter
  parent: Steeltoe.Common.Converter
  children:
  - Steeltoe.Common.Converter.EncodingToStringConverter.Convert(System.Text.Encoding)
  langs:
  - csharp
  - vb
  name: EncodingToStringConverter
  nameWithType: EncodingToStringConverter
  fullName: Steeltoe.Common.Converter.EncodingToStringConverter
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Converter/EncodingToStringConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EncodingToStringConverter
    path: ../Steeltoe/src/Common/src/Common/Converter/EncodingToStringConverter.cs
    startLine: 8
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: 'public class EncodingToStringConverter : AbstractConverter<Encoding, string>, IConditionalGenericConverter, IConditionalConverter, IGenericConverter, IConverter<Encoding, string>'
    content.vb: >-
      Public Class EncodingToStringConverter

          Inherits AbstractConverter(Of Encoding, String)

          Implements IConditionalGenericConverter, IConditionalConverter, IGenericConverter, IConverter(Of Encoding, String)
  inheritance:
  - System.Object
  - Steeltoe.Common.Converter.AbstractGenericConverter
  - Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  - Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}
  implements:
  - Steeltoe.Common.Converter.IConditionalGenericConverter
  - Steeltoe.Common.Converter.IConditionalConverter
  - Steeltoe.Common.Converter.IGenericConverter
  - Steeltoe.Common.Converter.IConverter{System.Text.Encoding,System.String}
  inheritedMembers:
  - Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Matches(System.Type,System.Type)
  - Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Convert(System.Text.Encoding)
  - Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Convert(System.Object,System.Type,System.Type)
  - Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
  - Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  - Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Common.Converter.EncodingToStringConverter.Convert(System.Text.Encoding)
  commentId: M:Steeltoe.Common.Converter.EncodingToStringConverter.Convert(System.Text.Encoding)
  id: Convert(System.Text.Encoding)
  parent: Steeltoe.Common.Converter.EncodingToStringConverter
  langs:
  - csharp
  - vb
  name: Convert(Encoding)
  nameWithType: EncodingToStringConverter.Convert(Encoding)
  fullName: Steeltoe.Common.Converter.EncodingToStringConverter.Convert(System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/EncodingToStringConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Convert
    path: ../Steeltoe/src/Common/src/Common/Converter/EncodingToStringConverter.cs
    startLine: 10
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public override string Convert(Encoding source)
    parameters:
    - id: source
      type: System.Text.Encoding
    return:
      type: System.String
    content.vb: Public Overrides Function Convert(source As Encoding) As String
  overridden: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Convert(System.Text.Encoding)
  overload: Steeltoe.Common.Converter.EncodingToStringConverter.Convert*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Steeltoe.Common.Converter
  commentId: N:Steeltoe.Common.Converter
  name: Steeltoe.Common.Converter
  nameWithType: Steeltoe.Common.Converter
  fullName: Steeltoe.Common.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.Converter.AbstractGenericConverter
  commentId: T:Steeltoe.Common.Converter.AbstractGenericConverter
  parent: Steeltoe.Common.Converter
  name: AbstractGenericConverter
  nameWithType: AbstractGenericConverter
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter
- uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  commentId: T:Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  parent: Steeltoe.Common.Converter
  name: AbstractGenericConditionalConverter
  nameWithType: AbstractGenericConditionalConverter
  fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter
- uid: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}
  commentId: T:Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}
  parent: Steeltoe.Common.Converter
  definition: Steeltoe.Common.Converter.AbstractConverter`2
  name: AbstractConverter<Encoding, String>
  nameWithType: AbstractConverter<Encoding, String>
  fullName: Steeltoe.Common.Converter.AbstractConverter<System.Text.Encoding, System.String>
  nameWithType.vb: AbstractConverter(Of Encoding, String)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of System.Text.Encoding, System.String)
  name.vb: AbstractConverter(Of Encoding, String)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2
    name: AbstractConverter
    nameWithType: AbstractConverter
    fullName: Steeltoe.Common.Converter.AbstractConverter
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2
    name: AbstractConverter
    nameWithType: AbstractConverter
    fullName: Steeltoe.Common.Converter.AbstractConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.IConditionalGenericConverter
  commentId: T:Steeltoe.Common.Converter.IConditionalGenericConverter
  parent: Steeltoe.Common.Converter
  name: IConditionalGenericConverter
  nameWithType: IConditionalGenericConverter
  fullName: Steeltoe.Common.Converter.IConditionalGenericConverter
- uid: Steeltoe.Common.Converter.IConditionalConverter
  commentId: T:Steeltoe.Common.Converter.IConditionalConverter
  parent: Steeltoe.Common.Converter
  name: IConditionalConverter
  nameWithType: IConditionalConverter
  fullName: Steeltoe.Common.Converter.IConditionalConverter
- uid: Steeltoe.Common.Converter.IGenericConverter
  commentId: T:Steeltoe.Common.Converter.IGenericConverter
  parent: Steeltoe.Common.Converter
  name: IGenericConverter
  nameWithType: IGenericConverter
  fullName: Steeltoe.Common.Converter.IGenericConverter
- uid: Steeltoe.Common.Converter.IConverter{System.Text.Encoding,System.String}
  commentId: T:Steeltoe.Common.Converter.IConverter{System.Text.Encoding,System.String}
  parent: Steeltoe.Common.Converter
  definition: Steeltoe.Common.Converter.IConverter`2
  name: IConverter<Encoding, String>
  nameWithType: IConverter<Encoding, String>
  fullName: Steeltoe.Common.Converter.IConverter<System.Text.Encoding, System.String>
  nameWithType.vb: IConverter(Of Encoding, String)
  fullName.vb: Steeltoe.Common.Converter.IConverter(Of System.Text.Encoding, System.String)
  name.vb: IConverter(Of Encoding, String)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.IConverter`2
    name: IConverter
    nameWithType: IConverter
    fullName: Steeltoe.Common.Converter.IConverter
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Converter.IConverter`2
    name: IConverter
    nameWithType: IConverter
    fullName: Steeltoe.Common.Converter.IConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Matches(System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Matches(System.Type,System.Type)
  parent: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}
  definition: Steeltoe.Common.Converter.AbstractConverter`2.Matches(System.Type,System.Type)
  name: Matches(Type, Type)
  nameWithType: AbstractConverter<Encoding, String>.Matches(Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractConverter<System.Text.Encoding, System.String>.Matches(System.Type, System.Type)
  nameWithType.vb: AbstractConverter(Of Encoding, String).Matches(Type, Type)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of System.Text.Encoding, System.String).Matches(System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractConverter<Encoding, String>.Matches
    fullName: Steeltoe.Common.Converter.AbstractConverter<System.Text.Encoding, System.String>.Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractConverter(Of Encoding, String).Matches
    fullName: Steeltoe.Common.Converter.AbstractConverter(Of System.Text.Encoding, System.String).Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Convert(System.Text.Encoding)
  commentId: M:Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Convert(System.Text.Encoding)
  parent: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}
  definition: Steeltoe.Common.Converter.AbstractConverter`2.Convert(`0)
  name: Convert(Encoding)
  nameWithType: AbstractConverter<Encoding, String>.Convert(Encoding)
  fullName: Steeltoe.Common.Converter.AbstractConverter<System.Text.Encoding, System.String>.Convert(System.Text.Encoding)
  nameWithType.vb: AbstractConverter(Of Encoding, String).Convert(Encoding)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of System.Text.Encoding, System.String).Convert(System.Text.Encoding)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(`0)
    name: Convert
    nameWithType: AbstractConverter<Encoding, String>.Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter<System.Text.Encoding, System.String>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(`0)
    name: Convert
    nameWithType: AbstractConverter(Of Encoding, String).Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter(Of System.Text.Encoding, System.String).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Text.Encoding
    name: Encoding
    nameWithType: Encoding
    fullName: System.Text.Encoding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}.Convert(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Converter.AbstractConverter{System.Text.Encoding,System.String}
  definition: Steeltoe.Common.Converter.AbstractConverter`2.Convert(System.Object,System.Type,System.Type)
  name: Convert(Object, Type, Type)
  nameWithType: AbstractConverter<Encoding, String>.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractConverter<System.Text.Encoding, System.String>.Convert(System.Object, System.Type, System.Type)
  nameWithType.vb: AbstractConverter(Of Encoding, String).Convert(Object, Type, Type)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of System.Text.Encoding, System.String).Convert(System.Object, System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractConverter<Encoding, String>.Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter<System.Text.Encoding, System.String>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractConverter(Of Encoding, String).Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter(Of System.Text.Encoding, System.String).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
  parent: Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  isExternal: true
  name: Matches(Type, Type)
  nameWithType: AbstractGenericConditionalConverter.Matches(Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractGenericConditionalConverter.Matches
    fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractGenericConditionalConverter.Matches
    fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  commentId: P:Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  parent: Steeltoe.Common.Converter.AbstractGenericConverter
  name: ConvertibleTypes
  nameWithType: AbstractGenericConverter.ConvertibleTypes
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Converter.AbstractGenericConverter
  isExternal: true
  name: Convert(Object, Type, Type)
  nameWithType: AbstractGenericConverter.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object, System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractGenericConverter.Convert
    fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractGenericConverter.Convert
    fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Converter.AbstractConverter`2
  commentId: T:Steeltoe.Common.Converter.AbstractConverter`2
  name: AbstractConverter<S, T>
  nameWithType: AbstractConverter<S, T>
  fullName: Steeltoe.Common.Converter.AbstractConverter<S, T>
  nameWithType.vb: AbstractConverter(Of S, T)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of S, T)
  name.vb: AbstractConverter(Of S, T)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2
    name: AbstractConverter
    nameWithType: AbstractConverter
    fullName: Steeltoe.Common.Converter.AbstractConverter
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2
    name: AbstractConverter
    nameWithType: AbstractConverter
    fullName: Steeltoe.Common.Converter.AbstractConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.IConverter`2
  commentId: T:Steeltoe.Common.Converter.IConverter`2
  name: IConverter<S, T>
  nameWithType: IConverter<S, T>
  fullName: Steeltoe.Common.Converter.IConverter<S, T>
  nameWithType.vb: IConverter(Of S, T)
  fullName.vb: Steeltoe.Common.Converter.IConverter(Of S, T)
  name.vb: IConverter(Of S, T)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.IConverter`2
    name: IConverter
    nameWithType: IConverter
    fullName: Steeltoe.Common.Converter.IConverter
  - name: <
    nameWithType: <
    fullName: <
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Converter.IConverter`2
    name: IConverter
    nameWithType: IConverter
    fullName: Steeltoe.Common.Converter.IConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractConverter`2.Matches(System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractConverter`2.Matches(System.Type,System.Type)
  isExternal: true
  name: Matches(Type, Type)
  nameWithType: AbstractConverter<S, T>.Matches(Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractConverter<S, T>.Matches(System.Type, System.Type)
  nameWithType.vb: AbstractConverter(Of S, T).Matches(Type, Type)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of S, T).Matches(System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractConverter<S, T>.Matches
    fullName: Steeltoe.Common.Converter.AbstractConverter<S, T>.Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractConverter(Of S, T).Matches
    fullName: Steeltoe.Common.Converter.AbstractConverter(Of S, T).Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(`0)
  commentId: M:Steeltoe.Common.Converter.AbstractConverter`2.Convert(`0)
  name: Convert(S)
  nameWithType: AbstractConverter<S, T>.Convert(S)
  fullName: Steeltoe.Common.Converter.AbstractConverter<S, T>.Convert(S)
  nameWithType.vb: AbstractConverter(Of S, T).Convert(S)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of S, T).Convert(S)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(`0)
    name: Convert
    nameWithType: AbstractConverter<S, T>.Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter<S, T>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(`0)
    name: Convert
    nameWithType: AbstractConverter(Of S, T).Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter(Of S, T).Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractConverter`2.Convert(System.Object,System.Type,System.Type)
  isExternal: true
  name: Convert(Object, Type, Type)
  nameWithType: AbstractConverter<S, T>.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractConverter<S, T>.Convert(System.Object, System.Type, System.Type)
  nameWithType.vb: AbstractConverter(Of S, T).Convert(Object, Type, Type)
  fullName.vb: Steeltoe.Common.Converter.AbstractConverter(Of S, T).Convert(System.Object, System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractConverter<S, T>.Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter<S, T>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractConverter`2.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractConverter(Of S, T).Convert
    fullName: Steeltoe.Common.Converter.AbstractConverter(Of S, T).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.EncodingToStringConverter.Convert*
  commentId: Overload:Steeltoe.Common.Converter.EncodingToStringConverter.Convert
  name: Convert
  nameWithType: EncodingToStringConverter.Convert
  fullName: Steeltoe.Common.Converter.EncodingToStringConverter.Convert
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
