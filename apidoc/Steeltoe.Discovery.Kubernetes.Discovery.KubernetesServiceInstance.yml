### YamlMime:ManagedReference
items:
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  commentId: T:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  id: KubernetesServiceInstance
  parent: Steeltoe.Discovery.Kubernetes.Discovery
  children:
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.#ctor(System.String,System.String,V1EndpointAddress,V1EndpointPort,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId
  - Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri
  langs:
  - csharp
  - vb
  name: KubernetesServiceInstance
  nameWithType: KubernetesServiceInstance
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  type: Class
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: KubernetesServiceInstance
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 11
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: 'public class KubernetesServiceInstance : IServiceInstance'
    content.vb: >-
      Public Class KubernetesServiceInstance

          Inherits IServiceInstance
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId
  commentId: P:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId
  id: InstanceId
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: InstanceId
  nameWithType: KubernetesServiceInstance.InstanceId
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId
  type: Property
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: InstanceId
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 21
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public string InstanceId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property InstanceId As String
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId
  commentId: P:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId
  id: ServiceId
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: ServiceId
  nameWithType: KubernetesServiceInstance.ServiceId
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId
  type: Property
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceId
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 23
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public string ServiceId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ServiceId As String
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host
  commentId: P:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host
  id: Host
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: KubernetesServiceInstance.Host
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host
  type: Property
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Host
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 25
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public string Host { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Host As String
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port
  commentId: P:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port
  id: Port
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: KubernetesServiceInstance.Port
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port
  type: Property
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Port
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 27
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public int Port { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Port As Integer
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure
  commentId: P:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure
  id: IsSecure
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: IsSecure
  nameWithType: KubernetesServiceInstance.IsSecure
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure
  type: Property
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsSecure
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 29
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public bool IsSecure { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSecure As Boolean
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri
  commentId: P:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri
  id: Uri
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: KubernetesServiceInstance.Uri
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri
  type: Property
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Uri
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 31
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public Uri Uri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public ReadOnly Property Uri As Uri
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata
  commentId: P:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata
  id: Metadata
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: KubernetesServiceInstance.Metadata
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata
  type: Property
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Metadata
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 33
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public IDictionary<string, string> Metadata { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Metadata As IDictionary(Of String, String)
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.#ctor(System.String,System.String,V1EndpointAddress,V1EndpointPort,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.#ctor(System.String,System.String,V1EndpointAddress,V1EndpointPort,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: '#ctor(System.String,System.String,V1EndpointAddress,V1EndpointPort,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)'
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: KubernetesServiceInstance(String, String, V1EndpointAddress, V1EndpointPort, IDictionary<String, String>, Boolean)
  nameWithType: KubernetesServiceInstance.KubernetesServiceInstance(String, String, V1EndpointAddress, V1EndpointPort, IDictionary<String, String>, Boolean)
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.KubernetesServiceInstance(System.String, System.String, V1EndpointAddress, V1EndpointPort, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 35
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public KubernetesServiceInstance(string instanceId, string serviceId, V1EndpointAddress endpointAddress, V1EndpointPort endpointPort, IDictionary<string, string> metadata, bool isSecure)
    parameters:
    - id: instanceId
      type: System.String
    - id: serviceId
      type: System.String
    - id: endpointAddress
      type: V1EndpointAddress
    - id: endpointPort
      type: V1EndpointPort
    - id: metadata
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: isSecure
      type: System.Boolean
    content.vb: Public Sub New(instanceId As String, serviceId As String, endpointAddress As V1EndpointAddress, endpointPort As V1EndpointPort, metadata As IDictionary(Of String, String), isSecure As Boolean)
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.#ctor*
  nameWithType.vb: KubernetesServiceInstance.KubernetesServiceInstance(String, String, V1EndpointAddress, V1EndpointPort, IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.KubernetesServiceInstance(System.String, System.String, V1EndpointAddress, V1EndpointPort, System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: KubernetesServiceInstance(String, String, V1EndpointAddress, V1EndpointPort, IDictionary(Of String, String), Boolean)
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme
  commentId: M:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme
  id: GetScheme
  parent: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance
  langs:
  - csharp
  - vb
  name: GetScheme()
  nameWithType: KubernetesServiceInstance.GetScheme()
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme()
  type: Method
  source:
    remote:
      path: src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetScheme
    path: ../Steeltoe/src/Discovery/src/Kubernetes/Discovery/KubernetesServiceInstance.cs
    startLine: 51
  assemblies:
  - Steeltoe.Discovery.Kubernetes
  namespace: Steeltoe.Discovery.Kubernetes.Discovery
  syntax:
    content: public string GetScheme()
    return:
      type: System.String
    content.vb: Public Function GetScheme As String
  overload: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Discovery.Kubernetes.Discovery
  commentId: N:Steeltoe.Discovery.Kubernetes.Discovery
  name: Steeltoe.Discovery.Kubernetes.Discovery
  nameWithType: Steeltoe.Discovery.Kubernetes.Discovery
  fullName: Steeltoe.Discovery.Kubernetes.Discovery
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId
  name: InstanceId
  nameWithType: KubernetesServiceInstance.InstanceId
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.InstanceId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId
  name: ServiceId
  nameWithType: KubernetesServiceInstance.ServiceId
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.ServiceId
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host
  name: Host
  nameWithType: KubernetesServiceInstance.Host
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Host
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port
  name: Port
  nameWithType: KubernetesServiceInstance.Port
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Port
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure
  name: IsSecure
  nameWithType: KubernetesServiceInstance.IsSecure
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.IsSecure
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri
  name: Uri
  nameWithType: KubernetesServiceInstance.Uri
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Uri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata
  name: Metadata
  nameWithType: KubernetesServiceInstance.Metadata
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.Metadata
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.#ctor*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.#ctor
  name: KubernetesServiceInstance
  nameWithType: KubernetesServiceInstance.KubernetesServiceInstance
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.KubernetesServiceInstance
- uid: V1EndpointAddress
  commentId: '!:V1EndpointAddress'
  isExternal: true
  name: V1EndpointAddress
  nameWithType: V1EndpointAddress
  fullName: V1EndpointAddress
- uid: V1EndpointPort
  commentId: '!:V1EndpointPort'
  isExternal: true
  name: V1EndpointPort
  nameWithType: V1EndpointPort
  fullName: V1EndpointPort
- uid: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme*
  commentId: Overload:Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme
  name: GetScheme
  nameWithType: KubernetesServiceInstance.GetScheme
  fullName: Steeltoe.Discovery.Kubernetes.Discovery.KubernetesServiceInstance.GetScheme
