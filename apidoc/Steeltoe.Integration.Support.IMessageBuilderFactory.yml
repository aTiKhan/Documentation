### YamlMime:ManagedReference
items:
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory
  commentId: T:Steeltoe.Integration.Support.IMessageBuilderFactory
  id: IMessageBuilderFactory
  parent: Steeltoe.Integration.Support
  children:
  - Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  - Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  - Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  - Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
  langs:
  - csharp
  - vb
  name: IMessageBuilderFactory
  nameWithType: IMessageBuilderFactory
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory
  type: Interface
  source:
    remote:
      path: src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IMessageBuilderFactory
    path: ../Steeltoe/src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
    startLine: 11
  assemblies:
  - Steeltoe.Integration.Abstractions
  namespace: Steeltoe.Integration.Support
  summary: "\nA factory for creating message builders\n"
  example: []
  syntax:
    content: public interface IMessageBuilderFactory
    content.vb: Public Interface IMessageBuilderFactory
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  id: FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage<T>)
  nameWithType: IMessageBuilderFactory.FromMessage<T>(IMessage<T>)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage<T>(Steeltoe.Messaging.IMessage<T>)
  type: Method
  source:
    remote:
      path: src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
    startLine: 19
  assemblies:
  - Steeltoe.Integration.Abstractions
  namespace: Steeltoe.Integration.Support
  summary: "\nCreate a message builder from the given message\n"
  example: []
  syntax:
    content: IMessageBuilder<T> FromMessage<T>(IMessage<T> message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage{{T}}
      description: the message to use
    typeParameters:
    - id: T
      description: the type of payload
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder{{T}}
      description: the message builder
    content.vb: Function FromMessage(Of T)(message As IMessage(Of T)) As IMessageBuilder(Of T)
  overload: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage*
  nameWithType.vb: IMessageBuilderFactory.FromMessage(Of T)(IMessage(Of T))
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Of T)(Steeltoe.Messaging.IMessage(Of T))
  name.vb: FromMessage(Of T)(IMessage(Of T))
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  id: FromMessage(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage)
  nameWithType: IMessageBuilderFactory.FromMessage(IMessage)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
    startLine: 26
  assemblies:
  - Steeltoe.Integration.Abstractions
  namespace: Steeltoe.Integration.Support
  summary: "\nCreate a message builder from the given message\n"
  example: []
  syntax:
    content: IMessageBuilder FromMessage(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
      description: the message to use
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder
      description: the message builder
    content.vb: Function FromMessage(message As IMessage) As IMessageBuilder
  overload: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage*
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
  id: WithPayload``1(``0)
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: WithPayload<T>(T)
  nameWithType: IMessageBuilderFactory.WithPayload<T>(T)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload<T>(T)
  type: Method
  source:
    remote:
      path: src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithPayload
    path: ../Steeltoe/src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
    startLine: 34
  assemblies:
  - Steeltoe.Integration.Abstractions
  namespace: Steeltoe.Integration.Support
  summary: "\nCreate a message builder from the given message payload\n"
  example: []
  syntax:
    content: IMessageBuilder<T> WithPayload<T>(T payload)
    parameters:
    - id: payload
      type: '{T}'
      description: the payload of the message
    typeParameters:
    - id: T
      description: the type of the payload
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder{{T}}
      description: the message builder
    content.vb: Function WithPayload(Of T)(payload As T) As IMessageBuilder(Of T)
  overload: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload*
  nameWithType.vb: IMessageBuilderFactory.WithPayload(Of T)(T)
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(Of T)(T)
  name.vb: WithPayload(Of T)(T)
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  id: WithPayload(System.Object)
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: WithPayload(Object)
  nameWithType: IMessageBuilderFactory.WithPayload(Object)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  type: Method
  source:
    remote:
      path: src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithPayload
    path: ../Steeltoe/src/Integration/src/Abstractions/Support/IMessageBuilderFactory.cs
    startLine: 41
  assemblies:
  - Steeltoe.Integration.Abstractions
  namespace: Steeltoe.Integration.Support
  summary: "\nCreate a message builder from the given message payload\n"
  example: []
  syntax:
    content: IMessageBuilder WithPayload(object payload)
    parameters:
    - id: payload
      type: System.Object
      description: the payload of the message
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder
      description: the message builder
    content.vb: Function WithPayload(payload As Object) As IMessageBuilder
  overload: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload*
references:
- uid: Steeltoe.Integration.Support
  commentId: N:Steeltoe.Integration.Support
  name: Steeltoe.Integration.Support
  nameWithType: Steeltoe.Integration.Support
  fullName: Steeltoe.Integration.Support
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage*
  commentId: Overload:Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage
  name: FromMessage
  nameWithType: IMessageBuilderFactory.FromMessage
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage
- uid: Steeltoe.Messaging.IMessage{{T}}
  commentId: T:Steeltoe.Messaging.IMessage{``0}
  parent: Steeltoe.Messaging
  definition: Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Integration.Support.IMessageBuilder{{T}}
  commentId: T:Steeltoe.Integration.Support.IMessageBuilder{``0}
  parent: Steeltoe.Integration.Support
  definition: Steeltoe.Integration.Support.IMessageBuilder`1
  name: IMessageBuilder<T>
  nameWithType: IMessageBuilder<T>
  fullName: Steeltoe.Integration.Support.IMessageBuilder<T>
  nameWithType.vb: IMessageBuilder(Of T)
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilder(Of T)
  name.vb: IMessageBuilder(Of T)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage`1
  commentId: T:Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Integration.Support.IMessageBuilder`1
  commentId: T:Steeltoe.Integration.Support.IMessageBuilder`1
  parent: Steeltoe.Integration.Support
  name: IMessageBuilder<T>
  nameWithType: IMessageBuilder<T>
  fullName: Steeltoe.Integration.Support.IMessageBuilder<T>
  nameWithType.vb: IMessageBuilder(Of T)
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilder(Of T)
  name.vb: IMessageBuilder(Of T)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: Steeltoe.Integration.Support.IMessageBuilder
  commentId: T:Steeltoe.Integration.Support.IMessageBuilder
  parent: Steeltoe.Integration.Support
  name: IMessageBuilder
  nameWithType: IMessageBuilder
  fullName: Steeltoe.Integration.Support.IMessageBuilder
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload*
  commentId: Overload:Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload
  name: WithPayload
  nameWithType: IMessageBuilderFactory.WithPayload
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
