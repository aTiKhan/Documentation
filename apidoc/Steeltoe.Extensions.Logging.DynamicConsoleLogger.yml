### YamlMime:ManagedReference
items:
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  commentId: T:Steeltoe.Extensions.Logging.DynamicConsoleLogger
  id: DynamicConsoleLogger
  parent: Steeltoe.Extensions.Logging
  children:
  - Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope``1(``0)
  - Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate
  - Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter
  - Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled(LogLevel)
  - Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log``1(LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  - Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name
  - Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage(LogLevel,System.String,System.Int32,System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: DynamicConsoleLogger
  nameWithType: DynamicConsoleLogger
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  type: Class
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DynamicConsoleLogger
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 10
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: 'public class DynamicConsoleLogger : ILogger'
    content.vb: >-
      Public Class DynamicConsoleLogger

          Inherits ILogger
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope``1(``0)
  commentId: M:Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope``1(``0)
  id: BeginScope``1(``0)
  parent: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  langs:
  - csharp
  - vb
  name: BeginScope<TState>(TState)
  nameWithType: DynamicConsoleLogger.BeginScope<TState>(TState)
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope<TState>(TState)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: BeginScope
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 20
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: public IDisposable BeginScope<TState>(TState state)
    parameters:
    - id: state
      type: '{TState}'
    typeParameters:
    - id: TState
    return:
      type: System.IDisposable
    content.vb: Public Function BeginScope(Of TState)(state As TState) As IDisposable
  overload: Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope*
  nameWithType.vb: DynamicConsoleLogger.BeginScope(Of TState)(TState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled(LogLevel)
  commentId: M:Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled(LogLevel)
  id: IsEnabled(LogLevel)
  parent: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  langs:
  - csharp
  - vb
  name: IsEnabled(LogLevel)
  nameWithType: DynamicConsoleLogger.IsEnabled(LogLevel)
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled(LogLevel)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsEnabled
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 22
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: public bool IsEnabled(LogLevel logLevel)
    parameters:
    - id: logLevel
      type: LogLevel
    return:
      type: System.Boolean
    content.vb: Public Function IsEnabled(logLevel As LogLevel) As Boolean
  overload: Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate
  commentId: P:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate
  id: Delegate
  parent: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  langs:
  - csharp
  - vb
  name: Delegate
  nameWithType: DynamicConsoleLogger.Delegate
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate
  type: Property
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Delegate
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 24
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: public ILogger Delegate { get; }
    parameters: []
    return:
      type: ILogger
    content.vb: Public ReadOnly Property Delegate As ILogger
  overload: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter
  commentId: P:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter
  id: Filter
  parent: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: DynamicConsoleLogger.Filter
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter
  type: Property
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Filter
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 26
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: public Func<string, LogLevel, bool> Filter { get; }
    parameters: []
    return:
      type: System.Func{System.String,LogLevel,System.Boolean}
    content.vb: Public ReadOnly Property Filter As Func(Of String, LogLevel, Boolean)
  overload: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name
  commentId: P:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name
  id: Name
  parent: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DynamicConsoleLogger.Name
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name
  type: Property
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Name
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 28
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log``1(LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  commentId: M:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log``1(LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  id: Log``1(LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  parent: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  langs:
  - csharp
  - vb
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: DynamicConsoleLogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log<TState>(LogLevel, EventId, TState, System.Exception, System.Func<TState, System.Exception, System.String>)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Log
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 30
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    parameters:
    - id: logLevel
      type: LogLevel
    - id: eventId
      type: EventId
    - id: state
      type: '{TState}'
    - id: exception
      type: System.Exception
    - id: formatter
      type: System.Func{{TState},System.Exception,System.String}
    typeParameters:
    - id: TState
    content.vb: Public Sub Log(Of TState)(logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))
  overload: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log*
  nameWithType.vb: DynamicConsoleLogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log(Of TState)(LogLevel, EventId, TState, System.Exception, System.Func(Of TState, System.Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage(LogLevel,System.String,System.Int32,System.String,System.Exception)
  commentId: M:Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage(LogLevel,System.String,System.Int32,System.String,System.Exception)
  id: WriteMessage(LogLevel,System.String,System.Int32,System.String,System.Exception)
  parent: Steeltoe.Extensions.Logging.DynamicConsoleLogger
  langs:
  - csharp
  - vb
  name: WriteMessage(LogLevel, String, Int32, String, Exception)
  nameWithType: DynamicConsoleLogger.WriteMessage(LogLevel, String, Int32, String, Exception)
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage(LogLevel, System.String, System.Int32, System.String, System.Exception)
  type: Method
  source:
    remote:
      path: src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WriteMessage
    path: ../Steeltoe/src/Logging/src/DynamicLogger/DynamicConsoleLogger.cs
    startLine: 58
  assemblies:
  - Steeltoe.Extensions.Logging.DynamicLogger
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: public virtual void WriteMessage(LogLevel logLevel, string logName, int eventId, string message, Exception exception)
    parameters:
    - id: logLevel
      type: LogLevel
    - id: logName
      type: System.String
    - id: eventId
      type: System.Int32
    - id: message
      type: System.String
    - id: exception
      type: System.Exception
    content.vb: Public Overridable Sub WriteMessage(logLevel As LogLevel, logName As String, eventId As Integer, message As String, exception As Exception)
  overload: Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Steeltoe.Extensions.Logging
  commentId: N:Steeltoe.Extensions.Logging
  name: Steeltoe.Extensions.Logging
  nameWithType: Steeltoe.Extensions.Logging
  fullName: Steeltoe.Extensions.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope
  name: BeginScope
  nameWithType: DynamicConsoleLogger.BeginScope
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.BeginScope
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled
  name: IsEnabled
  nameWithType: DynamicConsoleLogger.IsEnabled
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.IsEnabled
- uid: LogLevel
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: LogLevel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate
  name: Delegate
  nameWithType: DynamicConsoleLogger.Delegate
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Delegate
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter
  name: Filter
  nameWithType: DynamicConsoleLogger.Filter
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Filter
- uid: System.Func{System.String,LogLevel,System.Boolean}
  commentId: T:System.Func{System.String,LogLevel,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<String, LogLevel, Boolean>
  nameWithType: Func<String, LogLevel, Boolean>
  fullName: System.Func<System.String, LogLevel, System.Boolean>
  nameWithType.vb: Func(Of String, LogLevel, Boolean)
  fullName.vb: System.Func(Of System.String, LogLevel, System.Boolean)
  name.vb: Func(Of String, LogLevel, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name
  name: Name
  nameWithType: DynamicConsoleLogger.Name
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log
  name: Log
  nameWithType: DynamicConsoleLogger.Log
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.Log
- uid: EventId
  commentId: '!:EventId'
  isExternal: true
  name: EventId
  nameWithType: EventId
  fullName: EventId
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Func{{TState},System.Exception,System.String}
  commentId: T:System.Func{``0,System.Exception,System.String}
  parent: System
  definition: System.Func`3
  name: Func<TState, Exception, String>
  nameWithType: Func<TState, Exception, String>
  fullName: System.Func<TState, System.Exception, System.String>
  nameWithType.vb: Func(Of TState, Exception, String)
  fullName.vb: System.Func(Of TState, System.Exception, System.String)
  name.vb: Func(Of TState, Exception, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage*
  commentId: Overload:Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage
  name: WriteMessage
  nameWithType: DynamicConsoleLogger.WriteMessage
  fullName: Steeltoe.Extensions.Logging.DynamicConsoleLogger.WriteMessage
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
