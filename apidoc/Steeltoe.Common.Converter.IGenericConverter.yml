### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Converter.IGenericConverter
  commentId: T:Steeltoe.Common.Converter.IGenericConverter
  id: IGenericConverter
  parent: Steeltoe.Common.Converter
  children:
  - Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
  - Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  langs:
  - csharp
  - vb
  name: IGenericConverter
  nameWithType: IGenericConverter
  fullName: Steeltoe.Common.Converter.IGenericConverter
  type: Interface
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IGenericConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IGenericConverter
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IGenericConverter.cs
    startLine: 12
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nGeneric converter interface for converting between two or more types\n"
  example: []
  syntax:
    content: public interface IGenericConverter
    content.vb: Public Interface IGenericConverter
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  commentId: P:Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  id: ConvertibleTypes
  parent: Steeltoe.Common.Converter.IGenericConverter
  langs:
  - csharp
  - vb
  name: ConvertibleTypes
  nameWithType: IGenericConverter.ConvertibleTypes
  fullName: Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IGenericConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertibleTypes
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IGenericConverter.cs
    startLine: 17
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nGets the source and target types this converter can convert between.\n"
  example: []
  syntax:
    content: ISet<(Type Source, Type Target)> ConvertibleTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
    content.vb: ReadOnly Property ConvertibleTypes As ISet(Of(Source As Type, Target As Type))
  overload: Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object,System.Type,System.Type)
  id: Convert(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Converter.IGenericConverter
  langs:
  - csharp
  - vb
  name: Convert(Object, Type, Type)
  nameWithType: IGenericConverter.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.IGenericConverter.Convert(System.Object, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Converter/IGenericConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Convert
    path: ../Steeltoe/src/Common/src/Abstractions/Converter/IGenericConverter.cs
    startLine: 27
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Converter
  summary: "\nConvert the source object to the target type.\n"
  example: []
  syntax:
    content: object Convert(object source, Type sourceType, Type targetType)
    parameters:
    - id: source
      type: System.Object
      description: the object to convert; the source can be null
    - id: sourceType
      type: System.Type
      description: >-
        the type of the source that should be used during the conversion.

        Can be null, and defaults to the type of the source object
    - id: targetType
      type: System.Type
      description: the type we are converting to
    return:
      type: System.Object
      description: the converted object
    content.vb: Function Convert(source As Object, sourceType As Type, targetType As Type) As Object
  overload: Steeltoe.Common.Converter.IGenericConverter.Convert*
references:
- uid: Steeltoe.Common.Converter
  commentId: N:Steeltoe.Common.Converter
  name: Steeltoe.Common.Converter
  nameWithType: Steeltoe.Common.Converter
  fullName: Steeltoe.Common.Converter
- uid: Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes*
  commentId: Overload:Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
  name: ConvertibleTypes
  nameWithType: IGenericConverter.ConvertibleTypes
  fullName: Steeltoe.Common.Converter.IGenericConverter.ConvertibleTypes
- uid: System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
  commentId: T:System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<ValueTuple<Type, Type>>
  nameWithType: ISet<ValueTuple<Type, Type>>
  fullName: System.Collections.Generic.ISet<System.ValueTuple<System.Type, System.Type>>
  nameWithType.vb: ISet(Of ValueTuple(Of Type, Type))
  fullName.vb: System.Collections.Generic.ISet(Of System.ValueTuple(Of System.Type, System.Type))
  name.vb: ISet(Of ValueTuple(Of Type, Type))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Common.Converter.IGenericConverter.Convert*
  commentId: Overload:Steeltoe.Common.Converter.IGenericConverter.Convert
  name: Convert
  nameWithType: IGenericConverter.Convert
  fullName: Steeltoe.Common.Converter.IGenericConverter.Convert
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
