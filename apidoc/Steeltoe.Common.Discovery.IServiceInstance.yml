### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Discovery.IServiceInstance
  commentId: T:Steeltoe.Common.Discovery.IServiceInstance
  id: IServiceInstance
  parent: Steeltoe.Common.Discovery
  children:
  - Steeltoe.Common.Discovery.IServiceInstance.Host
  - Steeltoe.Common.Discovery.IServiceInstance.IsSecure
  - Steeltoe.Common.Discovery.IServiceInstance.Metadata
  - Steeltoe.Common.Discovery.IServiceInstance.Port
  - Steeltoe.Common.Discovery.IServiceInstance.ServiceId
  - Steeltoe.Common.Discovery.IServiceInstance.Uri
  langs:
  - csharp
  - vb
  name: IServiceInstance
  nameWithType: IServiceInstance
  fullName: Steeltoe.Common.Discovery.IServiceInstance
  type: Interface
  source:
    remote:
      path: src/Common/src/Abstractions/Discovery/IServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IServiceInstance
    path: ../Steeltoe/src/Common/src/Abstractions/Discovery/IServiceInstance.cs
    startLine: 9
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Discovery
  syntax:
    content: public interface IServiceInstance
    content.vb: Public Interface IServiceInstance
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Common.Discovery.IServiceInstance.ServiceId
  commentId: P:Steeltoe.Common.Discovery.IServiceInstance.ServiceId
  id: ServiceId
  parent: Steeltoe.Common.Discovery.IServiceInstance
  langs:
  - csharp
  - vb
  name: ServiceId
  nameWithType: IServiceInstance.ServiceId
  fullName: Steeltoe.Common.Discovery.IServiceInstance.ServiceId
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Discovery/IServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceId
    path: ../Steeltoe/src/Common/src/Abstractions/Discovery/IServiceInstance.cs
    startLine: 14
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Discovery
  summary: "\nGets the service id as register by the DiscoveryClient\n"
  example: []
  syntax:
    content: string ServiceId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ServiceId As String
  overload: Steeltoe.Common.Discovery.IServiceInstance.ServiceId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Common.Discovery.IServiceInstance.Host
  commentId: P:Steeltoe.Common.Discovery.IServiceInstance.Host
  id: Host
  parent: Steeltoe.Common.Discovery.IServiceInstance
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: IServiceInstance.Host
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Host
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Discovery/IServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Host
    path: ../Steeltoe/src/Common/src/Abstractions/Discovery/IServiceInstance.cs
    startLine: 19
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Discovery
  summary: "\nGets the hostname of the registered ServiceInstance\n"
  example: []
  syntax:
    content: string Host { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Host As String
  overload: Steeltoe.Common.Discovery.IServiceInstance.Host*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Common.Discovery.IServiceInstance.Port
  commentId: P:Steeltoe.Common.Discovery.IServiceInstance.Port
  id: Port
  parent: Steeltoe.Common.Discovery.IServiceInstance
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: IServiceInstance.Port
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Port
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Discovery/IServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Port
    path: ../Steeltoe/src/Common/src/Abstractions/Discovery/IServiceInstance.cs
    startLine: 24
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Discovery
  summary: "\nGets the port of the registered ServiceInstance\n"
  example: []
  syntax:
    content: int Port { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Port As Integer
  overload: Steeltoe.Common.Discovery.IServiceInstance.Port*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Common.Discovery.IServiceInstance.IsSecure
  commentId: P:Steeltoe.Common.Discovery.IServiceInstance.IsSecure
  id: IsSecure
  parent: Steeltoe.Common.Discovery.IServiceInstance
  langs:
  - csharp
  - vb
  name: IsSecure
  nameWithType: IServiceInstance.IsSecure
  fullName: Steeltoe.Common.Discovery.IServiceInstance.IsSecure
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Discovery/IServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsSecure
    path: ../Steeltoe/src/Common/src/Abstractions/Discovery/IServiceInstance.cs
    startLine: 29
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Discovery
  summary: "\nGets a value indicating whether if the port of the registered ServiceInstance is https or not\n"
  example: []
  syntax:
    content: bool IsSecure { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsSecure As Boolean
  overload: Steeltoe.Common.Discovery.IServiceInstance.IsSecure*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Common.Discovery.IServiceInstance.Uri
  commentId: P:Steeltoe.Common.Discovery.IServiceInstance.Uri
  id: Uri
  parent: Steeltoe.Common.Discovery.IServiceInstance
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: IServiceInstance.Uri
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Uri
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Discovery/IServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Uri
    path: ../Steeltoe/src/Common/src/Abstractions/Discovery/IServiceInstance.cs
    startLine: 34
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Discovery
  summary: "\nGets the service uri address\n"
  example: []
  syntax:
    content: Uri Uri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: ReadOnly Property Uri As Uri
  overload: Steeltoe.Common.Discovery.IServiceInstance.Uri*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Common.Discovery.IServiceInstance.Metadata
  commentId: P:Steeltoe.Common.Discovery.IServiceInstance.Metadata
  id: Metadata
  parent: Steeltoe.Common.Discovery.IServiceInstance
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: IServiceInstance.Metadata
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Metadata
  type: Property
  source:
    remote:
      path: src/Common/src/Abstractions/Discovery/IServiceInstance.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Metadata
    path: ../Steeltoe/src/Common/src/Abstractions/Discovery/IServiceInstance.cs
    startLine: 39
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Discovery
  summary: "\nGets the key value pair metadata associated with the service instance\n"
  example: []
  syntax:
    content: IDictionary<string, string> Metadata { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: ReadOnly Property Metadata As IDictionary(Of String, String)
  overload: Steeltoe.Common.Discovery.IServiceInstance.Metadata*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Steeltoe.Common.Discovery
  commentId: N:Steeltoe.Common.Discovery
  name: Steeltoe.Common.Discovery
  nameWithType: Steeltoe.Common.Discovery
  fullName: Steeltoe.Common.Discovery
- uid: Steeltoe.Common.Discovery.IServiceInstance.ServiceId*
  commentId: Overload:Steeltoe.Common.Discovery.IServiceInstance.ServiceId
  name: ServiceId
  nameWithType: IServiceInstance.ServiceId
  fullName: Steeltoe.Common.Discovery.IServiceInstance.ServiceId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Discovery.IServiceInstance.Host*
  commentId: Overload:Steeltoe.Common.Discovery.IServiceInstance.Host
  name: Host
  nameWithType: IServiceInstance.Host
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Host
- uid: Steeltoe.Common.Discovery.IServiceInstance.Port*
  commentId: Overload:Steeltoe.Common.Discovery.IServiceInstance.Port
  name: Port
  nameWithType: IServiceInstance.Port
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Port
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Steeltoe.Common.Discovery.IServiceInstance.IsSecure*
  commentId: Overload:Steeltoe.Common.Discovery.IServiceInstance.IsSecure
  name: IsSecure
  nameWithType: IServiceInstance.IsSecure
  fullName: Steeltoe.Common.Discovery.IServiceInstance.IsSecure
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Discovery.IServiceInstance.Uri*
  commentId: Overload:Steeltoe.Common.Discovery.IServiceInstance.Uri
  name: Uri
  nameWithType: IServiceInstance.Uri
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Uri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Steeltoe.Common.Discovery.IServiceInstance.Metadata*
  commentId: Overload:Steeltoe.Common.Discovery.IServiceInstance.Metadata
  name: Metadata
  nameWithType: IServiceInstance.Metadata
  fullName: Steeltoe.Common.Discovery.IServiceInstance.Metadata
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
