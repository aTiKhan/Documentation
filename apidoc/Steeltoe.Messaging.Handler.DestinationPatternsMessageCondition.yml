### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  commentId: T:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  id: DestinationPatternsMessageCondition
  parent: Steeltoe.Messaging.Handler
  children:
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[])
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[],Steeltoe.Common.Util.IPathMatcher)
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[],Steeltoe.Common.Util.IRouteMatcher)
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER
  - Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns
  langs:
  - csharp
  - vb
  name: DestinationPatternsMessageCondition
  nameWithType: DestinationPatternsMessageCondition
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DestinationPatternsMessageCondition
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 11
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: 'public class DestinationPatternsMessageCondition : AbstractMessageCondition<DestinationPatternsMessageCondition>, IMessageCondition<DestinationPatternsMessageCondition>, IMessageCondition'
    content.vb: >-
      Public Class DestinationPatternsMessageCondition

          Inherits AbstractMessageCondition(Of DestinationPatternsMessageCondition)

          Implements IMessageCondition(Of DestinationPatternsMessageCondition), IMessageCondition
  inheritance:
  - System.Object
  - Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  implements:
  - Steeltoe.Messaging.Handler.IMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  - Steeltoe.Messaging.Handler.IMessageCondition
  inheritedMembers:
  - Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.Equals(System.Object)
  - Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetHashCode
  - Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER
  commentId: F:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER
  id: LOOKUP_DESTINATION_HEADER
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: LOOKUP_DESTINATION_HEADER
  nameWithType: DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER
  type: Field
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: LOOKUP_DESTINATION_HEADER
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public const string LOOKUP_DESTINATION_HEADER = "lookupDestination"
    return:
      type: System.String
    content.vb: Public Const LOOKUP_DESTINATION_HEADER As String = "lookupDestination"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[])
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: DestinationPatternsMessageCondition(String[])
  nameWithType: DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(String[])
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(System.String[])
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 16
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public DestinationPatternsMessageCondition(params string[] patterns)
    parameters:
    - id: patterns
      type: System.String[]
    content.vb: Public Sub New(ParamArray patterns As String())
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor*
  nameWithType.vb: DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(System.String())
  name.vb: DestinationPatternsMessageCondition(String())
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[],Steeltoe.Common.Util.IPathMatcher)
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[],Steeltoe.Common.Util.IPathMatcher)
  id: '#ctor(System.String[],Steeltoe.Common.Util.IPathMatcher)'
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: DestinationPatternsMessageCondition(String[], IPathMatcher)
  nameWithType: DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(String[], IPathMatcher)
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(System.String[], Steeltoe.Common.Util.IPathMatcher)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 21
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public DestinationPatternsMessageCondition(string[] patterns, IPathMatcher matcher)
    parameters:
    - id: patterns
      type: System.String[]
    - id: matcher
      type: Steeltoe.Common.Util.IPathMatcher
    content.vb: Public Sub New(patterns As String(), matcher As IPathMatcher)
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor*
  nameWithType.vb: DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(String(), IPathMatcher)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(System.String(), Steeltoe.Common.Util.IPathMatcher)
  name.vb: DestinationPatternsMessageCondition(String(), IPathMatcher)
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[],Steeltoe.Common.Util.IRouteMatcher)
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor(System.String[],Steeltoe.Common.Util.IRouteMatcher)
  id: '#ctor(System.String[],Steeltoe.Common.Util.IRouteMatcher)'
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: DestinationPatternsMessageCondition(String[], IRouteMatcher)
  nameWithType: DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(String[], IRouteMatcher)
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(System.String[], Steeltoe.Common.Util.IRouteMatcher)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 26
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public DestinationPatternsMessageCondition(string[] patterns, IRouteMatcher routeMatcher)
    parameters:
    - id: patterns
      type: System.String[]
    - id: routeMatcher
      type: Steeltoe.Common.Util.IRouteMatcher
    content.vb: Public Sub New(patterns As String(), routeMatcher As IRouteMatcher)
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor*
  nameWithType.vb: DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(String(), IRouteMatcher)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.DestinationPatternsMessageCondition(System.String(), Steeltoe.Common.Util.IRouteMatcher)
  name.vb: DestinationPatternsMessageCondition(String(), IRouteMatcher)
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns
  commentId: P:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns
  id: Patterns
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: Patterns
  nameWithType: DestinationPatternsMessageCondition.Patterns
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Patterns
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 55
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public ISet<string> Patterns { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ISet{System.String}
    content.vb: Public ReadOnly Property Patterns As ISet(Of String)
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  id: Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: Combine(DestinationPatternsMessageCondition)
  nameWithType: DestinationPatternsMessageCondition.Combine(DestinationPatternsMessageCondition)
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Combine
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 57
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public override DestinationPatternsMessageCondition Combine(DestinationPatternsMessageCondition other)
    parameters:
    - id: other
      type: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    return:
      type: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    content.vb: Public Overrides Function Combine(other As DestinationPatternsMessageCondition) As DestinationPatternsMessageCondition
  overridden: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  id: GetMatchingCondition(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: GetMatchingCondition(IMessage)
  nameWithType: DestinationPatternsMessageCondition.GetMatchingCondition(IMessage)
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMatchingCondition
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 86
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public override DestinationPatternsMessageCondition GetMatchingCondition(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    content.vb: Public Overrides Function GetMatchingCondition(message As IMessage) As DestinationPatternsMessageCondition
  overridden: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition,Steeltoe.Messaging.IMessage)
  id: CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: CompareTo(DestinationPatternsMessageCondition, IMessage)
  nameWithType: DestinationPatternsMessageCondition.CompareTo(DestinationPatternsMessageCondition, IMessage)
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CompareTo
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 122
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: public override int CompareTo(DestinationPatternsMessageCondition other, IMessage message)
    parameters:
    - id: other
      type: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: System.Int32
    content.vb: Public Overrides Function CompareTo(other As DestinationPatternsMessageCondition, message As IMessage) As Integer
  overridden: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition,Steeltoe.Messaging.IMessage)
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent
  id: GetContent
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: GetContent()
  nameWithType: DestinationPatternsMessageCondition.GetContent()
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent()
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetContent
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 156
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: protected override IList GetContent()
    return:
      type: System.Collections.IList
    content.vb: Protected Overrides Function GetContent As IList
  overridden: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetContent
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix
  commentId: M:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix
  id: GetToStringInfix
  parent: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  langs:
  - csharp
  - vb
  name: GetToStringInfix()
  nameWithType: DestinationPatternsMessageCondition.GetToStringInfix()
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix()
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetToStringInfix
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/DestinationPatternsMessageCondition.cs
    startLine: 161
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler
  syntax:
    content: protected override string GetToStringInfix()
    return:
      type: System.String
    content.vb: Protected Overrides Function GetToStringInfix As String
  overridden: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetToStringInfix
  overload: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Steeltoe.Messaging.Handler
  commentId: N:Steeltoe.Messaging.Handler
  name: Steeltoe.Messaging.Handler
  nameWithType: Steeltoe.Messaging.Handler
  fullName: Steeltoe.Messaging.Handler
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  commentId: T:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  parent: Steeltoe.Messaging.Handler
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1
  name: AbstractMessageCondition<DestinationPatternsMessageCondition>
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  name.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1
    name: AbstractMessageCondition
    nameWithType: AbstractMessageCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1
    name: AbstractMessageCondition
    nameWithType: AbstractMessageCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.IMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  commentId: T:Steeltoe.Messaging.Handler.IMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  parent: Steeltoe.Messaging.Handler
  definition: Steeltoe.Messaging.Handler.IMessageCondition`1
  name: IMessageCondition<DestinationPatternsMessageCondition>
  nameWithType: IMessageCondition<DestinationPatternsMessageCondition>
  fullName: Steeltoe.Messaging.Handler.IMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>
  nameWithType.vb: IMessageCondition(Of DestinationPatternsMessageCondition)
  fullName.vb: Steeltoe.Messaging.Handler.IMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  name.vb: IMessageCondition(Of DestinationPatternsMessageCondition)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.IMessageCondition`1
    name: IMessageCondition
    nameWithType: IMessageCondition
    fullName: Steeltoe.Messaging.Handler.IMessageCondition
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.IMessageCondition`1
    name: IMessageCondition
    nameWithType: IMessageCondition
    fullName: Steeltoe.Messaging.Handler.IMessageCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.IMessageCondition
  commentId: T:Steeltoe.Messaging.Handler.IMessageCondition
  parent: Steeltoe.Messaging.Handler
  name: IMessageCondition
  nameWithType: IMessageCondition
  fullName: Steeltoe.Messaging.Handler.IMessageCondition
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.Equals(System.Object)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.Equals(System.Object)
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Equals(System.Object)
  name: Equals(Object)
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.Equals(Object)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.Equals(System.Object)
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).Equals(Object)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).Equals(System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Equals(System.Object)
    name: Equals
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.Equals
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Equals(System.Object)
    name: Equals
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).Equals
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetHashCode
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetHashCode
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetHashCode
  name: GetHashCode()
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetHashCode()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetHashCode()
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetHashCode()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetHashCode()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetHashCode
    name: GetHashCode
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetHashCode
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetHashCode
    name: GetHashCode
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetHashCode
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.ToString
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.ToString
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.ToString
  name: ToString()
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.ToString()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.ToString()
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).ToString()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).ToString()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.ToString
    name: ToString
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.ToString
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.ToString
    name: ToString
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).ToString
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1
  commentId: T:Steeltoe.Messaging.Handler.AbstractMessageCondition`1
  name: AbstractMessageCondition<T>
  nameWithType: AbstractMessageCondition<T>
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>
  nameWithType.vb: AbstractMessageCondition(Of T)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T)
  name.vb: AbstractMessageCondition(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1
    name: AbstractMessageCondition
    nameWithType: AbstractMessageCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1
    name: AbstractMessageCondition
    nameWithType: AbstractMessageCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.IMessageCondition`1
  commentId: T:Steeltoe.Messaging.Handler.IMessageCondition`1
  name: IMessageCondition<T>
  nameWithType: IMessageCondition<T>
  fullName: Steeltoe.Messaging.Handler.IMessageCondition<T>
  nameWithType.vb: IMessageCondition(Of T)
  fullName.vb: Steeltoe.Messaging.Handler.IMessageCondition(Of T)
  name.vb: IMessageCondition(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.IMessageCondition`1
    name: IMessageCondition
    nameWithType: IMessageCondition
    fullName: Steeltoe.Messaging.Handler.IMessageCondition
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.IMessageCondition`1
    name: IMessageCondition
    nameWithType: IMessageCondition
    fullName: Steeltoe.Messaging.Handler.IMessageCondition
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Equals(System.Object)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Equals(System.Object)
  isExternal: true
  name: Equals(Object)
  nameWithType: AbstractMessageCondition<T>.Equals(Object)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.Equals(System.Object)
  nameWithType.vb: AbstractMessageCondition(Of T).Equals(Object)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).Equals(System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Equals(System.Object)
    name: Equals
    nameWithType: AbstractMessageCondition<T>.Equals
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Equals(System.Object)
    name: Equals
    nameWithType: AbstractMessageCondition(Of T).Equals
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetHashCode
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetHashCode
  name: GetHashCode()
  nameWithType: AbstractMessageCondition<T>.GetHashCode()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetHashCode()
  nameWithType.vb: AbstractMessageCondition(Of T).GetHashCode()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetHashCode()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetHashCode
    name: GetHashCode
    nameWithType: AbstractMessageCondition<T>.GetHashCode
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetHashCode
    name: GetHashCode
    nameWithType: AbstractMessageCondition(Of T).GetHashCode
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.ToString
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.ToString
  name: ToString()
  nameWithType: AbstractMessageCondition<T>.ToString()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.ToString()
  nameWithType.vb: AbstractMessageCondition(Of T).ToString()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).ToString()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.ToString
    name: ToString
    nameWithType: AbstractMessageCondition<T>.ToString
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.ToString
    name: ToString
    nameWithType: AbstractMessageCondition(Of T).ToString
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor*
  commentId: Overload:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.#ctor
  name: DestinationPatternsMessageCondition
  nameWithType: DestinationPatternsMessageCondition.DestinationPatternsMessageCondition
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.DestinationPatternsMessageCondition
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Common.Util.IPathMatcher
  commentId: T:Steeltoe.Common.Util.IPathMatcher
  parent: Steeltoe.Common.Util
  name: IPathMatcher
  nameWithType: IPathMatcher
  fullName: Steeltoe.Common.Util.IPathMatcher
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: Steeltoe.Common.Util.IRouteMatcher
  commentId: T:Steeltoe.Common.Util.IRouteMatcher
  parent: Steeltoe.Common.Util
  name: IRouteMatcher
  nameWithType: IRouteMatcher
  fullName: Steeltoe.Common.Util.IRouteMatcher
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns*
  commentId: Overload:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns
  name: Patterns
  nameWithType: DestinationPatternsMessageCondition.Patterns
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Patterns
- uid: System.Collections.Generic.ISet{System.String}
  commentId: T:System.Collections.Generic.ISet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<String>
  nameWithType: ISet<String>
  fullName: System.Collections.Generic.ISet<System.String>
  nameWithType.vb: ISet(Of String)
  fullName.vb: System.Collections.Generic.ISet(Of System.String)
  name.vb: ISet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Combine(`0)
  name: Combine(DestinationPatternsMessageCondition)
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.Combine(DestinationPatternsMessageCondition)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).Combine(DestinationPatternsMessageCondition)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).Combine(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Combine(`0)
    name: Combine
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.Combine
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.Combine
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Combine(`0)
    name: Combine
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).Combine
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).Combine
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine*
  commentId: Overload:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine
  name: Combine
  nameWithType: DestinationPatternsMessageCondition.Combine
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.Combine
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  commentId: T:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  parent: Steeltoe.Messaging.Handler
  name: DestinationPatternsMessageCondition
  nameWithType: DestinationPatternsMessageCondition
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Combine(`0)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Combine(`0)
  name: Combine(T)
  nameWithType: AbstractMessageCondition<T>.Combine(T)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.Combine(T)
  nameWithType.vb: AbstractMessageCondition(Of T).Combine(T)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).Combine(T)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Combine(`0)
    name: Combine
    nameWithType: AbstractMessageCondition<T>.Combine
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.Combine
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.Combine(`0)
    name: Combine
    nameWithType: AbstractMessageCondition(Of T).Combine
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).Combine
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  name: GetMatchingCondition(IMessage)
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetMatchingCondition(IMessage)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetMatchingCondition(IMessage)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetMatchingCondition(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetMatchingCondition(Steeltoe.Messaging.IMessage)
    name: GetMatchingCondition
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetMatchingCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetMatchingCondition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetMatchingCondition(Steeltoe.Messaging.IMessage)
    name: GetMatchingCondition
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetMatchingCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetMatchingCondition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition*
  commentId: Overload:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition
  name: GetMatchingCondition
  nameWithType: DestinationPatternsMessageCondition.GetMatchingCondition
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetMatchingCondition
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  name: GetMatchingCondition(IMessage)
  nameWithType: AbstractMessageCondition<T>.GetMatchingCondition(IMessage)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetMatchingCondition(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageCondition(Of T).GetMatchingCondition(IMessage)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetMatchingCondition(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetMatchingCondition(Steeltoe.Messaging.IMessage)
    name: GetMatchingCondition
    nameWithType: AbstractMessageCondition<T>.GetMatchingCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetMatchingCondition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetMatchingCondition(Steeltoe.Messaging.IMessage)
    name: GetMatchingCondition
    nameWithType: AbstractMessageCondition(Of T).GetMatchingCondition
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetMatchingCondition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.CompareTo(`0,Steeltoe.Messaging.IMessage)
  name: CompareTo(DestinationPatternsMessageCondition, IMessage)
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.CompareTo(DestinationPatternsMessageCondition, IMessage)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).CompareTo(DestinationPatternsMessageCondition, IMessage)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).CompareTo(Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.CompareTo(`0,Steeltoe.Messaging.IMessage)
    name: CompareTo
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.CompareTo
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.CompareTo(`0,Steeltoe.Messaging.IMessage)
    name: CompareTo
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).CompareTo
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
    name: DestinationPatternsMessageCondition
    nameWithType: DestinationPatternsMessageCondition
    fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo*
  commentId: Overload:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo
  name: CompareTo
  nameWithType: DestinationPatternsMessageCondition.CompareTo
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.CompareTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.CompareTo(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.CompareTo(`0,Steeltoe.Messaging.IMessage)
  name: CompareTo(T, IMessage)
  nameWithType: AbstractMessageCondition<T>.CompareTo(T, IMessage)
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.CompareTo(T, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageCondition(Of T).CompareTo(T, IMessage)
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).CompareTo(T, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.CompareTo(`0,Steeltoe.Messaging.IMessage)
    name: CompareTo
    nameWithType: AbstractMessageCondition<T>.CompareTo
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.CompareTo(`0,Steeltoe.Messaging.IMessage)
    name: CompareTo
    nameWithType: AbstractMessageCondition(Of T).CompareTo
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetContent
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetContent
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetContent
  name: GetContent()
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetContent()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetContent()
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetContent()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetContent()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetContent
    name: GetContent
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetContent
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetContent
    name: GetContent
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetContent
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetContent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent*
  commentId: Overload:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent
  name: GetContent
  nameWithType: DestinationPatternsMessageCondition.GetContent
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetContent
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetContent
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetContent
  name: GetContent()
  nameWithType: AbstractMessageCondition<T>.GetContent()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetContent()
  nameWithType.vb: AbstractMessageCondition(Of T).GetContent()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetContent()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetContent
    name: GetContent
    nameWithType: AbstractMessageCondition<T>.GetContent
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetContent
    name: GetContent
    nameWithType: AbstractMessageCondition(Of T).GetContent
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetContent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetToStringInfix
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}.GetToStringInfix
  parent: Steeltoe.Messaging.Handler.AbstractMessageCondition{Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition}
  definition: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetToStringInfix
  name: GetToStringInfix()
  nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetToStringInfix()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetToStringInfix()
  nameWithType.vb: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetToStringInfix()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetToStringInfix()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetToStringInfix
    name: GetToStringInfix
    nameWithType: AbstractMessageCondition<DestinationPatternsMessageCondition>.GetToStringInfix
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition>.GetToStringInfix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetToStringInfix
    name: GetToStringInfix
    nameWithType: AbstractMessageCondition(Of DestinationPatternsMessageCondition).GetToStringInfix
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition).GetToStringInfix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix*
  commentId: Overload:Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix
  name: GetToStringInfix
  nameWithType: DestinationPatternsMessageCondition.GetToStringInfix
  fullName: Steeltoe.Messaging.Handler.DestinationPatternsMessageCondition.GetToStringInfix
- uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetToStringInfix
  commentId: M:Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetToStringInfix
  name: GetToStringInfix()
  nameWithType: AbstractMessageCondition<T>.GetToStringInfix()
  fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetToStringInfix()
  nameWithType.vb: AbstractMessageCondition(Of T).GetToStringInfix()
  fullName.vb: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetToStringInfix()
  spec.csharp:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetToStringInfix
    name: GetToStringInfix
    nameWithType: AbstractMessageCondition<T>.GetToStringInfix
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition<T>.GetToStringInfix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Handler.AbstractMessageCondition`1.GetToStringInfix
    name: GetToStringInfix
    nameWithType: AbstractMessageCondition(Of T).GetToStringInfix
    fullName: Steeltoe.Messaging.Handler.AbstractMessageCondition(Of T).GetToStringInfix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
