### YamlMime:ManagedReference
items:
- uid: Steeltoe.Stream.Binder.IBindingCleaner
  commentId: T:Steeltoe.Stream.Binder.IBindingCleaner
  id: IBindingCleaner
  parent: Steeltoe.Stream.Binder
  children:
  - Steeltoe.Stream.Binder.IBindingCleaner.Clean(System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: IBindingCleaner
  nameWithType: IBindingCleaner
  fullName: Steeltoe.Stream.Binder.IBindingCleaner
  type: Interface
  source:
    remote:
      path: src/Stream/src/Abstractions/Binder/IBindingCleaner.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IBindingCleaner
    path: ../Steeltoe/src/Stream/src/Abstractions/Binder/IBindingCleaner.cs
    startLine: 11
  assemblies:
  - Steeltoe.Stream.Abstractions
  namespace: Steeltoe.Stream.Binder
  summary: "\nTODO: See if this can be made internal\n"
  example: []
  syntax:
    content: public interface IBindingCleaner
    content.vb: Public Interface IBindingCleaner
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Stream.Binder.IBindingCleaner.Clean(System.String,System.Boolean)
  commentId: M:Steeltoe.Stream.Binder.IBindingCleaner.Clean(System.String,System.Boolean)
  id: Clean(System.String,System.Boolean)
  parent: Steeltoe.Stream.Binder.IBindingCleaner
  langs:
  - csharp
  - vb
  name: Clean(String, Boolean)
  nameWithType: IBindingCleaner.Clean(String, Boolean)
  fullName: Steeltoe.Stream.Binder.IBindingCleaner.Clean(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Stream/src/Abstractions/Binder/IBindingCleaner.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Clean
    path: ../Steeltoe/src/Stream/src/Abstractions/Binder/IBindingCleaner.cs
    startLine: 13
  assemblies:
  - Steeltoe.Stream.Abstractions
  namespace: Steeltoe.Stream.Binder
  syntax:
    content: IDictionary<string, List<string>> Clean(string entity, bool isJob)
    parameters:
    - id: entity
      type: System.String
    - id: isJob
      type: System.Boolean
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
    content.vb: Function Clean(entity As String, isJob As Boolean) As IDictionary(Of String, List(Of String))
  overload: Steeltoe.Stream.Binder.IBindingCleaner.Clean*
references:
- uid: Steeltoe.Stream.Binder
  commentId: N:Steeltoe.Stream.Binder
  name: Steeltoe.Stream.Binder
  nameWithType: Steeltoe.Stream.Binder
  fullName: Steeltoe.Stream.Binder
- uid: Steeltoe.Stream.Binder.IBindingCleaner.Clean*
  commentId: Overload:Steeltoe.Stream.Binder.IBindingCleaner.Clean
  name: Clean
  nameWithType: IBindingCleaner.Clean
  fullName: Steeltoe.Stream.Binder.IBindingCleaner.Clean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, List<String>>
  nameWithType: IDictionary<String, List<String>>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.List<System.String>>
  nameWithType.vb: IDictionary(Of String, List(Of String))
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Collections.Generic.List(Of System.String))
  name.vb: IDictionary(Of String, List(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
