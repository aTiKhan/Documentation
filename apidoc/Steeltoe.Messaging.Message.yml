### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Message
  commentId: T:Steeltoe.Messaging.Message
  id: Message
  parent: Steeltoe.Messaging
  children:
  - Steeltoe.Messaging.Message.Create(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  - Steeltoe.Messaging.Message.Create(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type)
  - Steeltoe.Messaging.Message.Create(System.Object,System.Type)
  - Steeltoe.Messaging.Message.Create``1(``0)
  - Steeltoe.Messaging.Message.Create``1(``0,Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Message.Create``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: Message
  fullName: Steeltoe.Messaging.Message
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Message.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Message
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Message.cs
    startLine: 12
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging
  syntax:
    content: public static class Message
    content.vb: Public Module Message
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Messaging.Message.Create``1(``0)
  commentId: M:Steeltoe.Messaging.Message.Create``1(``0)
  id: Create``1(``0)
  parent: Steeltoe.Messaging.Message
  langs:
  - csharp
  - vb
  name: Create<T>(T)
  nameWithType: Message.Create<T>(T)
  fullName: Steeltoe.Messaging.Message.Create<T>(T)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Message.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Create
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Message.cs
    startLine: 14
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging
  syntax:
    content: public static IMessage<T> Create<T>(T payload)
    parameters:
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: Steeltoe.Messaging.IMessage{{T}}
    content.vb: Public Shared Function Create(Of T)(payload As T) As IMessage(Of T)
  overload: Steeltoe.Messaging.Message.Create*
  nameWithType.vb: Message.Create(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.Message.Create(Of T)(T)
  name.vb: Create(Of T)(T)
- uid: Steeltoe.Messaging.Message.Create``1(``0,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Message.Create``1(``0,Steeltoe.Messaging.IMessageHeaders)
  id: Create``1(``0,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Message
  langs:
  - csharp
  - vb
  name: Create<T>(T, IMessageHeaders)
  nameWithType: Message.Create<T>(T, IMessageHeaders)
  fullName: Steeltoe.Messaging.Message.Create<T>(T, Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Message.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Create
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Message.cs
    startLine: 19
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging
  syntax:
    content: public static IMessage<T> Create<T>(T payload, IMessageHeaders headers)
    parameters:
    - id: payload
      type: '{T}'
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    typeParameters:
    - id: T
    return:
      type: Steeltoe.Messaging.IMessage{{T}}
    content.vb: Public Shared Function Create(Of T)(payload As T, headers As IMessageHeaders) As IMessage(Of T)
  overload: Steeltoe.Messaging.Message.Create*
  nameWithType.vb: Message.Create(Of T)(T, IMessageHeaders)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.Message.Create(Of T)(T, Steeltoe.Messaging.IMessageHeaders)
  name.vb: Create(Of T)(T, IMessageHeaders)
- uid: Steeltoe.Messaging.Message.Create``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Message.Create``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Create``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Message
  langs:
  - csharp
  - vb
  name: Create<T>(T, IDictionary<String, Object>)
  nameWithType: Message.Create<T>(T, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Message.Create<T>(T, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Message.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Create
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Message.cs
    startLine: 31
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging
  syntax:
    content: public static IMessage<T> Create<T>(T payload, IDictionary<string, object> headers)
    parameters:
    - id: payload
      type: '{T}'
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    typeParameters:
    - id: T
    return:
      type: Steeltoe.Messaging.IMessage{{T}}
    content.vb: Public Shared Function Create(Of T)(payload As T, headers As IDictionary(Of String, Object)) As IMessage(Of T)
  overload: Steeltoe.Messaging.Message.Create*
  nameWithType.vb: Message.Create(Of T)(T, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.Message.Create(Of T)(T, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Create(Of T)(T, IDictionary(Of String, Object))
- uid: Steeltoe.Messaging.Message.Create(System.Object,System.Type)
  commentId: M:Steeltoe.Messaging.Message.Create(System.Object,System.Type)
  id: Create(System.Object,System.Type)
  parent: Steeltoe.Messaging.Message
  langs:
  - csharp
  - vb
  name: Create(Object, Type)
  nameWithType: Message.Create(Object, Type)
  fullName: Steeltoe.Messaging.Message.Create(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Message.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Create
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Message.cs
    startLine: 36
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging
  syntax:
    content: public static IMessage Create(object payload, Type messageType = null)
    parameters:
    - id: payload
      type: System.Object
    - id: messageType
      type: System.Type
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Shared Function Create(payload As Object, messageType As Type = Nothing) As IMessage
  overload: Steeltoe.Messaging.Message.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.Message.Create(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  commentId: M:Steeltoe.Messaging.Message.Create(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  id: Create(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  parent: Steeltoe.Messaging.Message
  langs:
  - csharp
  - vb
  name: Create(Object, IMessageHeaders, Type)
  nameWithType: Message.Create(Object, IMessageHeaders, Type)
  fullName: Steeltoe.Messaging.Message.Create(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Message.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Create
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Message.cs
    startLine: 50
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging
  syntax:
    content: public static IMessage Create(object payload, IMessageHeaders headers, Type messageType = null)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: messageType
      type: System.Type
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Shared Function Create(payload As Object, headers As IMessageHeaders, messageType As Type = Nothing) As IMessage
  overload: Steeltoe.Messaging.Message.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.Message.Create(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type)
  commentId: M:Steeltoe.Messaging.Message.Create(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type)
  id: Create(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type)
  parent: Steeltoe.Messaging.Message
  langs:
  - csharp
  - vb
  name: Create(Object, IDictionary<String, Object>, Type)
  nameWithType: Message.Create(Object, IDictionary<String, Object>, Type)
  fullName: Steeltoe.Messaging.Message.Create(System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Message.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Create
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Message.cs
    startLine: 64
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging
  syntax:
    content: public static IMessage Create(object payload, IDictionary<string, object> headers, Type messageType = null)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    - id: messageType
      type: System.Type
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Shared Function Create(payload As Object, headers As IDictionary(Of String, Object), messageType As Type = Nothing) As IMessage
  overload: Steeltoe.Messaging.Message.Create*
  nameWithType.vb: Message.Create(Object, IDictionary(Of String, Object), Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.Message.Create(System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Type)
  name.vb: Create(Object, IDictionary(Of String, Object), Type)
references:
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Message.Create*
  commentId: Overload:Steeltoe.Messaging.Message.Create
  name: Create
  nameWithType: Message.Create
  fullName: Steeltoe.Messaging.Message.Create
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.IMessage{{T}}
  commentId: T:Steeltoe.Messaging.IMessage{``0}
  parent: Steeltoe.Messaging
  definition: Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.IMessage`1
  commentId: T:Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
