### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.SubclassClassifier`2
  commentId: T:Steeltoe.Common.Util.SubclassClassifier`2
  id: SubclassClassifier`2
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.SubclassClassifier`2.#ctor
  - Steeltoe.Common.Util.SubclassClassifier`2.#ctor(`1)
  - Steeltoe.Common.Util.SubclassClassifier`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,`1},`1)
  - Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
  - Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue
  - Steeltoe.Common.Util.SubclassClassifier`2.TypeMap
  langs:
  - csharp
  - vb
  name: SubclassClassifier<T, C>
  nameWithType: SubclassClassifier<T, C>
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Util/SubclassClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SubclassClassifier
    path: ../Steeltoe/src/Common/src/Common/Util/SubclassClassifier.cs
    startLine: 9
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: 'public class SubclassClassifier<T, C> : IClassifier<T, C>'
    typeParameters:
    - id: T
    - id: C
    content.vb: >-
      Public Class SubclassClassifier(Of T, C)

          Implements IClassifier(Of T, C)
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Common.Util.BinaryExceptionClassifier
  implements:
  - Steeltoe.Common.Util.IClassifier{{T},{C}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: SubclassClassifier(Of T, C)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C)
  name.vb: SubclassClassifier(Of T, C)
- uid: Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue
  commentId: P:Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue
  id: DefaultValue
  parent: Steeltoe.Common.Util.SubclassClassifier`2
  langs:
  - csharp
  - vb
  name: DefaultValue
  nameWithType: SubclassClassifier<T, C>.DefaultValue
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.DefaultValue
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/SubclassClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DefaultValue
    path: ../Steeltoe/src/Common/src/Common/Util/SubclassClassifier.cs
    startLine: 11
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public C DefaultValue { get; set; }
    parameters: []
    return:
      type: '{C}'
    content.vb: Public Property DefaultValue As C
  overload: Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue*
  nameWithType.vb: SubclassClassifier(Of T, C).DefaultValue
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).DefaultValue
- uid: Steeltoe.Common.Util.SubclassClassifier`2.TypeMap
  commentId: P:Steeltoe.Common.Util.SubclassClassifier`2.TypeMap
  id: TypeMap
  parent: Steeltoe.Common.Util.SubclassClassifier`2
  langs:
  - csharp
  - vb
  name: TypeMap
  nameWithType: SubclassClassifier<T, C>.TypeMap
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.TypeMap
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/SubclassClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: TypeMap
    path: ../Steeltoe/src/Common/src/Common/Util/SubclassClassifier.cs
    startLine: 13
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: protected ConcurrentDictionary<Type, C> TypeMap { get; set; }
    parameters: []
    return:
      type: System.Collections.Concurrent.ConcurrentDictionary{System.Type,{C}}
    content.vb: Protected Property TypeMap As ConcurrentDictionary(Of Type, C)
  overload: Steeltoe.Common.Util.SubclassClassifier`2.TypeMap*
  nameWithType.vb: SubclassClassifier(Of T, C).TypeMap
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).TypeMap
- uid: Steeltoe.Common.Util.SubclassClassifier`2.#ctor
  commentId: M:Steeltoe.Common.Util.SubclassClassifier`2.#ctor
  id: '#ctor'
  parent: Steeltoe.Common.Util.SubclassClassifier`2
  langs:
  - csharp
  - vb
  name: SubclassClassifier()
  nameWithType: SubclassClassifier<T, C>.SubclassClassifier()
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.SubclassClassifier()
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/SubclassClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/SubclassClassifier.cs
    startLine: 15
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public SubclassClassifier()
    content.vb: Public Sub New
  overload: Steeltoe.Common.Util.SubclassClassifier`2.#ctor*
  nameWithType.vb: SubclassClassifier(Of T, C).SubclassClassifier()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).SubclassClassifier()
- uid: Steeltoe.Common.Util.SubclassClassifier`2.#ctor(`1)
  commentId: M:Steeltoe.Common.Util.SubclassClassifier`2.#ctor(`1)
  id: '#ctor(`1)'
  parent: Steeltoe.Common.Util.SubclassClassifier`2
  langs:
  - csharp
  - vb
  name: SubclassClassifier(C)
  nameWithType: SubclassClassifier<T, C>.SubclassClassifier(C)
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.SubclassClassifier(C)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/SubclassClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/SubclassClassifier.cs
    startLine: 20
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public SubclassClassifier(C defaultValue)
    parameters:
    - id: defaultValue
      type: '{C}'
    content.vb: Public Sub New(defaultValue As C)
  overload: Steeltoe.Common.Util.SubclassClassifier`2.#ctor*
  nameWithType.vb: SubclassClassifier(Of T, C).SubclassClassifier(C)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).SubclassClassifier(C)
- uid: Steeltoe.Common.Util.SubclassClassifier`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,`1},`1)
  commentId: M:Steeltoe.Common.Util.SubclassClassifier`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,`1},`1)
  id: '#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.Type,`1},`1)'
  parent: Steeltoe.Common.Util.SubclassClassifier`2
  langs:
  - csharp
  - vb
  name: SubclassClassifier(ConcurrentDictionary<Type, C>, C)
  nameWithType: SubclassClassifier<T, C>.SubclassClassifier(ConcurrentDictionary<Type, C>, C)
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.SubclassClassifier(System.Collections.Concurrent.ConcurrentDictionary<System.Type, C>, C)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/SubclassClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/SubclassClassifier.cs
    startLine: 25
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public SubclassClassifier(ConcurrentDictionary<Type, C> typeMap, C defaultValue)
    parameters:
    - id: typeMap
      type: System.Collections.Concurrent.ConcurrentDictionary{System.Type,{C}}
    - id: defaultValue
      type: '{C}'
    content.vb: Public Sub New(typeMap As ConcurrentDictionary(Of Type, C), defaultValue As C)
  overload: Steeltoe.Common.Util.SubclassClassifier`2.#ctor*
  nameWithType.vb: SubclassClassifier(Of T, C).SubclassClassifier(ConcurrentDictionary(Of Type, C), C)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).SubclassClassifier(System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, C), C)
  name.vb: SubclassClassifier(ConcurrentDictionary(Of Type, C), C)
- uid: Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
  commentId: M:Steeltoe.Common.Util.SubclassClassifier`2.Classify(`0)
  id: Classify(`0)
  parent: Steeltoe.Common.Util.SubclassClassifier`2
  langs:
  - csharp
  - vb
  name: Classify(T)
  nameWithType: SubclassClassifier<T, C>.Classify(T)
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.Classify(T)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/SubclassClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Classify
    path: ../Steeltoe/src/Common/src/Common/Util/SubclassClassifier.cs
    startLine: 32
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public virtual C Classify(T classifiable)
    parameters:
    - id: classifiable
      type: '{T}'
    return:
      type: '{C}'
    content.vb: Public Overridable Function Classify(classifiable As T) As C
  overload: Steeltoe.Common.Util.SubclassClassifier`2.Classify*
  implements:
  - Steeltoe.Common.Util.IClassifier{{T},{C}}.Classify({T})
  nameWithType.vb: SubclassClassifier(Of T, C).Classify(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).Classify(T)
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.Util.IClassifier{{T},{C}}
  commentId: T:Steeltoe.Common.Util.IClassifier{`0,`1}
  parent: Steeltoe.Common.Util
  definition: Steeltoe.Common.Util.IClassifier`2
  name: IClassifier<T, C>
  nameWithType: IClassifier<T, C>
  fullName: Steeltoe.Common.Util.IClassifier<T, C>
  nameWithType.vb: IClassifier(Of T, C)
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of T, C)
  name.vb: IClassifier(Of T, C)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Util.IClassifier`2
  commentId: T:Steeltoe.Common.Util.IClassifier`2
  name: IClassifier<C, T>
  nameWithType: IClassifier<C, T>
  fullName: Steeltoe.Common.Util.IClassifier<C, T>
  nameWithType.vb: IClassifier(Of C, T)
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of C, T)
  name.vb: IClassifier(Of C, T)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: <
    nameWithType: <
    fullName: <
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Common.Util.IClassifier`2
    name: IClassifier
    nameWithType: IClassifier
    fullName: Steeltoe.Common.Util.IClassifier
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue*
  commentId: Overload:Steeltoe.Common.Util.SubclassClassifier`2.DefaultValue
  name: DefaultValue
  nameWithType: SubclassClassifier<T, C>.DefaultValue
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.DefaultValue
  nameWithType.vb: SubclassClassifier(Of T, C).DefaultValue
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).DefaultValue
- uid: '{C}'
  commentId: '!:C'
  definition: C
  name: C
  nameWithType: C
  fullName: C
- uid: C
  name: C
  nameWithType: C
  fullName: C
- uid: Steeltoe.Common.Util.SubclassClassifier`2.TypeMap*
  commentId: Overload:Steeltoe.Common.Util.SubclassClassifier`2.TypeMap
  name: TypeMap
  nameWithType: SubclassClassifier<T, C>.TypeMap
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.TypeMap
  nameWithType.vb: SubclassClassifier(Of T, C).TypeMap
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).TypeMap
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.Type,{C}}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{System.Type,`1}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary<Type, C>
  nameWithType: ConcurrentDictionary<Type, C>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.Type, C>
  nameWithType.vb: ConcurrentDictionary(Of Type, C)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, C)
  name.vb: ConcurrentDictionary(Of Type, C)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: Steeltoe.Common.Util.SubclassClassifier`2.#ctor*
  commentId: Overload:Steeltoe.Common.Util.SubclassClassifier`2.#ctor
  name: SubclassClassifier
  nameWithType: SubclassClassifier<T, C>.SubclassClassifier
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.SubclassClassifier
  nameWithType.vb: SubclassClassifier(Of T, C).SubclassClassifier
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).SubclassClassifier
- uid: Steeltoe.Common.Util.SubclassClassifier`2.Classify*
  commentId: Overload:Steeltoe.Common.Util.SubclassClassifier`2.Classify
  name: Classify
  nameWithType: SubclassClassifier<T, C>.Classify
  fullName: Steeltoe.Common.Util.SubclassClassifier<T, C>.Classify
  nameWithType.vb: SubclassClassifier(Of T, C).Classify
  fullName.vb: Steeltoe.Common.Util.SubclassClassifier(Of T, C).Classify
- uid: Steeltoe.Common.Util.IClassifier{{T},{C}}.Classify({T})
  commentId: M:Steeltoe.Common.Util.IClassifier{`0,`1}.Classify(`0)
  parent: Steeltoe.Common.Util.IClassifier{{T},{C}}
  definition: Steeltoe.Common.Util.IClassifier`2.Classify(`0)
  name: Classify(T)
  nameWithType: IClassifier<T, C>.Classify(T)
  fullName: Steeltoe.Common.Util.IClassifier<T, C>.Classify(T)
  nameWithType.vb: IClassifier(Of T, C).Classify(T)
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of T, C).Classify(T)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IClassifier`2.Classify(`0)
    name: Classify
    nameWithType: IClassifier<T, C>.Classify
    fullName: Steeltoe.Common.Util.IClassifier<T, C>.Classify
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IClassifier`2.Classify(`0)
    name: Classify
    nameWithType: IClassifier(Of T, C).Classify
    fullName: Steeltoe.Common.Util.IClassifier(Of T, C).Classify
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Common.Util.IClassifier`2.Classify(`0)
  commentId: M:Steeltoe.Common.Util.IClassifier`2.Classify(`0)
  name: Classify(C)
  nameWithType: IClassifier<C, T>.Classify(C)
  fullName: Steeltoe.Common.Util.IClassifier<C, T>.Classify(C)
  nameWithType.vb: IClassifier(Of C, T).Classify(C)
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of C, T).Classify(C)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IClassifier`2.Classify(`0)
    name: Classify
    nameWithType: IClassifier<C, T>.Classify
    fullName: Steeltoe.Common.Util.IClassifier<C, T>.Classify
  - name: (
    nameWithType: (
    fullName: (
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IClassifier`2.Classify(`0)
    name: Classify
    nameWithType: IClassifier(Of C, T).Classify
    fullName: Steeltoe.Common.Util.IClassifier(Of C, T).Classify
  - name: (
    nameWithType: (
    fullName: (
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
