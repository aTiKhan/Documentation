### YamlMime:ManagedReference
items:
- uid: Steeltoe.Discovery.Eureka.EurekaClientService
  commentId: T:Steeltoe.Discovery.Eureka.EurekaClientService
  id: EurekaClientService
  parent: Steeltoe.Discovery.Eureka
  children:
  - Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances(IConfiguration,System.String,ILoggerFactory)
  - Steeltoe.Discovery.Eureka.EurekaClientService.GetServices(IConfiguration,ILoggerFactory)
  langs:
  - csharp
  - vb
  name: EurekaClientService
  nameWithType: EurekaClientService
  fullName: Steeltoe.Discovery.Eureka.EurekaClientService
  type: Class
  source:
    remote:
      path: src/Discovery/src/Eureka/EurekaClientService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EurekaClientService
    path: ../Steeltoe/src/Discovery/src/Eureka/EurekaClientService.cs
    startLine: 12
  assemblies:
  - Steeltoe.Discovery.Eureka
  namespace: Steeltoe.Discovery.Eureka
  syntax:
    content: public static class EurekaClientService
    content.vb: Public Module EurekaClientService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances(IConfiguration,System.String,ILoggerFactory)
  commentId: M:Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances(IConfiguration,System.String,ILoggerFactory)
  id: GetInstances(IConfiguration,System.String,ILoggerFactory)
  parent: Steeltoe.Discovery.Eureka.EurekaClientService
  langs:
  - csharp
  - vb
  name: GetInstances(IConfiguration, String, ILoggerFactory)
  nameWithType: EurekaClientService.GetInstances(IConfiguration, String, ILoggerFactory)
  fullName: Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances(IConfiguration, System.String, ILoggerFactory)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Eureka/EurekaClientService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetInstances
    path: ../Steeltoe/src/Discovery/src/Eureka/EurekaClientService.cs
    startLine: 22
  assemblies:
  - Steeltoe.Discovery.Eureka
  namespace: Steeltoe.Discovery.Eureka
  summary: "\nUsing the Eureka configuration values provided in <code data-dev-comment-type=\"paramref\" class=\"paramref\">configuration</code> contact the Eureka server and\nreturn all the service instances for the provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">serviceId</code>. The Eureka client is shutdown after contacting the server.\n"
  example: []
  syntax:
    content: public static IList<IServiceInstance> GetInstances(IConfiguration configuration, string serviceId, ILoggerFactory logFactory = null)
    parameters:
    - id: configuration
      type: IConfiguration
      description: configuration values used for configuring the Eureka client
    - id: serviceId
      type: System.String
      description: the Eureka service id to look up all instances of
    - id: logFactory
      type: ILoggerFactory
      description: optional log factory to use for logging
    return:
      type: System.Collections.Generic.IList{IServiceInstance}
      description: service instances
    content.vb: Public Shared Function GetInstances(configuration As IConfiguration, serviceId As String, logFactory As ILoggerFactory = Nothing) As IList(Of IServiceInstance)
  overload: Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Discovery.Eureka.EurekaClientService.GetServices(IConfiguration,ILoggerFactory)
  commentId: M:Steeltoe.Discovery.Eureka.EurekaClientService.GetServices(IConfiguration,ILoggerFactory)
  id: GetServices(IConfiguration,ILoggerFactory)
  parent: Steeltoe.Discovery.Eureka.EurekaClientService
  langs:
  - csharp
  - vb
  name: GetServices(IConfiguration, ILoggerFactory)
  nameWithType: EurekaClientService.GetServices(IConfiguration, ILoggerFactory)
  fullName: Steeltoe.Discovery.Eureka.EurekaClientService.GetServices(IConfiguration, ILoggerFactory)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Eureka/EurekaClientService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetServices
    path: ../Steeltoe/src/Discovery/src/Eureka/EurekaClientService.cs
    startLine: 38
  assemblies:
  - Steeltoe.Discovery.Eureka
  namespace: Steeltoe.Discovery.Eureka
  summary: "\nUsing the Eureka configuration values provided in <code data-dev-comment-type=\"paramref\" class=\"paramref\">configuration</code> contact the Eureka server and\nreturn all the registered services. The Eureka client is shutdown after contacting the server.\n"
  example: []
  syntax:
    content: public static IList<string> GetServices(IConfiguration configuration, ILoggerFactory logFactory = null)
    parameters:
    - id: configuration
      type: IConfiguration
      description: configuration values used for configuring the Eureka client
    - id: logFactory
      type: ILoggerFactory
      description: optional log factory to use for logging
    return:
      type: System.Collections.Generic.IList{System.String}
      description: all registered services
    content.vb: Public Shared Function GetServices(configuration As IConfiguration, logFactory As ILoggerFactory = Nothing) As IList(Of String)
  overload: Steeltoe.Discovery.Eureka.EurekaClientService.GetServices*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Discovery.Eureka
  commentId: N:Steeltoe.Discovery.Eureka
  name: Steeltoe.Discovery.Eureka
  nameWithType: Steeltoe.Discovery.Eureka
  fullName: Steeltoe.Discovery.Eureka
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances*
  commentId: Overload:Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances
  name: GetInstances
  nameWithType: EurekaClientService.GetInstances
  fullName: Steeltoe.Discovery.Eureka.EurekaClientService.GetInstances
- uid: IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: IConfiguration
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ILoggerFactory
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: ILoggerFactory
- uid: System.Collections.Generic.IList{IServiceInstance}
  commentId: T:System.Collections.Generic.IList{IServiceInstance}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IServiceInstance>
  nameWithType: IList<IServiceInstance>
  fullName: System.Collections.Generic.IList<IServiceInstance>
  nameWithType.vb: IList(Of IServiceInstance)
  fullName.vb: System.Collections.Generic.IList(Of IServiceInstance)
  name.vb: IList(Of IServiceInstance)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IServiceInstance
    name: IServiceInstance
    nameWithType: IServiceInstance
    fullName: IServiceInstance
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IServiceInstance
    name: IServiceInstance
    nameWithType: IServiceInstance
    fullName: IServiceInstance
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Discovery.Eureka.EurekaClientService.GetServices*
  commentId: Overload:Steeltoe.Discovery.Eureka.EurekaClientService.GetServices
  name: GetServices
  nameWithType: EurekaClientService.GetServices
  fullName: Steeltoe.Discovery.Eureka.EurekaClientService.GetServices
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
