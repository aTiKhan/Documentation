### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Converter.AbstractToCollectionConverter
  commentId: T:Steeltoe.Common.Converter.AbstractToCollectionConverter
  id: AbstractToCollectionConverter
  parent: Steeltoe.Common.Converter
  children:
  - Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor(Steeltoe.Common.Converter.IConversionService)
  - Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}},Steeltoe.Common.Converter.IConversionService)
  - Steeltoe.Common.Converter.AbstractToCollectionConverter._conversionService
  langs:
  - csharp
  - vb
  name: AbstractToCollectionConverter
  nameWithType: AbstractToCollectionConverter
  fullName: Steeltoe.Common.Converter.AbstractToCollectionConverter
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractToCollectionConverter
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
    startLine: 9
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: 'public abstract class AbstractToCollectionConverter : AbstractGenericConditionalConverter, IConditionalGenericConverter, IConditionalConverter, IGenericConverter'
    content.vb: >-
      Public MustInherit Class AbstractToCollectionConverter

          Inherits AbstractGenericConditionalConverter

          Implements IConditionalGenericConverter, IConditionalConverter, IGenericConverter
  inheritance:
  - System.Object
  - Steeltoe.Common.Converter.AbstractGenericConverter
  - Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  derivedClasses:
  - Steeltoe.Common.Converter.ArrayToCollectionConverter
  - Steeltoe.Common.Converter.CollectionToCollectionConverter
  - Steeltoe.Common.Converter.DictionaryToDictionaryConverter
  - Steeltoe.Common.Converter.ObjectToCollectionConverter
  - Steeltoe.Common.Converter.StringToCollectionConverter
  implements:
  - Steeltoe.Common.Converter.IConditionalGenericConverter
  - Steeltoe.Common.Converter.IConditionalConverter
  - Steeltoe.Common.Converter.IGenericConverter
  inheritedMembers:
  - Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
  - Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  - Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Steeltoe.Common.Converter.AbstractToCollectionConverter._conversionService
  commentId: F:Steeltoe.Common.Converter.AbstractToCollectionConverter._conversionService
  id: _conversionService
  parent: Steeltoe.Common.Converter.AbstractToCollectionConverter
  langs:
  - csharp
  - vb
  name: _conversionService
  nameWithType: AbstractToCollectionConverter._conversionService
  fullName: Steeltoe.Common.Converter.AbstractToCollectionConverter._conversionService
  type: Field
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: _conversionService
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
    startLine: 11
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: protected readonly IConversionService _conversionService
    return:
      type: Steeltoe.Common.Converter.IConversionService
    content.vb: Protected ReadOnly _conversionService As IConversionService
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor(Steeltoe.Common.Converter.IConversionService)
  commentId: M:Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor(Steeltoe.Common.Converter.IConversionService)
  id: '#ctor(Steeltoe.Common.Converter.IConversionService)'
  parent: Steeltoe.Common.Converter.AbstractToCollectionConverter
  langs:
  - csharp
  - vb
  name: AbstractToCollectionConverter(IConversionService)
  nameWithType: AbstractToCollectionConverter.AbstractToCollectionConverter(IConversionService)
  fullName: Steeltoe.Common.Converter.AbstractToCollectionConverter.AbstractToCollectionConverter(Steeltoe.Common.Converter.IConversionService)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
    startLine: 13
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: protected AbstractToCollectionConverter(IConversionService conversionService)
    parameters:
    - id: conversionService
      type: Steeltoe.Common.Converter.IConversionService
    content.vb: Protected Sub New(conversionService As IConversionService)
  overload: Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}},Steeltoe.Common.Converter.IConversionService)
  commentId: M:Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}},Steeltoe.Common.Converter.IConversionService)
  id: '#ctor(System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}},Steeltoe.Common.Converter.IConversionService)'
  parent: Steeltoe.Common.Converter.AbstractToCollectionConverter
  langs:
  - csharp
  - vb
  name: AbstractToCollectionConverter(ISet<(Type Source, Type Target)>, IConversionService)
  nameWithType: AbstractToCollectionConverter.AbstractToCollectionConverter(ISet<(Type Source, Type Target)>, IConversionService)
  fullName: Steeltoe.Common.Converter.AbstractToCollectionConverter.AbstractToCollectionConverter(System.Collections.Generic.ISet<System.ValueTuple<System.Type, System.Type>>, Steeltoe.Common.Converter.IConversionService)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Converter/AbstractToCollectionConverter.cs
    startLine: 19
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: protected AbstractToCollectionConverter(ISet<(Type Source, Type Target)> convertableTypes, IConversionService conversionService)
    parameters:
    - id: convertableTypes
      type: System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
    - id: conversionService
      type: Steeltoe.Common.Converter.IConversionService
    content.vb: Protected Sub New(convertableTypes As ISet(Of(Source As Type, Target As Type)), conversionService As IConversionService)
  overload: Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor*
  nameWithType.vb: AbstractToCollectionConverter.AbstractToCollectionConverter(ISet(Of (Source As Type, Target As Type)), IConversionService)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Common.Converter.AbstractToCollectionConverter.AbstractToCollectionConverter(System.Collections.Generic.ISet(Of System.ValueTuple(Of System.Type, System.Type)), Steeltoe.Common.Converter.IConversionService)
  name.vb: AbstractToCollectionConverter(ISet(Of (Source As Type, Target As Type)), IConversionService)
references:
- uid: Steeltoe.Common.Converter
  commentId: N:Steeltoe.Common.Converter
  name: Steeltoe.Common.Converter
  nameWithType: Steeltoe.Common.Converter
  fullName: Steeltoe.Common.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.Converter.AbstractGenericConverter
  commentId: T:Steeltoe.Common.Converter.AbstractGenericConverter
  parent: Steeltoe.Common.Converter
  name: AbstractGenericConverter
  nameWithType: AbstractGenericConverter
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter
- uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  commentId: T:Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  parent: Steeltoe.Common.Converter
  name: AbstractGenericConditionalConverter
  nameWithType: AbstractGenericConditionalConverter
  fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter
- uid: Steeltoe.Common.Converter.IConditionalGenericConverter
  commentId: T:Steeltoe.Common.Converter.IConditionalGenericConverter
  parent: Steeltoe.Common.Converter
  name: IConditionalGenericConverter
  nameWithType: IConditionalGenericConverter
  fullName: Steeltoe.Common.Converter.IConditionalGenericConverter
- uid: Steeltoe.Common.Converter.IConditionalConverter
  commentId: T:Steeltoe.Common.Converter.IConditionalConverter
  parent: Steeltoe.Common.Converter
  name: IConditionalConverter
  nameWithType: IConditionalConverter
  fullName: Steeltoe.Common.Converter.IConditionalConverter
- uid: Steeltoe.Common.Converter.IGenericConverter
  commentId: T:Steeltoe.Common.Converter.IGenericConverter
  parent: Steeltoe.Common.Converter
  name: IGenericConverter
  nameWithType: IGenericConverter
  fullName: Steeltoe.Common.Converter.IGenericConverter
- uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
  parent: Steeltoe.Common.Converter.AbstractGenericConditionalConverter
  isExternal: true
  name: Matches(Type, Type)
  nameWithType: AbstractGenericConditionalConverter.Matches(Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractGenericConditionalConverter.Matches
    fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches(System.Type,System.Type)
    name: Matches
    nameWithType: AbstractGenericConditionalConverter.Matches
    fullName: Steeltoe.Common.Converter.AbstractGenericConditionalConverter.Matches
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  commentId: P:Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
  parent: Steeltoe.Common.Converter.AbstractGenericConverter
  name: ConvertibleTypes
  nameWithType: AbstractGenericConverter.ConvertibleTypes
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.ConvertibleTypes
- uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  commentId: M:Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
  parent: Steeltoe.Common.Converter.AbstractGenericConverter
  isExternal: true
  name: Convert(Object, Type, Type)
  nameWithType: AbstractGenericConverter.Convert(Object, Type, Type)
  fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object, System.Type, System.Type)
  spec.csharp:
  - uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractGenericConverter.Convert
    fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Converter.AbstractGenericConverter.Convert(System.Object,System.Type,System.Type)
    name: Convert
    nameWithType: AbstractGenericConverter.Convert
    fullName: Steeltoe.Common.Converter.AbstractGenericConverter.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Converter.IConversionService
  commentId: T:Steeltoe.Common.Converter.IConversionService
  parent: Steeltoe.Common.Converter
  name: IConversionService
  nameWithType: IConversionService
  fullName: Steeltoe.Common.Converter.IConversionService
- uid: Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor*
  commentId: Overload:Steeltoe.Common.Converter.AbstractToCollectionConverter.#ctor
  name: AbstractToCollectionConverter
  nameWithType: AbstractToCollectionConverter.AbstractToCollectionConverter
  fullName: Steeltoe.Common.Converter.AbstractToCollectionConverter.AbstractToCollectionConverter
- uid: System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
  commentId: T:System.Collections.Generic.ISet{System.ValueTuple{System.Type,System.Type}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<ValueTuple<Type, Type>>
  nameWithType: ISet<ValueTuple<Type, Type>>
  fullName: System.Collections.Generic.ISet<System.ValueTuple<System.Type, System.Type>>
  nameWithType.vb: ISet(Of ValueTuple(Of Type, Type))
  fullName.vb: System.Collections.Generic.ISet(Of System.ValueTuple(Of System.Type, System.Type))
  name.vb: ISet(Of ValueTuple(Of Type, Type))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
