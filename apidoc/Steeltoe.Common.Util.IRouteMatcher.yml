### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.IRouteMatcher
  commentId: T:Steeltoe.Common.Util.IRouteMatcher
  id: IRouteMatcher
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
  - Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  - Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  - Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  - Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  - Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  langs:
  - csharp
  - vb
  name: IRouteMatcher
  nameWithType: IRouteMatcher
  fullName: Steeltoe.Common.Util.IRouteMatcher
  type: Interface
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IRouteMatcher
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IRouteMatcher.cs
    startLine: 8
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public interface IRouteMatcher
    content.vb: Public Interface IRouteMatcher
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  id: ParseRoute(System.String)
  parent: Steeltoe.Common.Util.IRouteMatcher
  langs:
  - csharp
  - vb
  name: ParseRoute(String)
  nameWithType: IRouteMatcher.ParseRoute(String)
  fullName: Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ParseRoute
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IRouteMatcher.cs
    startLine: 10
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: IRoute ParseRoute(string routeValue)
    parameters:
    - id: routeValue
      type: System.String
    return:
      type: Steeltoe.Common.Util.IRoute
    content.vb: Function ParseRoute(routeValue As String) As IRoute
  overload: Steeltoe.Common.Util.IRouteMatcher.ParseRoute*
- uid: Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  id: IsPattern(System.String)
  parent: Steeltoe.Common.Util.IRouteMatcher
  langs:
  - csharp
  - vb
  name: IsPattern(String)
  nameWithType: IRouteMatcher.IsPattern(String)
  fullName: Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsPattern
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IRouteMatcher.cs
    startLine: 12
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: bool IsPattern(string route)
    parameters:
    - id: route
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsPattern(route As String) As Boolean
  overload: Steeltoe.Common.Util.IRouteMatcher.IsPattern*
- uid: Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
  id: Combine(System.String,System.String)
  parent: Steeltoe.Common.Util.IRouteMatcher
  langs:
  - csharp
  - vb
  name: Combine(String, String)
  nameWithType: IRouteMatcher.Combine(String, String)
  fullName: Steeltoe.Common.Util.IRouteMatcher.Combine(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Combine
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IRouteMatcher.cs
    startLine: 14
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: string Combine(string pattern1, string pattern2)
    parameters:
    - id: pattern1
      type: System.String
    - id: pattern2
      type: System.String
    return:
      type: System.String
    content.vb: Function Combine(pattern1 As String, pattern2 As String) As String
  overload: Steeltoe.Common.Util.IRouteMatcher.Combine*
- uid: Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  id: Match(System.String,Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.IRouteMatcher
  langs:
  - csharp
  - vb
  name: Match(String, IRoute)
  nameWithType: IRouteMatcher.Match(String, IRoute)
  fullName: Steeltoe.Common.Util.IRouteMatcher.Match(System.String, Steeltoe.Common.Util.IRoute)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Match
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IRouteMatcher.cs
    startLine: 16
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: bool Match(string pattern, IRoute route)
    parameters:
    - id: pattern
      type: System.String
    - id: route
      type: Steeltoe.Common.Util.IRoute
    return:
      type: System.Boolean
    content.vb: Function Match(pattern As String, route As IRoute) As Boolean
  overload: Steeltoe.Common.Util.IRouteMatcher.Match*
- uid: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  id: MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.IRouteMatcher
  langs:
  - csharp
  - vb
  name: MatchAndExtract(String, IRoute)
  nameWithType: IRouteMatcher.MatchAndExtract(String, IRoute)
  fullName: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String, Steeltoe.Common.Util.IRoute)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MatchAndExtract
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IRouteMatcher.cs
    startLine: 18
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: IDictionary<string, string> MatchAndExtract(string pattern, IRoute route)
    parameters:
    - id: pattern
      type: System.String
    - id: route
      type: Steeltoe.Common.Util.IRoute
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Function MatchAndExtract(pattern As String, route As IRoute) As IDictionary(Of String, String)
  overload: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract*
- uid: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  id: GetPatternComparer(Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.IRouteMatcher
  langs:
  - csharp
  - vb
  name: GetPatternComparer(IRoute)
  nameWithType: IRouteMatcher.GetPatternComparer(IRoute)
  fullName: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetPatternComparer
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IRouteMatcher.cs
    startLine: 20
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: IComparer<string> GetPatternComparer(IRoute route)
    parameters:
    - id: route
      type: Steeltoe.Common.Util.IRoute
    return:
      type: System.Collections.Generic.IComparer{System.String}
    content.vb: Function GetPatternComparer(route As IRoute) As IComparer(Of String)
  overload: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer*
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: Steeltoe.Common.Util.IRouteMatcher.ParseRoute*
  commentId: Overload:Steeltoe.Common.Util.IRouteMatcher.ParseRoute
  name: ParseRoute
  nameWithType: IRouteMatcher.ParseRoute
  fullName: Steeltoe.Common.Util.IRouteMatcher.ParseRoute
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Common.Util.IRoute
  commentId: T:Steeltoe.Common.Util.IRoute
  parent: Steeltoe.Common.Util
  name: IRoute
  nameWithType: IRoute
  fullName: Steeltoe.Common.Util.IRoute
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Util.IRouteMatcher.IsPattern*
  commentId: Overload:Steeltoe.Common.Util.IRouteMatcher.IsPattern
  name: IsPattern
  nameWithType: IRouteMatcher.IsPattern
  fullName: Steeltoe.Common.Util.IRouteMatcher.IsPattern
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Util.IRouteMatcher.Combine*
  commentId: Overload:Steeltoe.Common.Util.IRouteMatcher.Combine
  name: Combine
  nameWithType: IRouteMatcher.Combine
  fullName: Steeltoe.Common.Util.IRouteMatcher.Combine
- uid: Steeltoe.Common.Util.IRouteMatcher.Match*
  commentId: Overload:Steeltoe.Common.Util.IRouteMatcher.Match
  name: Match
  nameWithType: IRouteMatcher.Match
  fullName: Steeltoe.Common.Util.IRouteMatcher.Match
- uid: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract*
  commentId: Overload:Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract
  name: MatchAndExtract
  nameWithType: IRouteMatcher.MatchAndExtract
  fullName: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer*
  commentId: Overload:Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer
  name: GetPatternComparer
  nameWithType: IRouteMatcher.GetPatternComparer
  fullName: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer
- uid: System.Collections.Generic.IComparer{System.String}
  commentId: T:System.Collections.Generic.IComparer{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<String>
  nameWithType: IComparer<String>
  fullName: System.Collections.Generic.IComparer<System.String>
  nameWithType.vb: IComparer(Of String)
  fullName.vb: System.Collections.Generic.IComparer(Of System.String)
  name.vb: IComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
