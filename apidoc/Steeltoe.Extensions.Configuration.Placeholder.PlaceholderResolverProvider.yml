### YamlMime:ManagedReference
items:
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  commentId: T:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  id: PlaceholderResolverProvider
  parent: Steeltoe.Extensions.Configuration.Placeholder
  children:
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor(IConfiguration,ILoggerFactory)
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor(System.Collections.Generic.IList{IConfigurationProvider},ILoggerFactory)
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set(System.String,System.String)
  - Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: PlaceholderResolverProvider
  nameWithType: PlaceholderResolverProvider
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  type: Class
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: PlaceholderResolverProvider
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 18
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nConfiguration provider that resolves placeholders\nA placeholder takes the form of <pre><code> ${some:config:reference?default_if_not_present}></code></pre>\n"
  example: []
  syntax:
    content: 'public class PlaceholderResolverProvider : IPlaceholderResolverProvider, IConfigurationProvider'
    content.vb: >-
      Public Class PlaceholderResolverProvider

          Implements IPlaceholderResolverProvider, IConfigurationProvider
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider
  - IConfigurationProvider
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
  commentId: P:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
  id: Configuration
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: Configuration
  nameWithType: PlaceholderResolverProvider.Configuration
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
  type: Property
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Configuration
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 26
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nGets the configuration this placeholder resolver wraps\n"
  example: []
  syntax:
    content: public IConfiguration Configuration { get; }
    parameters: []
    return:
      type: IConfiguration
    content.vb: Public ReadOnly Property Configuration As IConfiguration
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor(IConfiguration,ILoggerFactory)
  commentId: M:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor(IConfiguration,ILoggerFactory)
  id: '#ctor(IConfiguration,ILoggerFactory)'
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: PlaceholderResolverProvider(IConfiguration, ILoggerFactory)
  nameWithType: PlaceholderResolverProvider.PlaceholderResolverProvider(IConfiguration, ILoggerFactory)
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.PlaceholderResolverProvider(IConfiguration, ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 34
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nInitializes a new instance of the <xref href=\"Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider\" data-throw-if-not-resolved=\"false\"></xref> class.\nThe new placeholder resolver wraps the provided configuration\n"
  example: []
  syntax:
    content: public PlaceholderResolverProvider(IConfiguration configuration, ILoggerFactory logFactory = null)
    parameters:
    - id: configuration
      type: IConfiguration
      description: the configuration the provider uses when resolving placeholders
    - id: logFactory
      type: ILoggerFactory
      description: the logger factory to use
    content.vb: Public Sub New(configuration As IConfiguration, logFactory As ILoggerFactory = Nothing)
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor(System.Collections.Generic.IList{IConfigurationProvider},ILoggerFactory)
  commentId: M:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor(System.Collections.Generic.IList{IConfigurationProvider},ILoggerFactory)
  id: '#ctor(System.Collections.Generic.IList{IConfigurationProvider},ILoggerFactory)'
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: PlaceholderResolverProvider(IList<IConfigurationProvider>, ILoggerFactory)
  nameWithType: PlaceholderResolverProvider.PlaceholderResolverProvider(IList<IConfigurationProvider>, ILoggerFactory)
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.PlaceholderResolverProvider(System.Collections.Generic.IList<IConfigurationProvider>, ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 52
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nInitializes a new instance of the <xref href=\"Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider\" data-throw-if-not-resolved=\"false\"></xref> class.\nThe new placeholder resolver wraps the provided configuration providers.  The <xref href=\"Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration\" data-throw-if-not-resolved=\"false\"></xref>\nwill be created from these providers.\n"
  example: []
  syntax:
    content: public PlaceholderResolverProvider(IList<IConfigurationProvider> providers, ILoggerFactory logFactory = null)
    parameters:
    - id: providers
      type: System.Collections.Generic.IList{IConfigurationProvider}
      description: the configuration providers the resolver uses when resolving placeholders
    - id: logFactory
      type: ILoggerFactory
      description: the logger factory to use
    content.vb: Public Sub New(providers As IList(Of IConfigurationProvider), logFactory As ILoggerFactory = Nothing)
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor*
  nameWithType.vb: PlaceholderResolverProvider.PlaceholderResolverProvider(IList(Of IConfigurationProvider), ILoggerFactory)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.PlaceholderResolverProvider(System.Collections.Generic.IList(Of IConfigurationProvider), ILoggerFactory)
  name.vb: PlaceholderResolverProvider(IList(Of IConfigurationProvider), ILoggerFactory)
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers
  commentId: P:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers
  id: Providers
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: Providers
  nameWithType: PlaceholderResolverProvider.Providers
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers
  type: Property
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Providers
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 63
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  syntax:
    content: public IList<IConfigurationProvider> Providers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{IConfigurationProvider}
    content.vb: Public ReadOnly Property Providers As IList(Of IConfigurationProvider)
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys
  commentId: P:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys
  id: ResolvedKeys
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: ResolvedKeys
  nameWithType: PlaceholderResolverProvider.ResolvedKeys
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys
  type: Property
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ResolvedKeys
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 68
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  syntax:
    content: public IList<string> ResolvedKeys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: Public ReadOnly Property ResolvedKeys As IList(Of String)
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys*
  implements:
  - Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider.ResolvedKeys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet(System.String,System.String@)
  commentId: M:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet(System.String,System.String@)
  id: TryGet(System.String,System.String@)
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: TryGet(String, out String)
  nameWithType: PlaceholderResolverProvider.TryGet(String, out String)
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: TryGet
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 77
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nTries to get a configuration value for the specified key. If the value is a placeholder\nit will try to resolve the placeholder before returning it.\n"
  example: []
  syntax:
    content: public bool TryGet(string key, out string value)
    parameters:
    - id: key
      type: System.String
      description: The key.
    - id: value
      type: System.String
      description: The value.
    return:
      type: System.Boolean
      description: <code>True</code> if a value for the specified key was found, otherwise <code>false</code>.
    content.vb: Public Function TryGet(key As String, ByRef value As String) As Boolean
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet*
  nameWithType.vb: PlaceholderResolverProvider.TryGet(String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet(System.String, ByRef System.String)
  name.vb: TryGet(String, ByRef String)
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set(System.String,System.String)
  commentId: M:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set(System.String,System.String)
  id: Set(System.String,System.String)
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: Set(String, String)
  nameWithType: PlaceholderResolverProvider.Set(String, String)
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Set
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 96
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nSets a configuration value for the specified key. No placeholder resolution is performed.\n"
  example: []
  syntax:
    content: public void Set(string key, string value)
    parameters:
    - id: key
      type: System.String
      description: The key.
    - id: value
      type: System.String
      description: The value.
    content.vb: Public Sub Set(key As String, value As String)
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken
  commentId: M:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken
  id: GetReloadToken
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: GetReloadToken()
  nameWithType: PlaceholderResolverProvider.GetReloadToken()
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken()
  type: Method
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetReloadToken
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 106
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nReturns a change token if this provider supports change tracking, null otherwise.\n"
  example: []
  syntax:
    content: public IChangeToken GetReloadToken()
    return:
      type: IChangeToken
      description: changed token
    content.vb: Public Function GetReloadToken As IChangeToken
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load
  commentId: M:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load
  id: Load
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: PlaceholderResolverProvider.Load()
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load()
  type: Method
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Load
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 116
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nCreates the <xref href=\"Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration\" data-throw-if-not-resolved=\"false\"></xref> from the providers if it has not done so already.\nIf Configuration already exists, it will call Reload() on the underlying configuration\n"
  example: []
  syntax:
    content: public void Load()
    content.vb: Public Sub Load
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)
  commentId: M:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)
  id: GetChildKeys(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  langs:
  - csharp
  - vb
  name: GetChildKeys(IEnumerable<String>, String)
  nameWithType: PlaceholderResolverProvider.GetChildKeys(IEnumerable<String>, String)
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys(System.Collections.Generic.IEnumerable<System.String>, System.String)
  type: Method
  source:
    remote:
      path: src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetChildKeys
    path: ../Steeltoe/src/Configuration/src/PlaceholderBase/PlaceholderResolverProvider.cs
    startLine: 140
  assemblies:
  - Steeltoe.Extensions.Configuration.PlaceholderBase
  namespace: Steeltoe.Extensions.Configuration.Placeholder
  summary: "\nReturns the immediate descendant configuration keys for a given parent path based on this\n<xref href=\"Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration\" data-throw-if-not-resolved=\"false\"></xref>&apos;s data and the set of keys returned by all the preceding providers.\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetChildKeys(IEnumerable<string> earlierKeys, string parentPath)
    parameters:
    - id: earlierKeys
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The child keys returned by the preceding providers for the same parent path.
    - id: parentPath
      type: System.String
      description: The parent path.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The child keys.
    content.vb: Public Function GetChildKeys(earlierKeys As IEnumerable(Of String), parentPath As String) As IEnumerable(Of String)
  overload: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys*
  nameWithType.vb: PlaceholderResolverProvider.GetChildKeys(IEnumerable(Of String), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys(System.Collections.Generic.IEnumerable(Of System.String), System.String)
  name.vb: GetChildKeys(IEnumerable(Of String), String)
references:
- uid: Steeltoe.Extensions.Configuration.Placeholder
  commentId: N:Steeltoe.Extensions.Configuration.Placeholder
  name: Steeltoe.Extensions.Configuration.Placeholder
  nameWithType: Steeltoe.Extensions.Configuration.Placeholder
  fullName: Steeltoe.Extensions.Configuration.Placeholder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider
  commentId: T:Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider
  parent: Steeltoe.Extensions.Configuration
  name: IPlaceholderResolverProvider
  nameWithType: IPlaceholderResolverProvider
  fullName: Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider
- uid: IConfigurationProvider
  isExternal: true
  name: IConfigurationProvider
  nameWithType: IConfigurationProvider
  fullName: IConfigurationProvider
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Extensions.Configuration
  commentId: N:Steeltoe.Extensions.Configuration
  name: Steeltoe.Extensions.Configuration
  nameWithType: Steeltoe.Extensions.Configuration
  fullName: Steeltoe.Extensions.Configuration
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
  name: Configuration
  nameWithType: PlaceholderResolverProvider.Configuration
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
- uid: IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: IConfiguration
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  commentId: T:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
  name: PlaceholderResolverProvider
  nameWithType: PlaceholderResolverProvider
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.#ctor
  name: PlaceholderResolverProvider
  nameWithType: PlaceholderResolverProvider.PlaceholderResolverProvider
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.PlaceholderResolverProvider
- uid: ILoggerFactory
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: ILoggerFactory
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
  commentId: P:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Configuration
  isExternal: true
- uid: System.Collections.Generic.IList{IConfigurationProvider}
  commentId: T:System.Collections.Generic.IList{IConfigurationProvider}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IConfigurationProvider>
  nameWithType: IList<IConfigurationProvider>
  fullName: System.Collections.Generic.IList<IConfigurationProvider>
  nameWithType.vb: IList(Of IConfigurationProvider)
  fullName.vb: System.Collections.Generic.IList(Of IConfigurationProvider)
  name.vb: IList(Of IConfigurationProvider)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IConfigurationProvider
    name: IConfigurationProvider
    nameWithType: IConfigurationProvider
    fullName: IConfigurationProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IConfigurationProvider
    name: IConfigurationProvider
    nameWithType: IConfigurationProvider
    fullName: IConfigurationProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers
  name: Providers
  nameWithType: PlaceholderResolverProvider.Providers
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Providers
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys
  name: ResolvedKeys
  nameWithType: PlaceholderResolverProvider.ResolvedKeys
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.ResolvedKeys
- uid: Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider.ResolvedKeys
  commentId: P:Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider.ResolvedKeys
  parent: Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider
  name: ResolvedKeys
  nameWithType: IPlaceholderResolverProvider.ResolvedKeys
  fullName: Steeltoe.Extensions.Configuration.IPlaceholderResolverProvider.ResolvedKeys
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet
  name: TryGet
  nameWithType: PlaceholderResolverProvider.TryGet
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.TryGet
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set
  name: Set
  nameWithType: PlaceholderResolverProvider.Set
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Set
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken
  name: GetReloadToken
  nameWithType: PlaceholderResolverProvider.GetReloadToken
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetReloadToken
- uid: IChangeToken
  commentId: '!:IChangeToken'
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load
  name: Load
  nameWithType: PlaceholderResolverProvider.Load
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.Load
- uid: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys*
  commentId: Overload:Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys
  name: GetChildKeys
  nameWithType: PlaceholderResolverProvider.GetChildKeys
  fullName: Steeltoe.Extensions.Configuration.Placeholder.PlaceholderResolverProvider.GetChildKeys
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
