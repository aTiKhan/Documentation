### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions
  id: AcknowledgeModeExtensions
  parent: Steeltoe.Messaging.RabbitMQ.Core
  children:
  - Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  - Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  - Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  langs:
  - csharp
  - vb
  name: AcknowledgeModeExtensions
  nameWithType: AcknowledgeModeExtensions
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AcknowledgeModeExtensions
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
    startLine: 6
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public static class AcknowledgeModeExtensions
    content.vb: Public Module AcknowledgeModeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  id: IsTransactionAllowed(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions
  langs:
  - csharp
  - vb
  name: IsTransactionAllowed(AcknowledgeMode)
  nameWithType: AcknowledgeModeExtensions.IsTransactionAllowed(AcknowledgeMode)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsTransactionAllowed
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
    startLine: 8
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public static bool IsTransactionAllowed(this AcknowledgeMode mode)
    parameters:
    - id: mode
      type: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsTransactionAllowed(mode As AcknowledgeMode) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  id: IsAutoAck(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions
  langs:
  - csharp
  - vb
  name: IsAutoAck(AcknowledgeMode)
  nameWithType: AcknowledgeModeExtensions.IsAutoAck(AcknowledgeMode)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsAutoAck
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public static bool IsAutoAck(this AcknowledgeMode mode)
    parameters:
    - id: mode
      type: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAutoAck(mode As AcknowledgeMode) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  id: IsManual(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions
  langs:
  - csharp
  - vb
  name: IsManual(AcknowledgeMode)
  nameWithType: AcknowledgeModeExtensions.IsManual(AcknowledgeMode)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual(Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsManual
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/AcknowledgeModeExtensions.cs
    startLine: 18
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public static bool IsManual(this AcknowledgeMode mode)
    parameters:
    - id: mode
      type: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsManual(mode As AcknowledgeMode) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Messaging.RabbitMQ.Core
  commentId: N:Steeltoe.Messaging.RabbitMQ.Core
  name: Steeltoe.Messaging.RabbitMQ.Core
  nameWithType: Steeltoe.Messaging.RabbitMQ.Core
  fullName: Steeltoe.Messaging.RabbitMQ.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed
  name: IsTransactionAllowed
  nameWithType: AcknowledgeModeExtensions.IsTransactionAllowed
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: AcknowledgeMode
  nameWithType: AcknowledgeMode
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck
  name: IsAutoAck
  nameWithType: AcknowledgeModeExtensions.IsAutoAck
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual
  name: IsManual
  nameWithType: AcknowledgeModeExtensions.IsManual
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual
