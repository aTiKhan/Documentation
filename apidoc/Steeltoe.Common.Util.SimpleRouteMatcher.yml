### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.SimpleRouteMatcher
  commentId: T:Steeltoe.Common.Util.SimpleRouteMatcher
  id: SimpleRouteMatcher
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.SimpleRouteMatcher.#ctor(Steeltoe.Common.Util.IPathMatcher)
  - Steeltoe.Common.Util.SimpleRouteMatcher.Combine(System.String,System.String)
  - Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  - Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern(System.String)
  - Steeltoe.Common.Util.SimpleRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  - Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  - Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute(System.String)
  - Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher
  langs:
  - csharp
  - vb
  name: SimpleRouteMatcher
  nameWithType: SimpleRouteMatcher
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SimpleRouteMatcher
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 9
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: 'public class SimpleRouteMatcher : IRouteMatcher'
    content.vb: >-
      Public Class SimpleRouteMatcher

          Implements IRouteMatcher
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Common.Util.IRouteMatcher
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.#ctor(Steeltoe.Common.Util.IPathMatcher)
  commentId: M:Steeltoe.Common.Util.SimpleRouteMatcher.#ctor(Steeltoe.Common.Util.IPathMatcher)
  id: '#ctor(Steeltoe.Common.Util.IPathMatcher)'
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: SimpleRouteMatcher(IPathMatcher)
  nameWithType: SimpleRouteMatcher.SimpleRouteMatcher(IPathMatcher)
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.SimpleRouteMatcher(Steeltoe.Common.Util.IPathMatcher)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 11
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public SimpleRouteMatcher(IPathMatcher pathMatcher)
    parameters:
    - id: pathMatcher
      type: Steeltoe.Common.Util.IPathMatcher
    content.vb: Public Sub New(pathMatcher As IPathMatcher)
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher
  commentId: P:Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher
  id: PathMatcher
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: PathMatcher
  nameWithType: SimpleRouteMatcher.PathMatcher
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: PathMatcher
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 21
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public IPathMatcher PathMatcher { get; }
    parameters: []
    return:
      type: Steeltoe.Common.Util.IPathMatcher
    content.vb: Public ReadOnly Property PathMatcher As IPathMatcher
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute(System.String)
  commentId: M:Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute(System.String)
  id: ParseRoute(System.String)
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: ParseRoute(String)
  nameWithType: SimpleRouteMatcher.ParseRoute(String)
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ParseRoute
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 23
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public IRoute ParseRoute(string route)
    parameters:
    - id: route
      type: System.String
    return:
      type: Steeltoe.Common.Util.IRoute
    content.vb: Public Function ParseRoute(route As String) As IRoute
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute*
  implements:
  - Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern(System.String)
  commentId: M:Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern(System.String)
  id: IsPattern(System.String)
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: IsPattern(String)
  nameWithType: SimpleRouteMatcher.IsPattern(String)
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsPattern
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 28
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool IsPattern(string route)
    parameters:
    - id: route
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function IsPattern(route As String) As Boolean
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern*
  implements:
  - Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.Combine(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.SimpleRouteMatcher.Combine(System.String,System.String)
  id: Combine(System.String,System.String)
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: Combine(String, String)
  nameWithType: SimpleRouteMatcher.Combine(String, String)
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.Combine(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Combine
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 33
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public string Combine(string pattern1, string pattern2)
    parameters:
    - id: pattern1
      type: System.String
    - id: pattern2
      type: System.String
    return:
      type: System.String
    content.vb: Public Function Combine(pattern1 As String, pattern2 As String) As String
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.Combine*
  implements:
  - Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.SimpleRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  id: Match(System.String,Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: Match(String, IRoute)
  nameWithType: SimpleRouteMatcher.Match(String, IRoute)
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.Match(System.String, Steeltoe.Common.Util.IRoute)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Match
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 38
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool Match(string pattern, IRoute route)
    parameters:
    - id: pattern
      type: System.String
    - id: route
      type: Steeltoe.Common.Util.IRoute
    return:
      type: System.Boolean
    content.vb: Public Function Match(pattern As String, route As IRoute) As Boolean
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.Match*
  implements:
  - Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  id: MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: MatchAndExtract(String, IRoute)
  nameWithType: SimpleRouteMatcher.MatchAndExtract(String, IRoute)
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract(System.String, Steeltoe.Common.Util.IRoute)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MatchAndExtract
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 43
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public IDictionary<string, string> MatchAndExtract(string pattern, IRoute route)
    parameters:
    - id: pattern
      type: System.String
    - id: route
      type: Steeltoe.Common.Util.IRoute
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Function MatchAndExtract(pattern As String, route As IRoute) As IDictionary(Of String, String)
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract*
  implements:
  - Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  id: GetPatternComparer(Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.SimpleRouteMatcher
  langs:
  - csharp
  - vb
  name: GetPatternComparer(IRoute)
  nameWithType: SimpleRouteMatcher.GetPatternComparer(IRoute)
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/SimpleRouteMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetPatternComparer
    path: ../Steeltoe/src/Common/src/Common/Util/SimpleRouteMatcher.cs
    startLine: 53
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public IComparer<string> GetPatternComparer(IRoute route)
    parameters:
    - id: route
      type: Steeltoe.Common.Util.IRoute
    return:
      type: System.Collections.Generic.IComparer{System.String}
    content.vb: Public Function GetPatternComparer(route As IRoute) As IComparer(Of String)
  overload: Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer*
  implements:
  - Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.Util.IRouteMatcher
  commentId: T:Steeltoe.Common.Util.IRouteMatcher
  parent: Steeltoe.Common.Util
  name: IRouteMatcher
  nameWithType: IRouteMatcher
  fullName: Steeltoe.Common.Util.IRouteMatcher
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.#ctor*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.#ctor
  name: SimpleRouteMatcher
  nameWithType: SimpleRouteMatcher.SimpleRouteMatcher
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.SimpleRouteMatcher
- uid: Steeltoe.Common.Util.IPathMatcher
  commentId: T:Steeltoe.Common.Util.IPathMatcher
  parent: Steeltoe.Common.Util
  name: IPathMatcher
  nameWithType: IPathMatcher
  fullName: Steeltoe.Common.Util.IPathMatcher
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher
  name: PathMatcher
  nameWithType: SimpleRouteMatcher.PathMatcher
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.PathMatcher
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute
  name: ParseRoute
  nameWithType: SimpleRouteMatcher.ParseRoute
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.ParseRoute
- uid: Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  parent: Steeltoe.Common.Util.IRouteMatcher
  isExternal: true
  name: ParseRoute(String)
  nameWithType: IRouteMatcher.ParseRoute(String)
  fullName: Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
    name: ParseRoute
    nameWithType: IRouteMatcher.ParseRoute
    fullName: Steeltoe.Common.Util.IRouteMatcher.ParseRoute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IRouteMatcher.ParseRoute(System.String)
    name: ParseRoute
    nameWithType: IRouteMatcher.ParseRoute
    fullName: Steeltoe.Common.Util.IRouteMatcher.ParseRoute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Common.Util.IRoute
  commentId: T:Steeltoe.Common.Util.IRoute
  parent: Steeltoe.Common.Util
  name: IRoute
  nameWithType: IRoute
  fullName: Steeltoe.Common.Util.IRoute
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern
  name: IsPattern
  nameWithType: SimpleRouteMatcher.IsPattern
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.IsPattern
- uid: Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  parent: Steeltoe.Common.Util.IRouteMatcher
  isExternal: true
  name: IsPattern(String)
  nameWithType: IRouteMatcher.IsPattern(String)
  fullName: Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
    name: IsPattern
    nameWithType: IRouteMatcher.IsPattern
    fullName: Steeltoe.Common.Util.IRouteMatcher.IsPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IRouteMatcher.IsPattern(System.String)
    name: IsPattern
    nameWithType: IRouteMatcher.IsPattern
    fullName: Steeltoe.Common.Util.IRouteMatcher.IsPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.Combine*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.Combine
  name: Combine
  nameWithType: SimpleRouteMatcher.Combine
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.Combine
- uid: Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
  parent: Steeltoe.Common.Util.IRouteMatcher
  isExternal: true
  name: Combine(String, String)
  nameWithType: IRouteMatcher.Combine(String, String)
  fullName: Steeltoe.Common.Util.IRouteMatcher.Combine(System.String, System.String)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
    name: Combine
    nameWithType: IRouteMatcher.Combine
    fullName: Steeltoe.Common.Util.IRouteMatcher.Combine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IRouteMatcher.Combine(System.String,System.String)
    name: Combine
    nameWithType: IRouteMatcher.Combine
    fullName: Steeltoe.Common.Util.IRouteMatcher.Combine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.Match*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.Match
  name: Match
  nameWithType: SimpleRouteMatcher.Match
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.Match
- uid: Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.IRouteMatcher
  isExternal: true
  name: Match(String, IRoute)
  nameWithType: IRouteMatcher.Match(String, IRoute)
  fullName: Steeltoe.Common.Util.IRouteMatcher.Match(System.String, Steeltoe.Common.Util.IRoute)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
    name: Match
    nameWithType: IRouteMatcher.Match
    fullName: Steeltoe.Common.Util.IRouteMatcher.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Common.Util.IRoute
    name: IRoute
    nameWithType: IRoute
    fullName: Steeltoe.Common.Util.IRoute
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IRouteMatcher.Match(System.String,Steeltoe.Common.Util.IRoute)
    name: Match
    nameWithType: IRouteMatcher.Match
    fullName: Steeltoe.Common.Util.IRouteMatcher.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Common.Util.IRoute
    name: IRoute
    nameWithType: IRoute
    fullName: Steeltoe.Common.Util.IRoute
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract
  name: MatchAndExtract
  nameWithType: SimpleRouteMatcher.MatchAndExtract
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.MatchAndExtract
- uid: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.IRouteMatcher
  isExternal: true
  name: MatchAndExtract(String, IRoute)
  nameWithType: IRouteMatcher.MatchAndExtract(String, IRoute)
  fullName: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String, Steeltoe.Common.Util.IRoute)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
    name: MatchAndExtract
    nameWithType: IRouteMatcher.MatchAndExtract
    fullName: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Common.Util.IRoute
    name: IRoute
    nameWithType: IRoute
    fullName: Steeltoe.Common.Util.IRoute
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract(System.String,Steeltoe.Common.Util.IRoute)
    name: MatchAndExtract
    nameWithType: IRouteMatcher.MatchAndExtract
    fullName: Steeltoe.Common.Util.IRouteMatcher.MatchAndExtract
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Common.Util.IRoute
    name: IRoute
    nameWithType: IRoute
    fullName: Steeltoe.Common.Util.IRoute
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer*
  commentId: Overload:Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer
  name: GetPatternComparer
  nameWithType: SimpleRouteMatcher.GetPatternComparer
  fullName: Steeltoe.Common.Util.SimpleRouteMatcher.GetPatternComparer
- uid: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  commentId: M:Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  parent: Steeltoe.Common.Util.IRouteMatcher
  name: GetPatternComparer(IRoute)
  nameWithType: IRouteMatcher.GetPatternComparer(IRoute)
  fullName: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
  spec.csharp:
  - uid: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
    name: GetPatternComparer
    nameWithType: IRouteMatcher.GetPatternComparer
    fullName: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Common.Util.IRoute
    name: IRoute
    nameWithType: IRoute
    fullName: Steeltoe.Common.Util.IRoute
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer(Steeltoe.Common.Util.IRoute)
    name: GetPatternComparer
    nameWithType: IRouteMatcher.GetPatternComparer
    fullName: Steeltoe.Common.Util.IRouteMatcher.GetPatternComparer
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Common.Util.IRoute
    name: IRoute
    nameWithType: IRoute
    fullName: Steeltoe.Common.Util.IRoute
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{System.String}
  commentId: T:System.Collections.Generic.IComparer{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<String>
  nameWithType: IComparer<String>
  fullName: System.Collections.Generic.IComparer<System.String>
  nameWithType.vb: IComparer(Of String)
  fullName.vb: System.Collections.Generic.IComparer(Of System.String)
  name.vb: IComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
