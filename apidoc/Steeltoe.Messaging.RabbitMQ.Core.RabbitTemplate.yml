### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  id: RabbitTemplate
  parent: Steeltoe.Messaging.RabbitMQ.Core
  children:
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Logging.ILogger)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate._logger
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener(RabbitMQ.Client.IModel)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary(System.Object)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException(System.Exception)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DEFAULT_SERVICE_NAME
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(System.String,System.Int32,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait(System.String,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(RabbitMQ.Client.IModel,System.String,System.String,Steeltoe.Messaging.IMessage,System.Boolean,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute(System.Action{RabbitMQ.Client.IModel})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed(System.Int64)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted(RabbitMQ.Client.IModel)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String,System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Int32,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String,System.Int32,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Type)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.String)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Int32,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String,System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Type,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.Int32,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.String,System.Int32,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.String,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.Int32,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut(System.String)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke(RabbitMQ.Client.IModel)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit(RabbitMQ.Client.IModel,System.String,System.String,System.Boolean,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms(System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  langs:
  - csharp
  - vb
  name: RabbitTemplate
  nameWithType: RabbitTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RabbitTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 33
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: 'public class RabbitTemplate : AbstractMessagingTemplate<RabbitDestination>, IMessageSendingOperations<RabbitDestination>, IMessageReceivingOperations<RabbitDestination>, IMessageRequestReplyOperations<RabbitDestination>, IRabbitTemplate, IMessageListener, IListenerContainerAware, IPublisherCallbackChannel.IListener, IServiceNameAware, IDisposable'
    content.vb: >-
      Public Class RabbitTemplate

          Inherits AbstractMessagingTemplate(Of RabbitDestination)

          Implements IMessageSendingOperations(Of RabbitDestination), IMessageReceivingOperations(Of RabbitDestination), IMessageRequestReplyOperations(Of RabbitDestination), IRabbitTemplate, IMessageListener, IListenerContainerAware, IPublisherCallbackChannel.IListener, IServiceNameAware, IDisposable
  inheritance:
  - System.Object
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  derivedClasses:
  - Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate
  implements:
  - Steeltoe.Messaging.Core.IMessageSendingOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  - Steeltoe.Messaging.Core.IMessageReceivingOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
  - Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware
  - Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  - Steeltoe.Common.Services.IServiceNameAware
  - System.IDisposable
  inheritedMembers:
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(System.Object)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceive(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DefaultReceiveDestination
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ThrowReceivedExceptions
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAsync(System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvertAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Receive
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Receive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvert``1
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvert``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.RequiredDefaultReceiveDestination
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoConvert``1(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.CONVERSION_HINT_HEADER
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DefaultSendDestination
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.MessageConverter
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(System.Object)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Send(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Send(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.RequiredDefaultSendDestination
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DEFAULT_SERVICE_NAME
  commentId: F:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DEFAULT_SERVICE_NAME
  id: DEFAULT_SERVICE_NAME
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DEFAULT_SERVICE_NAME
  nameWithType: RabbitTemplate.DEFAULT_SERVICE_NAME
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DEFAULT_SERVICE_NAME
  type: Field
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DEFAULT_SERVICE_NAME
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 35
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public const string DEFAULT_SERVICE_NAME = "rabbitTemplate"
    return:
      type: System.String
    content.vb: Public Const DEFAULT_SERVICE_NAME As String = "rabbitTemplate"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate._logger
  commentId: F:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate._logger
  id: _logger
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: _logger
  nameWithType: RabbitTemplate._logger
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate._logger
  type: Field
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: _logger
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 46
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected readonly ILogger _logger
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly _logger As ILogger
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)'
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RabbitTemplate(IOptionsMonitor<RabbitOptions>, IConnectionFactory, ISmartMessageConverter, ILogger)
  nameWithType: RabbitTemplate.RabbitTemplate(IOptionsMonitor<RabbitOptions>, IConnectionFactory, ISmartMessageConverter, ILogger)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions>, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Steeltoe.Messaging.Converter.ISmartMessageConverter, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 63
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: >-
      [ActivatorUtilitiesConstructor]

      public RabbitTemplate(IOptionsMonitor<RabbitOptions> optionsMonitor, IConnectionFactory connectionFactory, ISmartMessageConverter messageConverter, ILogger logger = null)
    parameters:
    - id: optionsMonitor
      type: Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions}
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    - id: messageConverter
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: >-
      <ActivatorUtilitiesConstructor>

      Public Sub New(optionsMonitor As IOptionsMonitor(Of RabbitOptions), connectionFactory As IConnectionFactory, messageConverter As ISmartMessageConverter, logger As ILogger = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor*
  attributes:
  - type: Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute
    ctor: Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute.#ctor
    arguments: []
  nameWithType.vb: RabbitTemplate.RabbitTemplate(IOptionsMonitor(Of RabbitOptions), IConnectionFactory, ISmartMessageConverter, ILogger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor(Of Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions), Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Steeltoe.Messaging.Converter.ISmartMessageConverter, Microsoft.Extensions.Logging.ILogger)
  name.vb: RabbitTemplate(IOptionsMonitor(Of RabbitOptions), IConnectionFactory, ISmartMessageConverter, ILogger)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Steeltoe.Messaging.Converter.ISmartMessageConverter,Microsoft.Extensions.Logging.ILogger)'
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RabbitTemplate(RabbitOptions, IConnectionFactory, ISmartMessageConverter, ILogger)
  nameWithType: RabbitTemplate.RabbitTemplate(RabbitOptions, IConnectionFactory, ISmartMessageConverter, ILogger)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Steeltoe.Messaging.Converter.ISmartMessageConverter, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 74
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public RabbitTemplate(RabbitOptions options, IConnectionFactory connectionFactory, ISmartMessageConverter messageConverter, ILogger logger = null)
    parameters:
    - id: options
      type: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    - id: messageConverter
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Sub New(options As RabbitOptions, connectionFactory As IConnectionFactory, messageConverter As ISmartMessageConverter, logger As ILogger = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions},Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)'
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RabbitTemplate(IOptionsMonitor<RabbitOptions>, IConnectionFactory, ILogger)
  nameWithType: RabbitTemplate.RabbitTemplate(IOptionsMonitor<RabbitOptions>, IConnectionFactory, ILogger)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions>, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 84
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public RabbitTemplate(IOptionsMonitor<RabbitOptions> optionsMonitor, IConnectionFactory connectionFactory, ILogger logger = null)
    parameters:
    - id: optionsMonitor
      type: Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions}
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Sub New(optionsMonitor As IOptionsMonitor(Of RabbitOptions), connectionFactory As IConnectionFactory, logger As ILogger = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor*
  nameWithType.vb: RabbitTemplate.RabbitTemplate(IOptionsMonitor(Of RabbitOptions), IConnectionFactory, ILogger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor(Of Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions), Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILogger)
  name.vb: RabbitTemplate(IOptionsMonitor(Of RabbitOptions), IConnectionFactory, ILogger)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions,Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)'
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RabbitTemplate(RabbitOptions, IConnectionFactory, ILogger)
  nameWithType: RabbitTemplate.RabbitTemplate(RabbitOptions, IConnectionFactory, ILogger)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 94
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public RabbitTemplate(RabbitOptions options, IConnectionFactory connectionFactory, ILogger logger = null)
    parameters:
    - id: options
      type: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Sub New(options As RabbitOptions, connectionFactory As IConnectionFactory, logger As ILogger = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory,Microsoft.Extensions.Logging.ILogger)'
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RabbitTemplate(IConnectionFactory, ILogger)
  nameWithType: RabbitTemplate.RabbitTemplate(IConnectionFactory, ILogger)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 104
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public RabbitTemplate(IConnectionFactory connectionFactory, ILogger logger = null)
    parameters:
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Sub New(connectionFactory As IConnectionFactory, logger As ILogger = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Logging.ILogger)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor(Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Microsoft.Extensions.Logging.ILogger)'
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RabbitTemplate(ILogger)
  nameWithType: RabbitTemplate.RabbitTemplate(ILogger)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 114
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public RabbitTemplate(ILogger logger = null)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Sub New(logger As ILogger = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory
  id: ConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConnectionFactory
  nameWithType: RabbitTemplate.ConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 123
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IConnectionFactory ConnectionFactory { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    content.vb: Public Overridable Property ConnectionFactory As IConnectionFactory
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted
  id: IsChannelTransacted
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: IsChannelTransacted
  nameWithType: RabbitTemplate.IsChannelTransacted
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsChannelTransacted
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 125
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool IsChannelTransacted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property IsChannelTransacted As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey
  id: RoutingKey
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RoutingKey
  nameWithType: RabbitTemplate.RoutingKey
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RoutingKey
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 129
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string RoutingKey { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property RoutingKey As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange
  id: Exchange
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Exchange
  nameWithType: RabbitTemplate.Exchange
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Exchange
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 135
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string Exchange { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property Exchange As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue
  id: DefaultReceiveQueue
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DefaultReceiveQueue
  nameWithType: RabbitTemplate.DefaultReceiveQueue
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DefaultReceiveQueue
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 141
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string DefaultReceiveQueue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property DefaultReceiveQueue As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode
  id: ContainerAckMode
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ContainerAckMode
  nameWithType: RabbitTemplate.ContainerAckMode
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ContainerAckMode
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 147
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual AcknowledgeMode ContainerAckMode { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
    content.vb: Public Overridable Property ContainerAckMode As AcknowledgeMode
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.ContainerAckMode
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding
  id: Encoding
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: RabbitTemplate.Encoding
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Encoding
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 149
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Encoding Encoding { get; set; }
    parameters: []
    return:
      type: System.Text.Encoding
    content.vb: Public Overridable Property Encoding As Encoding
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress
  id: ReplyAddress
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReplyAddress
  nameWithType: RabbitTemplate.ReplyAddress
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReplyAddress
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 151
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string ReplyAddress { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property ReplyAddress As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout
  id: ReceiveTimeout
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveTimeout
  nameWithType: RabbitTemplate.ReceiveTimeout
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveTimeout
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 165
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual int ReceiveTimeout { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable Property ReceiveTimeout As Integer
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout
  id: ReplyTimeout
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReplyTimeout
  nameWithType: RabbitTemplate.ReplyTimeout
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReplyTimeout
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 167
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual int ReplyTimeout { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable Property ReplyTimeout As Integer
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter
  id: MessagePropertiesConverter
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: MessagePropertiesConverter
  nameWithType: RabbitTemplate.MessagePropertiesConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MessagePropertiesConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 169
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessageHeadersConverter MessagePropertiesConverter { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
    content.vb: Public Overridable Property MessagePropertiesConverter As IMessageHeadersConverter
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback
  id: ConfirmCallback
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConfirmCallback
  nameWithType: RabbitTemplate.ConfirmCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConfirmCallback
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 171
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual RabbitTemplate.IConfirmCallback ConfirmCallback { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IConfirmCallback
    content.vb: Public Overridable Property ConfirmCallback As RabbitTemplate.IConfirmCallback
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback
  id: ReturnCallback
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReturnCallback
  nameWithType: RabbitTemplate.ReturnCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReturnCallback
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 173
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual RabbitTemplate.IReturnCallback ReturnCallback { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IReturnCallback
    content.vb: Public Overridable Property ReturnCallback As RabbitTemplate.IReturnCallback
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory
  id: Mandatory
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Mandatory
  nameWithType: RabbitTemplate.Mandatory
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Mandatory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 175
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool Mandatory { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property Mandatory As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression
  id: MandatoryExpression
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: MandatoryExpression
  nameWithType: RabbitTemplate.MandatoryExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MandatoryExpression
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 188
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IExpression MandatoryExpression { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.IExpression
    content.vb: Public Overridable Property MandatoryExpression As IExpression
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString
  id: MandatoryExpressionString
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: MandatoryExpressionString
  nameWithType: RabbitTemplate.MandatoryExpressionString
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MandatoryExpressionString
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 190
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string MandatoryExpressionString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property MandatoryExpressionString As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression
  id: SendConnectionFactorySelectorExpression
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendConnectionFactorySelectorExpression
  nameWithType: RabbitTemplate.SendConnectionFactorySelectorExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendConnectionFactorySelectorExpression
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 192
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IExpression SendConnectionFactorySelectorExpression { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.IExpression
    content.vb: Public Overridable Property SendConnectionFactorySelectorExpression As IExpression
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression
  id: ReceiveConnectionFactorySelectorExpression
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveConnectionFactorySelectorExpression
  nameWithType: RabbitTemplate.ReceiveConnectionFactorySelectorExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveConnectionFactorySelectorExpression
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 194
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IExpression ReceiveConnectionFactorySelectorExpression { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.IExpression
    content.vb: Public Overridable Property ReceiveConnectionFactorySelectorExpression As IExpression
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey
  id: CorrelationKey
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: CorrelationKey
  nameWithType: RabbitTemplate.CorrelationKey
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CorrelationKey
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 196
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string CorrelationKey { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property CorrelationKey As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext
  id: EvaluationContext
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: EvaluationContext
  nameWithType: RabbitTemplate.EvaluationContext
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EvaluationContext
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 198
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IEvaluationContext EvaluationContext { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.IEvaluationContext
    content.vb: Public Overridable Property EvaluationContext As IEvaluationContext
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate
  id: RetryTemplate
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RetryTemplate
  nameWithType: RabbitTemplate.RetryTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RetryTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 200
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IRetryOperation RetryTemplate { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Retry.IRetryOperation
    content.vb: Public Overridable Property RetryTemplate As IRetryOperation
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback
  id: RecoveryCallback
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RecoveryCallback
  nameWithType: RabbitTemplate.RecoveryCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RecoveryCallback
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 202
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IRecoveryCallback RecoveryCallback { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Retry.IRecoveryCallback
    content.vb: Public Overridable Property RecoveryCallback As IRecoveryCallback
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors
  id: BeforePublishPostProcessors
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: BeforePublishPostProcessors
  nameWithType: RabbitTemplate.BeforePublishPostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: BeforePublishPostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 204
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IList<IMessagePostProcessor> BeforePublishPostProcessors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
    content.vb: Public Overridable ReadOnly Property BeforePublishPostProcessors As IList(Of IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors
  id: AfterReceivePostProcessors
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: AfterReceivePostProcessors
  nameWithType: RabbitTemplate.AfterReceivePostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AfterReceivePostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 206
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IList<IMessagePostProcessor> AfterReceivePostProcessors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
    content.vb: Public Overridable ReadOnly Property AfterReceivePostProcessors As IList(Of IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor
  id: CorrelationDataPostProcessor
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: CorrelationDataPostProcessor
  nameWithType: RabbitTemplate.CorrelationDataPostProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CorrelationDataPostProcessor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 208
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual ICorrelationDataPostProcessor CorrelationDataPostProcessor { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Core.ICorrelationDataPostProcessor
    content.vb: Public Overridable Property CorrelationDataPostProcessor As ICorrelationDataPostProcessor
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues
  id: UseTemporaryReplyQueues
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UseTemporaryReplyQueues
  nameWithType: RabbitTemplate.UseTemporaryReplyQueues
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UseTemporaryReplyQueues
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 210
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool UseTemporaryReplyQueues { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property UseTemporaryReplyQueues As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer
  id: UseDirectReplyToContainer
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UseDirectReplyToContainer
  nameWithType: RabbitTemplate.UseDirectReplyToContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UseDirectReplyToContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 212
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool UseDirectReplyToContainer { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property UseDirectReplyToContainer As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression
  id: UserIdExpression
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UserIdExpression
  nameWithType: RabbitTemplate.UserIdExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UserIdExpression
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 214
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IExpression UserIdExpression { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Expression.IExpression
    content.vb: Public Overridable Property UserIdExpression As IExpression
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString
  id: UserIdExpressionString
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UserIdExpressionString
  nameWithType: RabbitTemplate.UserIdExpressionString
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UserIdExpressionString
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 216
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string UserIdExpressionString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property UserIdExpressionString As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName
  id: ServiceName
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: RabbitTemplate.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceName
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 218
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string ServiceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property ServiceName As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName*
  implements:
  - Steeltoe.Common.Services.IServiceNameAware.ServiceName
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId
  id: UserCorrelationId
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UserCorrelationId
  nameWithType: RabbitTemplate.UserCorrelationId
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UserCorrelationId
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 220
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool UserCorrelationId { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property UserCorrelationId As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection
  id: UsePublisherConnection
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UsePublisherConnection
  nameWithType: RabbitTemplate.UsePublisherConnection
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UsePublisherConnection
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 222
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool UsePublisherConnection { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property UsePublisherConnection As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer
  id: NoLocalReplyConsumer
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: NoLocalReplyConsumer
  nameWithType: RabbitTemplate.NoLocalReplyConsumer
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: NoLocalReplyConsumer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 224
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool NoLocalReplyConsumer { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property NoLocalReplyConsumer As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler
  id: ReplyErrorHandler
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReplyErrorHandler
  nameWithType: RabbitTemplate.ReplyErrorHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReplyErrorHandler
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 226
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IErrorHandler ReplyErrorHandler { get; set; }
    parameters: []
    return:
      type: Steeltoe.Common.Util.IErrorHandler
    content.vb: Public Overridable Property ReplyErrorHandler As IErrorHandler
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning
  id: IsRunning
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: IsRunning
  nameWithType: RabbitTemplate.IsRunning
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsRunning
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 228
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool IsRunning { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsRunning As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID
  id: UUID
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UUID
  nameWithType: RabbitTemplate.UUID
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UUID
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 240
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual string UUID { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property UUID As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.UUID
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener
  id: IsConfirmListener
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: IsConfirmListener
  nameWithType: RabbitTemplate.IsConfirmListener
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsConfirmListener
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 242
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool IsConfirmListener { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsConfirmListener As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsConfirmListener
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener
  id: IsReturnListener
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: IsReturnListener
  nameWithType: RabbitTemplate.IsReturnListener
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsReturnListener
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 244
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool IsReturnListener { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsReturnListener As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsReturnListener
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options
  id: Options
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: RabbitTemplate.Options
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Options
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 246
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected RabbitOptions Options { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    content.vb: Protected ReadOnly Property Options As RabbitOptions
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  id: SetBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SetBeforePublishPostProcessors(IMessagePostProcessor[])
  nameWithType: RabbitTemplate.SetBeforePublishPostProcessors(IMessagePostProcessor[])
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetBeforePublishPostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 263
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void SetBeforePublishPostProcessors(params IMessagePostProcessor[] beforePublishPostProcessors)
    parameters:
    - id: beforePublishPostProcessors
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
    content.vb: Public Overridable Sub SetBeforePublishPostProcessors(ParamArray beforePublishPostProcessors As IMessagePostProcessor())
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors*
  nameWithType.vb: RabbitTemplate.SetBeforePublishPostProcessors(IMessagePostProcessor())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor())
  name.vb: SetBeforePublishPostProcessors(IMessagePostProcessor())
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  id: AddBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: AddBeforePublishPostProcessors(IMessagePostProcessor[])
  nameWithType: RabbitTemplate.AddBeforePublishPostProcessors(IMessagePostProcessor[])
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddBeforePublishPostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 283
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void AddBeforePublishPostProcessors(params IMessagePostProcessor[] beforePublishPostProcessors)
    parameters:
    - id: beforePublishPostProcessors
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
    content.vb: Public Overridable Sub AddBeforePublishPostProcessors(ParamArray beforePublishPostProcessors As IMessagePostProcessor())
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors*
  nameWithType.vb: RabbitTemplate.AddBeforePublishPostProcessors(IMessagePostProcessor())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor())
  name.vb: AddBeforePublishPostProcessors(IMessagePostProcessor())
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: RemoveBeforePublishPostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RemoveBeforePublishPostProcessor(IMessagePostProcessor)
  nameWithType: RabbitTemplate.RemoveBeforePublishPostProcessor(IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RemoveBeforePublishPostProcessor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 301
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool RemoveBeforePublishPostProcessor(IMessagePostProcessor beforePublishPostProcessor)
    parameters:
    - id: beforePublishPostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    return:
      type: System.Boolean
    content.vb: Public Overridable Function RemoveBeforePublishPostProcessor(beforePublishPostProcessor As IMessagePostProcessor) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  id: SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SetAfterReceivePostProcessors(IMessagePostProcessor[])
  nameWithType: RabbitTemplate.SetAfterReceivePostProcessors(IMessagePostProcessor[])
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetAfterReceivePostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 320
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void SetAfterReceivePostProcessors(params IMessagePostProcessor[] afterReceivePostProcessors)
    parameters:
    - id: afterReceivePostProcessors
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
    content.vb: Public Overridable Sub SetAfterReceivePostProcessors(ParamArray afterReceivePostProcessors As IMessagePostProcessor())
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors*
  nameWithType.vb: RabbitTemplate.SetAfterReceivePostProcessors(IMessagePostProcessor())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor())
  name.vb: SetAfterReceivePostProcessors(IMessagePostProcessor())
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  id: AddAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: AddAfterReceivePostProcessors(IMessagePostProcessor[])
  nameWithType: RabbitTemplate.AddAfterReceivePostProcessors(IMessagePostProcessor[])
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddAfterReceivePostProcessors
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 340
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void AddAfterReceivePostProcessors(params IMessagePostProcessor[] afterReceivePostProcessors)
    parameters:
    - id: afterReceivePostProcessors
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
    content.vb: Public Overridable Sub AddAfterReceivePostProcessors(ParamArray afterReceivePostProcessors As IMessagePostProcessor())
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors*
  nameWithType.vb: RabbitTemplate.AddAfterReceivePostProcessors(IMessagePostProcessor())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor())
  name.vb: AddAfterReceivePostProcessors(IMessagePostProcessor())
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: RemoveAfterReceivePostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: RemoveAfterReceivePostProcessor(IMessagePostProcessor)
  nameWithType: RabbitTemplate.RemoveAfterReceivePostProcessor(IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RemoveAfterReceivePostProcessor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 358
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool RemoveAfterReceivePostProcessor(IMessagePostProcessor afterReceivePostProcessor)
    parameters:
    - id: afterReceivePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    return:
      type: System.Boolean
    content.vb: Public Overridable Function RemoveAfterReceivePostProcessor(afterReceivePostProcessor As IMessagePostProcessor) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
  id: HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: HandleConfirm(PendingConfirm, Boolean)
  nameWithType: RabbitTemplate.HandleConfirm(PendingConfirm, Boolean)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandleConfirm
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 380
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void HandleConfirm(PendingConfirm pendingConfirm, bool ack)
    parameters:
    - id: pendingConfirm
      type: Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
    - id: ack
      type: System.Boolean
    content.vb: Public Overridable Sub HandleConfirm(pendingConfirm As PendingConfirm, ack As Boolean)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
  id: HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: HandleReturn(Int32, String, String, String, IBasicProperties, Byte[])
  nameWithType: RabbitTemplate.HandleReturn(Int32, String, String, String, IBasicProperties, Byte[])
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn(System.Int32, System.String, System.String, System.String, RabbitMQ.Client.IBasicProperties, System.Byte[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandleReturn
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 388
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void HandleReturn(int replyCode, string replyText, string exchange, string routingKey, IBasicProperties properties, byte[] body)
    parameters:
    - id: replyCode
      type: System.Int32
    - id: replyText
      type: System.String
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: properties
      type: RabbitMQ.Client.IBasicProperties
    - id: body
      type: System.Byte[]
    content.vb: Public Overridable Sub HandleReturn(replyCode As Integer, replyText As String, exchange As String, routingKey As String, properties As IBasicProperties, body As Byte())
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
  nameWithType.vb: RabbitTemplate.HandleReturn(Int32, String, String, String, IBasicProperties, Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn(System.Int32, System.String, System.String, System.String, RabbitMQ.Client.IBasicProperties, System.Byte())
  name.vb: HandleReturn(Int32, String, String, String, IBasicProperties, Byte())
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke(RabbitMQ.Client.IModel)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke(RabbitMQ.Client.IModel)
  id: Revoke(RabbitMQ.Client.IModel)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Revoke(IModel)
  nameWithType: RabbitTemplate.Revoke(IModel)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke(RabbitMQ.Client.IModel)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Revoke
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 422
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void Revoke(IModel channel)
    parameters:
    - id: channel
      type: RabbitMQ.Client.IModel
    content.vb: Public Overridable Sub Revoke(channel As IModel)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke(RabbitMQ.Client.IModel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
  id: OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: OnMessageBatch(List<IMessage>)
  nameWithType: RabbitTemplate.OnMessageBatch(List<IMessage>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: OnMessageBatch
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 431
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void OnMessageBatch(List<IMessage> messages)
    parameters:
    - id: messages
      type: System.Collections.Generic.List{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Sub OnMessageBatch(messages As List(Of IMessage))
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
  nameWithType.vb: RabbitTemplate.OnMessageBatch(List(Of IMessage))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch(System.Collections.Generic.List(Of Steeltoe.Messaging.IMessage))
  name.vb: OnMessageBatch(List(Of IMessage))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage(Steeltoe.Messaging.IMessage)
  id: OnMessage(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: OnMessage(IMessage)
  nameWithType: RabbitTemplate.OnMessage(IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: OnMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 436
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void OnMessage(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Sub OnMessage(message As IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage(Steeltoe.Messaging.IMessage)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames
  id: GetExpectedQueueNames
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: GetExpectedQueueNames()
  nameWithType: RabbitTemplate.GetExpectedQueueNames()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetExpectedQueueNames
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 469
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual List<string> GetExpectedQueueNames()
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Overridable Function GetExpectedQueueNames As List(Of String)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,Steeltoe.Messaging.IMessage)
  id: Send(System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Send(String, IMessage)
  nameWithType: RabbitTemplate.Send(String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Send
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 496
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void Send(string routingKey, IMessage message)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Sub Send(routingKey As String, message As IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  id: Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Send(String, String, IMessage)
  nameWithType: RabbitTemplate.Send(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String, System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Send
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 501
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void Send(string exchange, string routingKey, IMessage message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Sub Send(exchange As String, routingKey As String, message As IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Send(String, String, IMessage, CorrelationData)
  nameWithType: RabbitTemplate.Send(String, String, IMessage, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Send
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 506
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void Send(string exchange, string routingKey, IMessage message, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Public Overridable Sub Send(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAsync(String, IMessage, CancellationToken)
  nameWithType: RabbitTemplate.SendAsync(String, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 518
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task SendAsync(string routingKey, IMessage message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SendAsync(routingKey As String, message As IMessage, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAsync(String, String, IMessage, CancellationToken)
  nameWithType: RabbitTemplate.SendAsync(String, String, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String, System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 523
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task SendAsync(string exchange, string routingKey, IMessage message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SendAsync(exchange As String, routingKey As String, message As IMessage, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAsync(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.SendAsync(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 528
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task SendAsync(string exchange, string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SendAsync(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(Object, IMessagePostProcessor)
  nameWithType: RabbitTemplate.ConvertAndSend(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 545
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(object message, IMessagePostProcessor messagePostProcessor)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    content.vb: Public Overridable Sub ConvertAndSend(message As Object, messagePostProcessor As IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(Object, IMessagePostProcessor, CorrelationData)
  nameWithType: RabbitTemplate.ConvertAndSend(Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 550
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Public Overridable Sub ConvertAndSend(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object)
  id: ConvertAndSend(System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, Object)
  nameWithType: RabbitTemplate.ConvertAndSend(String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 555
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string routingKey, object message)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    content.vb: Public Overridable Sub ConvertAndSend(routingKey As String, message As Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, Object, CorrelationData)
  nameWithType: RabbitTemplate.ConvertAndSend(String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 560
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string routingKey, object message, CorrelationData correlationData)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Public Overridable Sub ConvertAndSend(routingKey As String, message As Object, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, Object, IMessagePostProcessor)
  nameWithType: RabbitTemplate.ConvertAndSend(String, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 565
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string routingKey, object message, IMessagePostProcessor messagePostProcessor)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    content.vb: Public Overridable Sub ConvertAndSend(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: RabbitTemplate.ConvertAndSend(String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 570
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Public Overridable Sub ConvertAndSend(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  id: ConvertAndSend(System.String,System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object)
  nameWithType: RabbitTemplate.ConvertAndSend(String, String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 575
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string exchange, string routingKey, object message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    content.vb: Public Overridable Sub ConvertAndSend(exchange As String, routingKey As String, message As Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object, CorrelationData)
  nameWithType: RabbitTemplate.ConvertAndSend(String, String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 580
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string exchange, string routingKey, object message, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Public Overridable Sub ConvertAndSend(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object, IMessagePostProcessor)
  nameWithType: RabbitTemplate.ConvertAndSend(String, String, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 585
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    content.vb: Public Overridable Sub ConvertAndSend(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: RabbitTemplate.ConvertAndSend(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 590
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void ConvertAndSend(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Public Overridable Sub ConvertAndSend(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 601
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(object message, IMessagePostProcessor messagePostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(message As Object, messagePostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 606
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, Object, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, Object, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 611
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string routingKey, object message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(routingKey As String, message As Object, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, Object, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, Object, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 616
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string routingKey, object message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(routingKey As String, message As Object, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 621
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 626
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, String, Object, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, String, Object, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 631
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string exchange, string routingKey, object message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(exchange As String, routingKey As String, message As Object, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, String, Object, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, String, Object, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 636
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string exchange, string routingKey, object message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, String, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, String, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 641
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertAndSendAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSendAsync(String, String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertAndSendAsync(String, String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 646
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task ConvertAndSendAsync(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ConvertAndSendAsync(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String,System.Threading.CancellationToken)
  id: ReceiveAsync(System.String,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAsync(String, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAsync(String, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 660
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> ReceiveAsync(string queueName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function ReceiveAsync(queueName As String, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.Int32,System.Threading.CancellationToken)
  id: ReceiveAsync(System.Int32,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int32, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAsync(Int32, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 665
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> ReceiveAsync(int timeoutMillis, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: timeoutMillis
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function ReceiveAsync(timeoutMillis As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: ReceiveAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAsync(String, Int32, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAsync(String, Int32, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 670
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> ReceiveAsync(string queueName, int timeoutMillis, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function ReceiveAsync(queueName As String, timeoutMillis As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.Int32)
  id: Receive(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Receive(Int32)
  nameWithType: RabbitTemplate.Receive(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Receive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 675
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage Receive(int timeoutMillis)
    parameters:
    - id: timeoutMillis
      type: System.Int32
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function Receive(timeoutMillis As Integer) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String)
  id: Receive(System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Receive(String)
  nameWithType: RabbitTemplate.Receive(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Receive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 680
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage Receive(string queueName)
    parameters:
    - id: queueName
      type: System.String
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function Receive(queueName As String) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String,System.Int32)
  id: Receive(System.String,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Receive(String, Int32)
  nameWithType: RabbitTemplate.Receive(String, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Receive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 685
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage Receive(string queueName, int timeoutMillis)
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function Receive(queueName As String, timeoutMillis As Integer) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.Int32)
  id: ReceiveAndConvert``1(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert<T>(Int32)
  nameWithType: RabbitTemplate.ReceiveAndConvert<T>(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 701
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ReceiveAndConvert<T>(int timeoutMillis)
    parameters:
    - id: timeoutMillis
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ReceiveAndConvert(Of T)(timeoutMillis As Integer) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
  nameWithType.vb: RabbitTemplate.ReceiveAndConvert(Of T)(Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(Of T)(System.Int32)
  name.vb: ReceiveAndConvert(Of T)(Int32)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.String)
  id: ReceiveAndConvert``1(System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert<T>(String)
  nameWithType: RabbitTemplate.ReceiveAndConvert<T>(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert<T>(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 706
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ReceiveAndConvert<T>(string queueName)
    parameters:
    - id: queueName
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ReceiveAndConvert(Of T)(queueName As String) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  nameWithType.vb: RabbitTemplate.ReceiveAndConvert(Of T)(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(Of T)(System.String)
  name.vb: ReceiveAndConvert(Of T)(String)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  id: ReceiveAndConvert``1(System.String,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert<T>(String, Int32)
  nameWithType: RabbitTemplate.ReceiveAndConvert<T>(String, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert<T>(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 711
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ReceiveAndConvert<T>(string queueName, int timeoutMillis)
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ReceiveAndConvert(Of T)(queueName As String, timeoutMillis As Integer) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  nameWithType.vb: RabbitTemplate.ReceiveAndConvert(Of T)(String, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(Of T)(System.String, System.Int32)
  name.vb: ReceiveAndConvert(Of T)(String, Int32)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Type)
  id: ReceiveAndConvert(System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert(Type)
  nameWithType: RabbitTemplate.ReceiveAndConvert(Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 716
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ReceiveAndConvert(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ReceiveAndConvert(type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String,System.Type)
  id: ReceiveAndConvert(System.String,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert(String, Type)
  nameWithType: RabbitTemplate.ReceiveAndConvert(String, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 721
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ReceiveAndConvert(string queueName, Type type)
    parameters:
    - id: queueName
      type: System.String
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ReceiveAndConvert(queueName As String, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Int32,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Int32,System.Type)
  id: ReceiveAndConvert(System.Int32,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert(Int32, Type)
  nameWithType: RabbitTemplate.ReceiveAndConvert(Int32, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Int32, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 726
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ReceiveAndConvert(int timeoutMillis, Type type)
    parameters:
    - id: timeoutMillis
      type: System.Int32
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ReceiveAndConvert(timeoutMillis As Integer, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String,System.Int32,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String,System.Int32,System.Type)
  id: ReceiveAndConvert(System.String,System.Int32,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert(String, Int32, Type)
  nameWithType: RabbitTemplate.ReceiveAndConvert(String, Int32, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.String, System.Int32, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 731
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ReceiveAndConvert(string queueName, int timeoutMillis, Type type)
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ReceiveAndConvert(queueName As String, timeoutMillis As Integer, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.Int32,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.Int32,System.Threading.CancellationToken)
  id: ReceiveAndConvertAsync``1(System.Int32,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvertAsync<T>(Int32, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync<T>(Int32, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync<T>(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvertAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 736
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ReceiveAndConvertAsync<T>(int timeoutMillis, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: timeoutMillis
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ReceiveAndConvertAsync(Of T)(timeoutMillis As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  nameWithType.vb: RabbitTemplate.ReceiveAndConvertAsync(Of T)(Int32, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(Of T)(System.Int32, System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(Int32, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.String,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.String,System.Threading.CancellationToken)
  id: ReceiveAndConvertAsync``1(System.String,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvertAsync<T>(String, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync<T>(String, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync<T>(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvertAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 741
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ReceiveAndConvertAsync<T>(string queueName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ReceiveAndConvertAsync(Of T)(queueName As String, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  nameWithType.vb: RabbitTemplate.ReceiveAndConvertAsync(Of T)(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(Of T)(System.String, System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(String, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync``1(System.String,System.Int32,System.Threading.CancellationToken)
  id: ReceiveAndConvertAsync``1(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvertAsync<T>(String, Int32, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync<T>(String, Int32, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync<T>(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvertAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 746
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ReceiveAndConvertAsync<T>(string queueName, int timeoutMillis, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ReceiveAndConvertAsync(Of T)(queueName As String, timeoutMillis As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  nameWithType.vb: RabbitTemplate.ReceiveAndConvertAsync(Of T)(String, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(Of T)(System.String, System.Int32, System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(String, Int32, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Type,System.Threading.CancellationToken)
  id: ReceiveAndConvertAsync(System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvertAsync(Type, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync(Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvertAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 754
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ReceiveAndConvertAsync(Type type, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: type
      type: System.Type
    - id: cancellation
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ReceiveAndConvertAsync(type As Type, cancellation As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String,System.Type,System.Threading.CancellationToken)
  id: ReceiveAndConvertAsync(System.String,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvertAsync(String, Type, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync(String, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvertAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 759
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ReceiveAndConvertAsync(string queueName, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ReceiveAndConvertAsync(queueName As String, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Int32,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Int32,System.Type,System.Threading.CancellationToken)
  id: ReceiveAndConvertAsync(System.Int32,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvertAsync(Int32, Type, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync(Int32, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Int32, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvertAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 764
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ReceiveAndConvertAsync(int timeoutMillis, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: timeoutMillis
      type: System.Int32
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ReceiveAndConvertAsync(timeoutMillis As Integer, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  id: ReceiveAndConvertAsync(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvertAsync(String, Int32, Type, CancellationToken)
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync(String, Int32, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.String, System.Int32, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvertAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 769
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ReceiveAndConvertAsync(string queueName, int timeoutMillis, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ReceiveAndConvertAsync(queueName As String, timeoutMillis As Integer, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  id: ReceiveAndReply``2(System.Func{``0,``1})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(Func<R, S>)
  nameWithType: RabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 780
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool ReceiveAndReply<R, S>(Func<R, S> callback)
    parameters:
    - id: callback
      type: System.Func{{R},{S}}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ReceiveAndReply(Of R, S)(callback As Func(Of R, S)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{{R},{S}})
  nameWithType.vb: RabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  id: ReceiveAndReply``2(System.String,System.Func{``0,``1})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(String, Func<R, S>)
  nameWithType: RabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 785
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool ReceiveAndReply<R, S>(string queueName, Func<R, S> callback)
    parameters:
    - id: queueName
      type: System.String
    - id: callback
      type: System.Func{{R},{S}}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ReceiveAndReply(Of R, S)(queueName As String, callback As Func(Of R, S)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{{R},{S}})
  nameWithType.vb: RabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  id: ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(Func<R, S>, String, String)
  nameWithType: RabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 790
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool ReceiveAndReply<R, S>(Func<R, S> callback, string exchange, string routingKey)
    parameters:
    - id: callback
      type: System.Func{{R},{S}}
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ReceiveAndReply(Of R, S)(callback As Func(Of R, S), exchange As String, routingKey As String) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{{R},{S}},System.String,System.String)
  nameWithType.vb: RabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  id: ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  nameWithType: RabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 795
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool ReceiveAndReply<R, S>(string queueName, Func<R, S> callback, string replyExchange, string replyRoutingKey)
    parameters:
    - id: queueName
      type: System.String
    - id: callback
      type: System.Func{{R},{S}}
    - id: replyExchange
      type: System.String
    - id: replyRoutingKey
      type: System.String
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ReceiveAndReply(Of R, S)(queueName As String, callback As Func(Of R, S), replyExchange As String, replyRoutingKey As String) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{{R},{S}},System.String,System.String)
  nameWithType.vb: RabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  id: ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: RabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 800
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool ReceiveAndReply<R, S>(Func<R, S> callback, Func<IMessage, S, Address> replyToAddressCallback)
    parameters:
    - id: callback
      type: System.Func{{R},{S}}
    - id: replyToAddressCallback
      type: System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ReceiveAndReply(Of R, S)(callback As Func(Of R, S), replyToAddressCallback As Func(Of IMessage, S, Address)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{{R},{S}},System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address})
  nameWithType.vb: RabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  id: ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: RabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 805
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool ReceiveAndReply<R, S>(string queueName, Func<R, S> callback, Func<IMessage, S, Address> replyToAddressCallback)
    parameters:
    - id: queueName
      type: System.String
    - id: callback
      type: System.Func{{R},{S}}
    - id: replyToAddressCallback
      type: System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ReceiveAndReply(Of R, S)(queueName As String, callback As Func(Of R, S), replyToAddressCallback As Func(Of IMessage, S, Address)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{{R},{S}},System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address})
  nameWithType.vb: RabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: SendAndReceive(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceive(IMessage, CorrelationData)
  nameWithType: RabbitTemplate.SendAndReceive(IMessage, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 812
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage SendAndReceive(IMessage message, CorrelationData correlationData)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function SendAndReceive(message As IMessage, correlationData As CorrelationData) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  id: SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceive(String, IMessage)
  nameWithType: RabbitTemplate.SendAndReceive(String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 817
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage SendAndReceive(string routingKey, IMessage message)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function SendAndReceive(routingKey As String, message As IMessage) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: SendAndReceive(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceive(String, IMessage, CorrelationData)
  nameWithType: RabbitTemplate.SendAndReceive(String, IMessage, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 822
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage SendAndReceive(string routingKey, IMessage message, CorrelationData correlationData)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function SendAndReceive(routingKey As String, message As IMessage, correlationData As CorrelationData) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  id: SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceive(String, String, IMessage)
  nameWithType: RabbitTemplate.SendAndReceive(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String, System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 827
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage SendAndReceive(string exchange, string routingKey, IMessage message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function SendAndReceive(exchange As String, routingKey As String, message As IMessage) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceive(String, String, IMessage, CorrelationData)
  nameWithType: RabbitTemplate.SendAndReceive(String, String, IMessage, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 832
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual IMessage SendAndReceive(string exchange, string routingKey, IMessage message, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function SendAndReceive(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.SendAndReceiveAsync(IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 837
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> SendAndReceiveAsync(IMessage message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function SendAndReceiveAsync(message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(String, IMessage, CancellationToken)
  nameWithType: RabbitTemplate.SendAndReceiveAsync(String, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 842
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> SendAndReceiveAsync(string routingKey, IMessage message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function SendAndReceiveAsync(routingKey As String, message As IMessage, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(String, IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.SendAndReceiveAsync(String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 847
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> SendAndReceiveAsync(string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function SendAndReceiveAsync(routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(String, String, IMessage, CancellationToken)
  nameWithType: RabbitTemplate.SendAndReceiveAsync(String, String, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String, System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 852
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> SendAndReceiveAsync(string exchange, string routingKey, IMessage message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function SendAndReceiveAsync(exchange As String, routingKey As String, message As IMessage, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.SendAndReceiveAsync(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 857
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<IMessage> SendAndReceiveAsync(string exchange, string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function SendAndReceiveAsync(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(Object, CorrelationData)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 866
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(object message, CorrelationData correlationData)
    parameters:
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(message As Object, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(Object, CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(Object, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 871
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(object message, IMessagePostProcessor messagePostProcessor)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(message As Object, messagePostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor, CorrelationData)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 876
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor, CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object)
  id: ConvertSendAndReceive``1(System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 881
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string routingKey, object message)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(routingKey As String, message As Object) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(String, Object)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object, CorrelationData)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 886
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string routingKey, object message, CorrelationData correlationData)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(routingKey As String, message As Object, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, Object, CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, Object, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object, IMessagePostProcessor)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 891
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string routingKey, object message, IMessagePostProcessor messagePostProcessor)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, Object, IMessagePostProcessor)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(String, Object, IMessagePostProcessor)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 896
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, Object, IMessagePostProcessor, CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, Object, IMessagePostProcessor, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  id: ConvertSendAndReceive``1(System.String,System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, String, Object)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 901
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string exchange, string routingKey, object message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(exchange As String, routingKey As String, message As Object) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, String, Object, CorrelationData)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 906
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string exchange, string routingKey, object message, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object, CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 911
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: RabbitTemplate.ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 916
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(Object, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(Object, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 921
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(object message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(message As Object, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(Object, CorrelationData, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CorrelationData, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 926
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(object message, IMessagePostProcessor messagePostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(message As Object, messagePostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 931
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CorrelationData, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, Object, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 936
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string routingKey, object message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(routingKey As String, message As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, Object, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, Object, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 941
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string routingKey, object message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(routingKey As String, message As Object, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, Object, CorrelationData, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, CorrelationData, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 946
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, Object, IMessagePostProcessor, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 951
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, String, Object, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, String, Object, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 956
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(exchange As String, routingKey As String, message As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, String, Object, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.String, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, String, Object, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, String, Object, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, String, Object, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 961
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, String, Object, CorrelationData, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, String, Object, CorrelationData, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, String, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, String, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 966
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, String, Object, IMessagePostProcessor, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, String, Object, IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync<T>(String, String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 971
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  nameWithType.vb: RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData, CancellationToken)
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,System.Type)
  id: ConvertSendAndReceiveAsType(System.Object,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(Object, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(Object, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 980
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(object message, Type type)
    parameters:
    - id: message
      type: System.Object
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(message As Object, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  id: ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(Object, CorrelationData, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(Object, CorrelationData, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 985
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(object message, CorrelationData correlationData, Type type)
    parameters:
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(message As Object, correlationData As CorrelationData, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  id: ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(Object, IMessagePostProcessor, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(Object, IMessagePostProcessor, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 990
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(object message, IMessagePostProcessor messagePostProcessor, Type type)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(message As Object, messagePostProcessor As IMessagePostProcessor, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  id: ConvertSendAndReceiveAsType(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(Object, IMessagePostProcessor, CorrelationData, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(Object, IMessagePostProcessor, CorrelationData, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 995
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, Type type)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.Object,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, Object, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, Object, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1000
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string routingKey, object message, Type type)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(routingKey As String, message As Object, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, Object, CorrelationData, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, Object, CorrelationData, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1005
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string routingKey, object message, CorrelationData correlationData, Type type)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(routingKey As String, message As Object, correlationData As CorrelationData, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, Object, IMessagePostProcessor, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, Object, IMessagePostProcessor, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1010
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string routingKey, object message, IMessagePostProcessor messagePostProcessor, Type type)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, Object, IMessagePostProcessor, CorrelationData, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, Object, IMessagePostProcessor, CorrelationData, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1015
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, Type type)
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.String,System.Object,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, String, Object, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, String, Object, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.String, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1020
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, Type type)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(exchange As String, routingKey As String, message As Object, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, String, Object, CorrelationData, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, String, Object, CorrelationData, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1025
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, CorrelationData correlationData, Type type)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, String, Object, IMessagePostProcessor, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, String, Object, IMessagePostProcessor, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1030
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, Type type)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  id: ConvertSendAndReceiveAsType(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsType(String, String, Object, IMessagePostProcessor, CorrelationData, Type)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType(String, String, Object, IMessagePostProcessor, CorrelationData, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1035
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual object ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, Type type)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function ConvertSendAndReceiveAsType(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, type As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.Object,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(Object, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(Object, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1053
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(object message, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(message As Object, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(Object, CorrelationData, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(Object, CorrelationData, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1058
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(object message, CorrelationData correlationData, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(message As Object, correlationData As CorrelationData, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(Object, IMessagePostProcessor, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(Object, IMessagePostProcessor, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1063
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(object message, IMessagePostProcessor messagePostProcessor, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(message As Object, messagePostProcessor As IMessagePostProcessor, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(Object, IMessagePostProcessor, CorrelationData, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(Object, IMessagePostProcessor, CorrelationData, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1068
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, Object, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, Object, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.Object, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1073
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(routingKey As String, message As Object, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, Object, CorrelationData, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, Object, CorrelationData, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1078
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, CorrelationData correlationData, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(routingKey As String, message As Object, correlationData As CorrelationData, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, Object, IMessagePostProcessor, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, Object, IMessagePostProcessor, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1083
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, IMessagePostProcessor messagePostProcessor, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, Object, IMessagePostProcessor, CorrelationData, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, Object, IMessagePostProcessor, CorrelationData, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1088
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, String, Object, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, String, Object, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.String, System.Object, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1093
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(exchange As String, routingKey As String, message As Object, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, String, Object, CorrelationData, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, String, Object, CorrelationData, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1098
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, CorrelationData correlationData, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, String, Object, IMessagePostProcessor, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, String, Object, IMessagePostProcessor, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1103
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsTypeAsync(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsTypeAsync(String, String, Object, IMessagePostProcessor, CorrelationData, Type, CancellationToken)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(String, String, Object, IMessagePostProcessor, CorrelationData, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsTypeAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1108
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task<object> ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsTypeAsync(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData, type As Type, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: CorrelationConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: CorrelationConvertAndSend(Object, CorrelationData)
  nameWithType: RabbitTemplate.CorrelationConvertAndSend(Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CorrelationConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1134
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void CorrelationConvertAndSend(object message, CorrelationData correlationData)
    parameters:
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Public Overridable Sub CorrelationConvertAndSend(message As Object, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed(System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed(System.Int64)
  id: GetUnconfirmed(System.Int64)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: GetUnconfirmed(Int64)
  nameWithType: RabbitTemplate.GetUnconfirmed(Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed(System.Int64)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetUnconfirmed
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1139
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual ICollection<CorrelationData> GetUnconfirmed(long age)
    parameters:
    - id: age
      type: System.Int64
    return:
      type: System.Collections.Generic.ICollection{Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData}
    content.vb: Public Overridable Function GetUnconfirmed(age As Long) As ICollection(Of CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount
  id: GetUnconfirmedCount
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: GetUnconfirmedCount()
  nameWithType: RabbitTemplate.GetUnconfirmedCount()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetUnconfirmedCount
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1158
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual int GetUnconfirmedCount()
    return:
      type: System.Int32
    content.vb: Public Overridable Function GetUnconfirmedCount As Integer
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute(System.Action{RabbitMQ.Client.IModel})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute(System.Action{RabbitMQ.Client.IModel})
  id: Execute(System.Action{RabbitMQ.Client.IModel})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Execute(Action<IModel>)
  nameWithType: RabbitTemplate.Execute(Action<IModel>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute(System.Action<RabbitMQ.Client.IModel>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Execute
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1173
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void Execute(Action<IModel> action)
    parameters:
    - id: action
      type: System.Action{RabbitMQ.Client.IModel}
    content.vb: Public Overridable Sub Execute(action As Action(Of IModel))
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute*
  nameWithType.vb: RabbitTemplate.Execute(Action(Of IModel))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute(System.Action(Of RabbitMQ.Client.IModel))
  name.vb: Execute(Action(Of IModel))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  id: Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Execute<T>(Func<IModel, T>)
  nameWithType: RabbitTemplate.Execute<T>(Func<IModel, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute<T>(System.Func<RabbitMQ.Client.IModel, T>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Execute
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1183
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T Execute<T>(Func<IModel, T> action)
    parameters:
    - id: action
      type: System.Func{RabbitMQ.Client.IModel,{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function Execute(Of T)(action As Func(Of IModel, T)) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,{T}})
  nameWithType.vb: RabbitTemplate.Execute(Of T)(Func(Of IModel, T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute(Of T)(System.Func(Of RabbitMQ.Client.IModel, T))
  name.vb: Execute(Of T)(Func(Of IModel, T))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener(RabbitMQ.Client.IModel)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener(RabbitMQ.Client.IModel)
  id: AddListener(RabbitMQ.Client.IModel)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: AddListener(IModel)
  nameWithType: RabbitTemplate.AddListener(IModel)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener(RabbitMQ.Client.IModel)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddListener
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1188
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void AddListener(IModel channel)
    parameters:
    - id: channel
      type: RabbitMQ.Client.IModel
    content.vb: Public Overridable Sub AddListener(channel As IModel)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  id: Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Invoke<T>(Func<IRabbitTemplate, T>)
  nameWithType: RabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Invoke
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1205
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T Invoke<T>(Func<IRabbitTemplate, T> rabbitOperations)
    parameters:
    - id: rabbitOperations
      type: System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function Invoke(Of T)(rabbitOperations As Func(Of IRabbitTemplate, T)) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}})
  nameWithType.vb: RabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  id: Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  nameWithType: RabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>, System.Action<System.Object, RabbitMQ.Client.Events.BasicAckEventArgs>, System.Action<System.Object, RabbitMQ.Client.Events.BasicNackEventArgs>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Invoke
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1210
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual T Invoke<T>(Func<IRabbitTemplate, T> rabbitOperations, Action<object, BasicAckEventArgs> acks, Action<object, BasicNackEventArgs> nacks)
    parameters:
    - id: rabbitOperations
      type: System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}}
    - id: acks
      type: System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs}
    - id: nacks
      type: System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function Invoke(Of T)(rabbitOperations As Func(Of IRabbitTemplate, T), acks As Action(Of Object, BasicAckEventArgs), nacks As Action(Of Object, BasicNackEventArgs)) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  nameWithType.vb: RabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicAckEventArgs), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicNackEventArgs))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms(System.Int32)
  id: WaitForConfirms(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: WaitForConfirms(Int32)
  nameWithType: RabbitTemplate.WaitForConfirms(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WaitForConfirms
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1280
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool WaitForConfirms(int timeoutInMilliseconds)
    parameters:
    - id: timeoutInMilliseconds
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Overridable Function WaitForConfirms(timeoutInMilliseconds As Integer) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  id: WaitForConfirmsOrDie(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: WaitForConfirmsOrDie(Int32)
  nameWithType: RabbitTemplate.WaitForConfirmsOrDie(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WaitForConfirmsOrDie
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1299
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void WaitForConfirmsOrDie(int timeoutInMilliseconds)
    parameters:
    - id: timeoutInMilliseconds
      type: System.Int32
    content.vb: Public Overridable Sub WaitForConfirmsOrDie(timeoutInMilliseconds As Integer)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory)
  id: DetermineConfirmsReturnsCapability(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DetermineConfirmsReturnsCapability(IConnectionFactory)
  nameWithType: RabbitTemplate.DetermineConfirmsReturnsCapability(IConnectionFactory)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DetermineConfirmsReturnsCapability
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1318
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void DetermineConfirmsReturnsCapability(IConnectionFactory connectionFactory)
    parameters:
    - id: connectionFactory
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    content.vb: Public Overridable Sub DetermineConfirmsReturnsCapability(connectionFactory As IConnectionFactory)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor(Steeltoe.Messaging.IMessage)
  id: IsMandatoryFor(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: IsMandatoryFor(IMessage)
  nameWithType: RabbitTemplate.IsMandatoryFor(IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsMandatoryFor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1324
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual bool IsMandatoryFor(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: System.Boolean
    content.vb: Public Overridable Function IsMandatoryFor(message As IMessage) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose
  id: Dispose
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RabbitTemplate.Dispose()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Dispose
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1329
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start
  id: Start
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: RabbitTemplate.Start()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Start
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1334
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task Start()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function Start As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop
  id: Stop
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: RabbitTemplate.Stop()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Stop
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1339
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: public virtual Task Stop()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function Stop As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary(System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary(System.Object)
  id: ConvertMessageIfNecessary(System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertMessageIfNecessary(Object)
  nameWithType: RabbitTemplate.ConvertMessageIfNecessary(Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertMessageIfNecessary
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1362
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IMessage ConvertMessageIfNecessary(object message)
    parameters:
    - id: message
      type: System.Object
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Function ConvertMessageIfNecessary(message As Object) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: DoSendAndReceiveWithTemporary(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSendAndReceiveWithTemporary(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.DoSendAndReceiveWithTemporary(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceiveWithTemporary
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1372
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IMessage DoSendAndReceiveWithTemporary(string exchange, string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Function DoSendAndReceiveWithTemporary(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  id: DoReceiveAndConvert(System.String,System.Int32,System.Type,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoReceiveAndConvert(String, Int32, Type, CancellationToken)
  nameWithType: RabbitTemplate.DoReceiveAndConvert(String, Int32, Type, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert(System.String, System.Int32, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1433
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual object DoReceiveAndConvert(string queueName, int timeoutMillis, Type type, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    - id: type
      type: System.Type
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Object
    content.vb: Protected Overridable Function DoReceiveAndConvert(queueName As String, timeoutMillis As Integer, type As Type, cancellationToken As CancellationToken = Nothing) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(System.String,System.Int32,System.Threading.CancellationToken)
  id: DoReceive(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoReceive(String, Int32, CancellationToken)
  nameWithType: RabbitTemplate.DoReceive(String, Int32, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(System.String, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1444
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IMessage DoReceive(string queueName, int timeoutMillis, CancellationToken cancellationToken)
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Function DoReceive(queueName As String, timeoutMillis As Integer, cancellationToken As CancellationToken) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  id: DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoReceive(RabbitDestination)
  nameWithType: RabbitTemplate.DoReceive(RabbitDestination)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1478
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected override IMessage DoReceive(RabbitDestination destination)
    parameters:
    - id: destination
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overrides Function DoReceive(destination As RabbitDestination) As IMessage
  overridden: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  id: DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoReceiveAsync(RabbitDestination, CancellationToken)
  nameWithType: RabbitTemplate.DoReceiveAsync(RabbitDestination, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1490
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected override Task<IMessage> DoReceiveAsync(RabbitDestination destination, CancellationToken cancellationToken)
    parameters:
    - id: destination
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Protected Overrides Function DoReceiveAsync(destination As RabbitDestination, cancellationToken As CancellationToken) As Task(Of IMessage)
  overridden: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSendAsync(RabbitDestination, IMessage, CancellationToken)
  nameWithType: RabbitTemplate.DoSendAsync(RabbitDestination, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1495
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected override Task DoSendAsync(RabbitDestination destination, IMessage message, CancellationToken cancellationToken)
    parameters:
    - id: destination
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overrides Function DoSendAsync(destination As RabbitDestination, message As IMessage, cancellationToken As CancellationToken) As Task
  overridden: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  nameWithType: RabbitTemplate.DoSendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1500
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected override Task<IMessage> DoSendAndReceiveAsync(RabbitDestination destination, IMessage requestMessage, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destination
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Protected Overrides Function DoSendAndReceiveAsync(destination As RabbitDestination, requestMessage As IMessage, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overridden: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  id: DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSendAndReceive(RabbitDestination, IMessage)
  nameWithType: RabbitTemplate.DoSendAndReceive(RabbitDestination, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1505
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected override IMessage DoSendAndReceive(RabbitDestination destination, IMessage requestMessage)
    parameters:
    - id: destination
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overrides Function DoSendAndReceive(destination As RabbitDestination, requestMessage As IMessage) As IMessage
  overridden: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: DoSendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSendAndReceive(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.DoSendAndReceive(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1510
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IMessage DoSendAndReceive(string exchange, string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Function DoSendAndReceive(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: DoSendAndReceiveWithFixed(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSendAndReceiveWithFixed(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.DoSendAndReceiveWithFixed(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceiveWithFixed
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1537
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IMessage DoSendAndReceiveWithFixed(string exchange, string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Function DoSendAndReceiveWithFixed(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: DoSendAndReceiveWithDirect(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSendAndReceiveWithDirect(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.DoSendAndReceiveWithDirect(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceiveWithDirect
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1551
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IMessage DoSendAndReceiveWithDirect(string exchange, string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Function DoSendAndReceiveWithDirect(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait(System.String,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait(System.String,System.Threading.CancellationToken)
  id: DoReceiveNoWait(System.String,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoReceiveNoWait(String, CancellationToken)
  nameWithType: RabbitTemplate.DoReceiveNoWait(String, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoReceiveNoWait
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1612
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IMessage DoReceiveNoWait(string queueName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: queueName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Function DoReceiveNoWait(queueName As String, cancellationToken As CancellationToken = Nothing) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(RabbitMQ.Client.IModel,System.String,System.String,Steeltoe.Messaging.IMessage,System.Boolean,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(RabbitMQ.Client.IModel,System.String,System.String,Steeltoe.Messaging.IMessage,System.Boolean,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: DoSend(RabbitMQ.Client.IModel,System.String,System.String,Steeltoe.Messaging.IMessage,System.Boolean,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSend(IModel, String, String, IMessage, Boolean, CorrelationData, CancellationToken)
  nameWithType: RabbitTemplate.DoSend(IModel, String, String, IMessage, Boolean, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(RabbitMQ.Client.IModel, System.String, System.String, Steeltoe.Messaging.IMessage, System.Boolean, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1648
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual void DoSend(IModel channel, string exchangeArg, string routingKeyArg, IMessage message, bool mandatory, CorrelationData correlationData, CancellationToken cancellationToken)
    parameters:
    - id: channel
      type: RabbitMQ.Client.IModel
    - id: exchangeArg
      type: System.String
    - id: routingKeyArg
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: mandatory
      type: System.Boolean
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    content.vb: Protected Overridable Sub DoSend(channel As IModel, exchangeArg As String, routingKeyArg As String, message As IMessage, mandatory As Boolean, correlationData As CorrelationData, cancellationToken As CancellationToken)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  id: DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoSend(RabbitDestination, IMessage)
  nameWithType: RabbitTemplate.DoSend(RabbitDestination, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1703
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected override void DoSend(RabbitDestination destination, IMessage message)
    parameters:
    - id: destination
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overrides Sub DoSend(destination As RabbitDestination, message As IMessage)
  overridden: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit(RabbitMQ.Client.IModel,System.String,System.String,System.Boolean,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit(RabbitMQ.Client.IModel,System.String,System.String,System.Boolean,Steeltoe.Messaging.IMessage)
  id: SendToRabbit(RabbitMQ.Client.IModel,System.String,System.String,System.Boolean,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: SendToRabbit(IModel, String, String, Boolean, IMessage)
  nameWithType: RabbitTemplate.SendToRabbit(IModel, String, String, Boolean, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit(RabbitMQ.Client.IModel, System.String, System.String, System.Boolean, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendToRabbit
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1708
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual void SendToRabbit(IModel channel, string exchange, string routingKey, bool mandatory, IMessage message)
    parameters:
    - id: channel
      type: RabbitMQ.Client.IModel
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: mandatory
      type: System.Boolean
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Overridable Sub SendToRabbit(channel As IModel, exchange As String, routingKey As String, mandatory As Boolean, message As IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted(RabbitMQ.Client.IModel)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted(RabbitMQ.Client.IModel)
  id: IsChannelLocallyTransacted(RabbitMQ.Client.IModel)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: IsChannelLocallyTransacted(IModel)
  nameWithType: RabbitTemplate.IsChannelLocallyTransacted(IModel)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted(RabbitMQ.Client.IModel)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsChannelLocallyTransacted
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1721
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual bool IsChannelLocallyTransacted(IModel channel)
    parameters:
    - id: channel
      type: RabbitMQ.Client.IModel
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function IsChannelLocallyTransacted(channel As IModel) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection
  id: CreateConnection
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: CreateConnection()
  nameWithType: RabbitTemplate.CreateConnection()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateConnection
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1726
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual IConnection CreateConnection()
    return:
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnection
    content.vb: Protected Overridable Function CreateConnection As IConnection
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder
  id: GetTransactionalResourceHolder
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: GetTransactionalResourceHolder()
  nameWithType: RabbitTemplate.GetTransactionalResourceHolder()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetTransactionalResourceHolder
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1731
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual RabbitResourceHolder GetTransactionalResourceHolder()
    return:
      type: Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
    content.vb: Protected Overridable Function GetTransactionalResourceHolder As RabbitResourceHolder
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException(System.Exception)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException(System.Exception)
  id: ConvertRabbitAccessException(System.Exception)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertRabbitAccessException(Exception)
  nameWithType: RabbitTemplate.ConvertRabbitAccessException(Exception)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException(System.Exception)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertRabbitAccessException
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1736
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual Exception ConvertRabbitAccessException(Exception ex)
    parameters:
    - id: ex
      type: System.Exception
    return:
      type: System.Exception
    content.vb: Protected Overridable Function ConvertRabbitAccessException(ex As Exception) As Exception
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceiveRaw(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveRaw(String, String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: RabbitTemplate.ConvertSendAndReceiveRaw(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveRaw
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1741
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected IMessage ConvertSendAndReceiveRaw(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Function ConvertSendAndReceiveRaw(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange
  id: GetDefaultExchange
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: GetDefaultExchange()
  nameWithType: RabbitTemplate.GetDefaultExchange()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDefaultExchange
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1752
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual string GetDefaultExchange()
    return:
      type: System.String
    content.vb: Protected Overridable Function GetDefaultExchange As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey
  id: GetDefaultRoutingKey
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: GetDefaultRoutingKey()
  nameWithType: RabbitTemplate.GetDefaultRoutingKey()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDefaultRoutingKey
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1762
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual string GetDefaultRoutingKey()
    return:
      type: System.String
    content.vb: Protected Overridable Function GetDefaultRoutingKey As String
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo
  id: UseDirectReplyTo
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: UseDirectReplyTo()
  nameWithType: RabbitTemplate.UseDirectReplyTo()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UseDirectReplyTo
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1775
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual bool UseDirectReplyTo()
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function UseDirectReplyTo As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut(System.String)
  id: ReplyTimedOut(System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: ReplyTimedOut(String)
  nameWithType: RabbitTemplate.ReplyTimedOut(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReplyTimedOut
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1811
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual void ReplyTimedOut(string correlationId)
    parameters:
    - id: correlationId
      type: System.String
    content.vb: Protected Overridable Sub ReplyTimedOut(correlationId As String)
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart
  id: DoStart
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoStart()
  nameWithType: RabbitTemplate.DoStart()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoStart
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1815
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual Task DoStart()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function DoStart As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop
  id: DoStop
  parent: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  langs:
  - csharp
  - vb
  name: DoStop()
  nameWithType: RabbitTemplate.DoStop()
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoStop
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/RabbitTemplate.cs
    startLine: 1820
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: protected virtual Task DoStop()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function DoStop As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Steeltoe.Messaging.RabbitMQ.Core
  commentId: N:Steeltoe.Messaging.RabbitMQ.Core
  name: Steeltoe.Messaging.RabbitMQ.Core
  nameWithType: Steeltoe.Messaging.RabbitMQ.Core
  fullName: Steeltoe.Messaging.RabbitMQ.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
  name: AbstractMessageSendingTemplate<RabbitDestination>
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  name.vb: AbstractMessageSendingTemplate(Of RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
  name: AbstractMessageReceivingTemplate<RabbitDestination>
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  name.vb: AbstractMessageReceivingTemplate(Of RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  commentId: T:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  name: AbstractMessagingTemplate<RabbitDestination>
  nameWithType: AbstractMessagingTemplate<RabbitDestination>
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  name.vb: AbstractMessagingTemplate(Of RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
    name: AbstractMessagingTemplate
    nameWithType: AbstractMessagingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
    name: AbstractMessagingTemplate
    nameWithType: AbstractMessagingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageSendingOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  commentId: T:Steeltoe.Messaging.Core.IMessageSendingOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.IMessageSendingOperations`1
  name: IMessageSendingOperations<RabbitDestination>
  nameWithType: IMessageSendingOperations<RabbitDestination>
  fullName: Steeltoe.Messaging.Core.IMessageSendingOperations<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>
  nameWithType.vb: IMessageSendingOperations(Of RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.IMessageSendingOperations(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  name.vb: IMessageSendingOperations(Of RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageReceivingOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  commentId: T:Steeltoe.Messaging.Core.IMessageReceivingOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
  name: IMessageReceivingOperations<RabbitDestination>
  nameWithType: IMessageReceivingOperations<RabbitDestination>
  fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>
  nameWithType.vb: IMessageReceivingOperations(Of RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.IMessageReceivingOperations(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  name.vb: IMessageReceivingOperations(Of RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  commentId: T:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  name: IMessageRequestReplyOperations<RabbitDestination>
  nameWithType: IMessageRequestReplyOperations<RabbitDestination>
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>
  nameWithType.vb: IMessageRequestReplyOperations(Of RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  name.vb: IMessageRequestReplyOperations(Of RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: IRabbitTemplate
  nameWithType: IRabbitTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
  parent: Steeltoe.Messaging.RabbitMQ.Listener
  name: IMessageListener
  nameWithType: IMessageListener
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
- uid: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware
  commentId: T:Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware
  parent: Steeltoe.Messaging.RabbitMQ.Support
  name: IListenerContainerAware
  nameWithType: IListenerContainerAware
  fullName: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: IPublisherCallbackChannel.IListener
  nameWithType: IPublisherCallbackChannel.IListener
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
- uid: Steeltoe.Common.Services.IServiceNameAware
  commentId: T:Steeltoe.Common.Services.IServiceNameAware
  parent: Steeltoe.Common.Services
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: Steeltoe.Common.Services.IServiceNameAware
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)(System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceiveAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAndReceiveAsync(IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceiveAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceiveAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
  name: ConvertSendAndReceive<T>(Object)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>(Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>(System.Object)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)(Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)(System.Object)
  name.vb: ConvertSendAndReceive(Of T)(Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
  name: ConvertSendAndReceive<T>(RabbitDestination, Object)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>(RabbitDestination, Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)(RabbitDestination, Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(RabbitDestination, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ConvertSendAndReceive<T>(RabbitDestination, Object, IDictionary<String, Object>)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>(RabbitDestination, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)(RabbitDestination, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(RabbitDestination, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(RabbitDestination, Object, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>(RabbitDestination, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)(RabbitDestination, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(RabbitDestination, Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertSendAndReceive``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceive(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceive(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  name: SendAndReceive(IMessage)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceive(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceive(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceive(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceive(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: SendAndReceive(RabbitDestination, IMessage)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceive(RabbitDestination, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceive(RabbitDestination, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DefaultReceiveDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DefaultReceiveDestination
  name: DefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.DefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).DefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ThrowReceivedExceptions
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ThrowReceivedExceptions
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ThrowReceivedExceptions
  name: ThrowReceivedExceptions
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ThrowReceivedExceptions
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ThrowReceivedExceptions
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).ThrowReceivedExceptions
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ThrowReceivedExceptions
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAsync(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAsync(System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
  name: ReceiveAsync(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAsync(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAsync(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAsync(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
  name: ReceiveAsync(RabbitDestination, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAsync(RabbitDestination, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAsync(RabbitDestination, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  name: ReceiveAndConvertAsync<T>(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvertAsync<T>(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvertAsync<T>(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvertAsync(Of T)(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvertAsync(Of T)(System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvertAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvertAsync``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
  name: ReceiveAndConvertAsync<T>(RabbitDestination, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvertAsync<T>(RabbitDestination, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvertAsync<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvertAsync(Of T)(RabbitDestination, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvertAsync(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(RabbitDestination, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Receive
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Receive
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
  name: Receive()
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.Receive()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Receive()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).Receive()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Receive()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Receive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Receive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
  name: Receive(RabbitDestination)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.Receive(RabbitDestination)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Receive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).Receive(RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Receive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Receive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvert``1
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvert``1
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
  name: ReceiveAndConvert<T>()
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvert<T>()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvert<T>()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvert(Of T)()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvert(Of T)()
  name.vb: ReceiveAndConvert(Of T)()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvert``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ReceiveAndConvert``1(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
  name: ReceiveAndConvert<T>(RabbitDestination)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvert<T>(RabbitDestination)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvert<T>(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvert(Of T)(RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvert(Of T)(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  name.vb: ReceiveAndConvert(Of T)(RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.RequiredDefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.RequiredDefaultReceiveDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.RequiredDefaultReceiveDestination
  name: RequiredDefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.RequiredDefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.RequiredDefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).RequiredDefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).RequiredDefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoConvert``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoConvert``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
  name: DoConvert<T>(IMessage)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.DoConvert<T>(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoConvert<T>(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).DoConvert(Of T)(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoConvert(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: DoConvert(Of T)(IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.DoConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).DoConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.CONVERSION_HINT_HEADER
  commentId: F:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.CONVERSION_HINT_HEADER
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.CONVERSION_HINT_HEADER
  name: CONVERSION_HINT_HEADER
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.CONVERSION_HINT_HEADER
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.CONVERSION_HINT_HEADER
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).CONVERSION_HINT_HEADER
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).CONVERSION_HINT_HEADER
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DefaultSendDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DefaultSendDestination
  name: DefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.DefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).DefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.MessageConverter
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.MessageConverter
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.MessageConverter
  name: MessageConverter
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.MessageConverter
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.MessageConverter
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).MessageConverter
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).MessageConverter
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(RabbitDestination, Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync(RabbitDestination, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync(RabbitDestination, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name: ConvertAndSendAsync(RabbitDestination, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync(RabbitDestination, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync(RabbitDestination, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(RabbitDestination, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(RabbitDestination, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync(RabbitDestination, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync(RabbitDestination, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAsync(IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.SendAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).SendAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.SendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAsync(RabbitDestination, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.SendAsync(RabbitDestination, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).SendAsync(RabbitDestination, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
  name: ConvertAndSend(Object)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend(Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend(System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend(Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend(System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
  name: ConvertAndSend(RabbitDestination, Object)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend(RabbitDestination, Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend(RabbitDestination, Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ConvertAndSend(RabbitDestination, Object, IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend(RabbitDestination, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend(RabbitDestination, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertAndSend(RabbitDestination, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertAndSend(Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertAndSend(RabbitDestination, Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend(RabbitDestination, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend(RabbitDestination, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertAndSend(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend(RabbitDestination, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertAndSend(RabbitDestination, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Send(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Send(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
  name: Send(IMessage)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.Send(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Send(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).Send(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Send(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Send(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.Send(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
  name: Send(RabbitDestination, IMessage)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.Send(RabbitDestination, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Send(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).Send(RabbitDestination, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Send(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.RequiredDefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.RequiredDefaultSendDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.RequiredDefaultSendDestination
  name: RequiredDefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.RequiredDefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.RequiredDefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).RequiredDefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).RequiredDefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoConvert(System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoConvert(System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ProcessHeadersToSend(IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ProcessHeadersToSend(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ProcessHeadersToSend(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).ProcessHeadersToSend(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ProcessHeadersToSend(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ProcessHeadersToSend(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
  name: AbstractMessageSendingTemplate<D>
  nameWithType: AbstractMessageSendingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>
  nameWithType.vb: AbstractMessageSendingTemplate(Of D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D)
  name.vb: AbstractMessageSendingTemplate(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core
  commentId: N:Steeltoe.Messaging.Core
  name: Steeltoe.Messaging.Core
  nameWithType: Steeltoe.Messaging.Core
  fullName: Steeltoe.Messaging.Core
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
  name: AbstractMessageReceivingTemplate<D>
  nameWithType: AbstractMessageReceivingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D)
  name.vb: AbstractMessageReceivingTemplate(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  commentId: T:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  name: AbstractMessagingTemplate<D>
  nameWithType: AbstractMessagingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>
  nameWithType.vb: AbstractMessagingTemplate(Of D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D)
  name.vb: AbstractMessagingTemplate(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
    name: AbstractMessagingTemplate
    nameWithType: AbstractMessagingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
    name: AbstractMessagingTemplate
    nameWithType: AbstractMessagingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
  commentId: T:Steeltoe.Messaging.Core.IMessageSendingOperations`1
  name: IMessageSendingOperations<D>
  nameWithType: IMessageSendingOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageSendingOperations<D>
  nameWithType.vb: IMessageSendingOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageSendingOperations(Of D)
  name.vb: IMessageSendingOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
  commentId: T:Steeltoe.Messaging.Core.IMessageReceivingOperations`1
  name: IMessageReceivingOperations<D>
  nameWithType: IMessageReceivingOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations<D>
  nameWithType.vb: IMessageReceivingOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageReceivingOperations(Of D)
  name.vb: IMessageReceivingOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  commentId: T:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  name: IMessageRequestReplyOperations<D>
  nameWithType: IMessageRequestReplyOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>
  nameWithType.vb: IMessageRequestReplyOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D)
  name.vb: IMessageRequestReplyOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Listener
  commentId: N:Steeltoe.Messaging.RabbitMQ.Listener
  name: Steeltoe.Messaging.RabbitMQ.Listener
  nameWithType: Steeltoe.Messaging.RabbitMQ.Listener
  fullName: Steeltoe.Messaging.RabbitMQ.Listener
- uid: Steeltoe.Messaging.RabbitMQ.Support
  commentId: N:Steeltoe.Messaging.RabbitMQ.Support
  name: Steeltoe.Messaging.RabbitMQ.Support
  nameWithType: Steeltoe.Messaging.RabbitMQ.Support
  fullName: Steeltoe.Messaging.RabbitMQ.Support
- uid: Steeltoe.Messaging.RabbitMQ.Connection
  commentId: N:Steeltoe.Messaging.RabbitMQ.Connection
  name: Steeltoe.Messaging.RabbitMQ.Connection
  nameWithType: Steeltoe.Messaging.RabbitMQ.Connection
  fullName: Steeltoe.Messaging.RabbitMQ.Connection
- uid: Steeltoe.Common.Services
  commentId: N:Steeltoe.Common.Services
  name: Steeltoe.Common.Services
  nameWithType: Steeltoe.Common.Services
  fullName: Steeltoe.Common.Services
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAndReceiveAsync(IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceiveAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceiveAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
  isExternal: true
  name: ConvertSendAndReceive<T>(Object)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(System.Object)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(System.Object)
  name.vb: ConvertSendAndReceive(Of T)(Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(D, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  name: SendAndReceive(IMessage)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceive(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceive(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceive(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceive(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: SendAndReceive(D, IMessage)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceive(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceive(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceive(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: AbstractMessagingTemplate(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DefaultReceiveDestination
  name: DefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<D>.DefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ThrowReceivedExceptions
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ThrowReceivedExceptions
  name: ThrowReceivedExceptions
  nameWithType: AbstractMessageReceivingTemplate<D>.ThrowReceivedExceptions
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ThrowReceivedExceptions
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ThrowReceivedExceptions
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ThrowReceivedExceptions
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAsync(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAsync(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAsync(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAsync(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync(D, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAndConvertAsync<T>(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAndConvertAsync<T>(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(D, System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(D, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
  name: Receive()
  nameWithType: AbstractMessageReceivingTemplate<D>.Receive()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).Receive()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<D>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of D).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
  name: Receive(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.Receive(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).Receive(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<D>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of D).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
  name: ReceiveAndConvert<T>()
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)()
  name.vb: ReceiveAndConvert(Of T)()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
  name: ReceiveAndConvert<T>(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)(D)
  name.vb: ReceiveAndConvert(Of T)(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.RequiredDefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.RequiredDefaultReceiveDestination
  name: RequiredDefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<D>.RequiredDefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.RequiredDefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).RequiredDefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).RequiredDefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
  name: DoConvert<T>(IMessage)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoConvert<T>(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoConvert<T>(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: DoConvert(Of T)(IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.DoConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.CONVERSION_HINT_HEADER
  commentId: F:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.CONVERSION_HINT_HEADER
  name: CONVERSION_HINT_HEADER
  nameWithType: AbstractMessageSendingTemplate<D>.CONVERSION_HINT_HEADER
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.CONVERSION_HINT_HEADER
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).CONVERSION_HINT_HEADER
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).CONVERSION_HINT_HEADER
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DefaultSendDestination
  name: DefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<D>.DefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.MessageConverter
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.MessageConverter
  name: MessageConverter
  nameWithType: AbstractMessageSendingTemplate<D>.MessageConverter
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.MessageConverter
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).MessageConverter
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).MessageConverter
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAsync(IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.SendAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).SendAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.SendAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).SendAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
  isExternal: true
  name: ConvertAndSend(Object)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
  isExternal: true
  name: ConvertAndSend(D, Object)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: ConvertAndSend(D, Object, IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertAndSend(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertAndSend(Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertAndSend(D, Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertAndSend(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertAndSend(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
  name: Send(IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.Send(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).Send(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<D>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of D).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
  name: Send(D, IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.Send(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).Send(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<D>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of D).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.RequiredDefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.RequiredDefaultSendDestination
  name: RequiredDefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<D>.RequiredDefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.RequiredDefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).RequiredDefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).RequiredDefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoConvert(System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoConvert(System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate<D>.DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate(Of D).DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: ProcessHeadersToSend(IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<D>.ProcessHeadersToSend(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ProcessHeadersToSend(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ProcessHeadersToSend(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate<D>.ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.#ctor
  name: RabbitTemplate
  nameWithType: RabbitTemplate.RabbitTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate
- uid: Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions}
  commentId: T:Microsoft.Extensions.Options.IOptionsMonitor{Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptionsMonitor`1
  name: IOptionsMonitor<RabbitOptions>
  nameWithType: IOptionsMonitor<RabbitOptions>
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions>
  nameWithType.vb: IOptionsMonitor(Of RabbitOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions)
  name.vb: IOptionsMonitor(Of RabbitOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    name: RabbitOptions
    nameWithType: RabbitOptions
    fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
    name: RabbitOptions
    nameWithType: RabbitOptions
    fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: IConnectionFactory
  nameWithType: IConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.ISmartMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: ISmartMessageConverter
  nameWithType: ISmartMessageConverter
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter
- uid: Microsoft.Extensions.Options.IOptionsMonitor`1
  commentId: T:Microsoft.Extensions.Options.IOptionsMonitor`1
  isExternal: true
  name: IOptionsMonitor<TOptions>
  nameWithType: IOptionsMonitor<TOptions>
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<TOptions>
  nameWithType.vb: IOptionsMonitor(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of TOptions)
  name.vb: IOptionsMonitor(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptionsMonitor`1
    name: IOptionsMonitor
    nameWithType: IOptionsMonitor
    fullName: Microsoft.Extensions.Options.IOptionsMonitor
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: true
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: Steeltoe.Messaging.Converter
  commentId: N:Steeltoe.Messaging.Converter
  name: Steeltoe.Messaging.Converter
  nameWithType: Steeltoe.Messaging.Converter
  fullName: Steeltoe.Messaging.Converter
- uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: RabbitOptions
  nameWithType: RabbitOptions
  fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
- uid: Steeltoe.Messaging.RabbitMQ.Config
  commentId: N:Steeltoe.Messaging.RabbitMQ.Config
  name: Steeltoe.Messaging.RabbitMQ.Config
  nameWithType: Steeltoe.Messaging.RabbitMQ.Config
  fullName: Steeltoe.Messaging.RabbitMQ.Config
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory
  name: ConnectionFactory
  nameWithType: RabbitTemplate.ConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  name: ConnectionFactory
  nameWithType: IRabbitTemplate.ConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted
  name: IsChannelTransacted
  nameWithType: RabbitTemplate.IsChannelTransacted
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey
  name: RoutingKey
  nameWithType: RabbitTemplate.RoutingKey
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange
  name: Exchange
  nameWithType: RabbitTemplate.Exchange
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue
  name: DefaultReceiveQueue
  nameWithType: RabbitTemplate.DefaultReceiveQueue
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode
  name: ContainerAckMode
  nameWithType: RabbitTemplate.ContainerAckMode
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.ContainerAckMode
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.ContainerAckMode
  parent: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
  name: ContainerAckMode
  nameWithType: IMessageListener.ContainerAckMode
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.ContainerAckMode
- uid: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: AcknowledgeMode
  nameWithType: AcknowledgeMode
  fullName: Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding
  name: Encoding
  nameWithType: RabbitTemplate.Encoding
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress
  name: ReplyAddress
  nameWithType: RabbitTemplate.ReplyAddress
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout
  name: ReceiveTimeout
  nameWithType: RabbitTemplate.ReceiveTimeout
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout
  name: ReplyTimeout
  nameWithType: RabbitTemplate.ReplyTimeout
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter
  name: MessagePropertiesConverter
  nameWithType: RabbitTemplate.MessagePropertiesConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter
- uid: Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
  commentId: T:Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
  parent: Steeltoe.Messaging.RabbitMQ.Support
  name: IMessageHeadersConverter
  nameWithType: IMessageHeadersConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback
  name: ConfirmCallback
  nameWithType: RabbitTemplate.ConfirmCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IConfirmCallback
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IConfirmCallback
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: RabbitTemplate.IConfirmCallback
  nameWithType: RabbitTemplate.IConfirmCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IConfirmCallback
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback
  name: ReturnCallback
  nameWithType: RabbitTemplate.ReturnCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IReturnCallback
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IReturnCallback
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: RabbitTemplate.IReturnCallback
  nameWithType: RabbitTemplate.IReturnCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IReturnCallback
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory
  name: Mandatory
  nameWithType: RabbitTemplate.Mandatory
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression
  name: MandatoryExpression
  nameWithType: RabbitTemplate.MandatoryExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression
- uid: Steeltoe.Common.Expression.IExpression
  commentId: T:Steeltoe.Common.Expression.IExpression
  parent: Steeltoe.Common.Expression
  name: IExpression
  nameWithType: IExpression
  fullName: Steeltoe.Common.Expression.IExpression
- uid: Steeltoe.Common.Expression
  commentId: N:Steeltoe.Common.Expression
  name: Steeltoe.Common.Expression
  nameWithType: Steeltoe.Common.Expression
  fullName: Steeltoe.Common.Expression
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString
  name: MandatoryExpressionString
  nameWithType: RabbitTemplate.MandatoryExpressionString
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression
  name: SendConnectionFactorySelectorExpression
  nameWithType: RabbitTemplate.SendConnectionFactorySelectorExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression
  name: ReceiveConnectionFactorySelectorExpression
  nameWithType: RabbitTemplate.ReceiveConnectionFactorySelectorExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey
  name: CorrelationKey
  nameWithType: RabbitTemplate.CorrelationKey
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext
  name: EvaluationContext
  nameWithType: RabbitTemplate.EvaluationContext
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext
- uid: Steeltoe.Common.Expression.IEvaluationContext
  commentId: T:Steeltoe.Common.Expression.IEvaluationContext
  parent: Steeltoe.Common.Expression
  name: IEvaluationContext
  nameWithType: IEvaluationContext
  fullName: Steeltoe.Common.Expression.IEvaluationContext
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate
  name: RetryTemplate
  nameWithType: RabbitTemplate.RetryTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate
- uid: Steeltoe.Common.Retry.IRetryOperation
  commentId: T:Steeltoe.Common.Retry.IRetryOperation
  parent: Steeltoe.Common.Retry
  name: IRetryOperation
  nameWithType: IRetryOperation
  fullName: Steeltoe.Common.Retry.IRetryOperation
- uid: Steeltoe.Common.Retry
  commentId: N:Steeltoe.Common.Retry
  name: Steeltoe.Common.Retry
  nameWithType: Steeltoe.Common.Retry
  fullName: Steeltoe.Common.Retry
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback
  name: RecoveryCallback
  nameWithType: RabbitTemplate.RecoveryCallback
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback
- uid: Steeltoe.Common.Retry.IRecoveryCallback
  commentId: T:Steeltoe.Common.Retry.IRecoveryCallback
  parent: Steeltoe.Common.Retry
  name: IRecoveryCallback
  nameWithType: IRecoveryCallback
  fullName: Steeltoe.Common.Retry.IRecoveryCallback
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors
  name: BeforePublishPostProcessors
  nameWithType: RabbitTemplate.BeforePublishPostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors
- uid: System.Collections.Generic.IList{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
  commentId: T:System.Collections.Generic.IList{Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IMessagePostProcessor>
  nameWithType: IList<IMessagePostProcessor>
  fullName: System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
  nameWithType.vb: IList(Of IMessagePostProcessor)
  fullName.vb: System.Collections.Generic.IList(Of Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  name.vb: IList(Of IMessagePostProcessor)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors
  name: AfterReceivePostProcessors
  nameWithType: RabbitTemplate.AfterReceivePostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor
  name: CorrelationDataPostProcessor
  nameWithType: RabbitTemplate.CorrelationDataPostProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor
- uid: Steeltoe.Messaging.RabbitMQ.Core.ICorrelationDataPostProcessor
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.ICorrelationDataPostProcessor
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: ICorrelationDataPostProcessor
  nameWithType: ICorrelationDataPostProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.ICorrelationDataPostProcessor
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues
  name: UseTemporaryReplyQueues
  nameWithType: RabbitTemplate.UseTemporaryReplyQueues
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer
  name: UseDirectReplyToContainer
  nameWithType: RabbitTemplate.UseDirectReplyToContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression
  name: UserIdExpression
  nameWithType: RabbitTemplate.UserIdExpression
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString
  name: UserIdExpressionString
  nameWithType: RabbitTemplate.UserIdExpressionString
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName
  name: ServiceName
  nameWithType: RabbitTemplate.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName
- uid: Steeltoe.Common.Services.IServiceNameAware.ServiceName
  commentId: P:Steeltoe.Common.Services.IServiceNameAware.ServiceName
  parent: Steeltoe.Common.Services.IServiceNameAware
  name: ServiceName
  nameWithType: IServiceNameAware.ServiceName
  fullName: Steeltoe.Common.Services.IServiceNameAware.ServiceName
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId
  name: UserCorrelationId
  nameWithType: RabbitTemplate.UserCorrelationId
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection
  name: UsePublisherConnection
  nameWithType: RabbitTemplate.UsePublisherConnection
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer
  name: NoLocalReplyConsumer
  nameWithType: RabbitTemplate.NoLocalReplyConsumer
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler
  name: ReplyErrorHandler
  nameWithType: RabbitTemplate.ReplyErrorHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler
- uid: Steeltoe.Common.Util.IErrorHandler
  commentId: T:Steeltoe.Common.Util.IErrorHandler
  parent: Steeltoe.Common.Util
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: Steeltoe.Common.Util.IErrorHandler
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning
  name: IsRunning
  nameWithType: RabbitTemplate.IsRunning
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID
  name: UUID
  nameWithType: RabbitTemplate.UUID
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.UUID
  commentId: P:Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.UUID
  parent: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  name: UUID
  nameWithType: IPublisherCallbackChannel.IListener.UUID
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.UUID
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener
  name: IsConfirmListener
  nameWithType: RabbitTemplate.IsConfirmListener
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsConfirmListener
  commentId: P:Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsConfirmListener
  parent: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  name: IsConfirmListener
  nameWithType: IPublisherCallbackChannel.IListener.IsConfirmListener
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsConfirmListener
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener
  name: IsReturnListener
  nameWithType: RabbitTemplate.IsReturnListener
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsReturnListener
  commentId: P:Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsReturnListener
  parent: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  name: IsReturnListener
  nameWithType: IPublisherCallbackChannel.IListener.IsReturnListener
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsReturnListener
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options
  name: Options
  nameWithType: RabbitTemplate.Options
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors
  name: SetBeforePublishPostProcessors
  nameWithType: RabbitTemplate.SetBeforePublishPostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
  isExternal: true
  name: IMessagePostProcessor[]
  nameWithType: IMessagePostProcessor[]
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[]
  nameWithType.vb: IMessagePostProcessor()
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor()
  name.vb: IMessagePostProcessor()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors
  name: AddBeforePublishPostProcessors
  nameWithType: RabbitTemplate.AddBeforePublishPostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor
  name: RemoveBeforePublishPostProcessor
  nameWithType: RabbitTemplate.RemoveBeforePublishPostProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor
- uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: IMessagePostProcessor
  nameWithType: IMessagePostProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors
  name: SetAfterReceivePostProcessors
  nameWithType: RabbitTemplate.SetAfterReceivePostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors
  name: AddAfterReceivePostProcessors
  nameWithType: RabbitTemplate.AddAfterReceivePostProcessors
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor
  name: RemoveAfterReceivePostProcessor
  nameWithType: RabbitTemplate.RemoveAfterReceivePostProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm
  name: HandleConfirm
  nameWithType: RabbitTemplate.HandleConfirm
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
  parent: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  isExternal: true
  name: HandleConfirm(PendingConfirm, Boolean)
  nameWithType: IPublisherCallbackChannel.IListener.HandleConfirm(PendingConfirm, Boolean)
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm, System.Boolean)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
    name: HandleConfirm
    nameWithType: IPublisherCallbackChannel.IListener.HandleConfirm
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
    name: PendingConfirm
    nameWithType: PendingConfirm
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm,System.Boolean)
    name: HandleConfirm
    nameWithType: IPublisherCallbackChannel.IListener.HandleConfirm
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
    name: PendingConfirm
    nameWithType: PendingConfirm
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: PendingConfirm
  nameWithType: PendingConfirm
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn
  name: HandleReturn
  nameWithType: RabbitTemplate.HandleReturn
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
  parent: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  isExternal: true
  name: HandleReturn(Int32, String, String, String, IBasicProperties, Byte[])
  nameWithType: IPublisherCallbackChannel.IListener.HandleReturn(Int32, String, String, String, IBasicProperties, Byte[])
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(System.Int32, System.String, System.String, System.String, RabbitMQ.Client.IBasicProperties, System.Byte[])
  nameWithType.vb: IPublisherCallbackChannel.IListener.HandleReturn(Int32, String, String, String, IBasicProperties, Byte())
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(System.Int32, System.String, System.String, System.String, RabbitMQ.Client.IBasicProperties, System.Byte())
  name.vb: HandleReturn(Int32, String, String, String, IBasicProperties, Byte())
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
    name: HandleReturn
    nameWithType: IPublisherCallbackChannel.IListener.HandleReturn
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.IBasicProperties
    name: IBasicProperties
    nameWithType: IBasicProperties
    fullName: RabbitMQ.Client.IBasicProperties
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(System.Int32,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])
    name: HandleReturn
    nameWithType: IPublisherCallbackChannel.IListener.HandleReturn
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.IBasicProperties
    name: IBasicProperties
    nameWithType: IBasicProperties
    fullName: RabbitMQ.Client.IBasicProperties
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: RabbitMQ.Client.IBasicProperties
  commentId: T:RabbitMQ.Client.IBasicProperties
  parent: RabbitMQ.Client
  isExternal: true
  name: IBasicProperties
  nameWithType: IBasicProperties
  fullName: RabbitMQ.Client.IBasicProperties
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: RabbitMQ.Client
  commentId: N:RabbitMQ.Client
  isExternal: true
  name: RabbitMQ.Client
  nameWithType: RabbitMQ.Client
  fullName: RabbitMQ.Client
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke
  name: Revoke
  nameWithType: RabbitTemplate.Revoke
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke(RabbitMQ.Client.IModel)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke(RabbitMQ.Client.IModel)
  parent: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
  isExternal: true
  name: Revoke(IModel)
  nameWithType: IPublisherCallbackChannel.IListener.Revoke(IModel)
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke(RabbitMQ.Client.IModel)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke(RabbitMQ.Client.IModel)
    name: Revoke
    nameWithType: IPublisherCallbackChannel.IListener.Revoke
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke
  - name: (
    nameWithType: (
    fullName: (
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke(RabbitMQ.Client.IModel)
    name: Revoke
    nameWithType: IPublisherCallbackChannel.IListener.Revoke
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke
  - name: (
    nameWithType: (
    fullName: (
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RabbitMQ.Client.IModel
  commentId: T:RabbitMQ.Client.IModel
  parent: RabbitMQ.Client
  isExternal: true
  name: IModel
  nameWithType: IModel
  fullName: RabbitMQ.Client.IModel
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch
  name: OnMessageBatch
  nameWithType: RabbitTemplate.OnMessageBatch
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
  parent: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
  isExternal: true
  name: OnMessageBatch(List<IMessage>)
  nameWithType: IMessageListener.OnMessageBatch(List<IMessage>)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage>)
  nameWithType.vb: IMessageListener.OnMessageBatch(List(Of IMessage))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List(Of Steeltoe.Messaging.IMessage))
  name.vb: OnMessageBatch(List(Of IMessage))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
    name: OnMessageBatch
    nameWithType: IMessageListener.OnMessageBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List{Steeltoe.Messaging.IMessage})
    name: OnMessageBatch
    nameWithType: IMessageListener.OnMessageBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Steeltoe.Messaging.IMessage}
  commentId: T:System.Collections.Generic.List{Steeltoe.Messaging.IMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IMessage>
  nameWithType: List<IMessage>
  fullName: System.Collections.Generic.List<Steeltoe.Messaging.IMessage>
  nameWithType.vb: List(Of IMessage)
  fullName.vb: System.Collections.Generic.List(Of Steeltoe.Messaging.IMessage)
  name.vb: List(Of IMessage)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage
  name: OnMessage
  nameWithType: RabbitTemplate.OnMessage
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage
- uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
  name: OnMessage(IMessage)
  nameWithType: IMessageListener.OnMessage(IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage(Steeltoe.Messaging.IMessage)
    name: OnMessage
    nameWithType: IMessageListener.OnMessage
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage(Steeltoe.Messaging.IMessage)
    name: OnMessage
    nameWithType: IMessageListener.OnMessage
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames
  name: GetExpectedQueueNames
  nameWithType: RabbitTemplate.GetExpectedQueueNames
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames
- uid: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames
  parent: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware
  name: GetExpectedQueueNames()
  nameWithType: IListenerContainerAware.GetExpectedQueueNames()
  fullName: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames
    name: GetExpectedQueueNames
    nameWithType: IListenerContainerAware.GetExpectedQueueNames
    fullName: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames
    name: GetExpectedQueueNames
    nameWithType: IListenerContainerAware.GetExpectedQueueNames
    fullName: Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send
  name: Send
  nameWithType: RabbitTemplate.Send
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: Send(String, String, IMessage)
  nameWithType: IRabbitTemplate.Send(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String, System.String, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: IRabbitTemplate.Send
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: IRabbitTemplate.Send
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: Send(String, String, IMessage, CorrelationData)
  nameWithType: IRabbitTemplate.Send(String, String, IMessage, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: Send
    nameWithType: IRabbitTemplate.Send
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: Send
    nameWithType: IRabbitTemplate.Send
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: CorrelationData
  nameWithType: CorrelationData
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync
  name: SendAsync
  nameWithType: RabbitTemplate.SendAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: SendAsync(String, String, IMessage, CancellationToken)
  nameWithType: IRabbitTemplate.SendAsync(String, String, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String, System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: IRabbitTemplate.SendAsync
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: IRabbitTemplate.SendAsync
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: SendAsync(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: IRabbitTemplate.SendAsync(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: IRabbitTemplate.SendAsync
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: IRabbitTemplate.SendAsync
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend
  name: ConvertAndSend
  nameWithType: RabbitTemplate.ConvertAndSend
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertAndSend(Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertAndSend(Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertAndSend(String, String, Object)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertAndSend(String, String, Object, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertAndSend(String, String, Object, IMessagePostProcessor)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertAndSend(String, String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertAndSend
    nameWithType: IRabbitTemplate.ConvertAndSend
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync
  name: ConvertAndSendAsync
  nameWithType: RabbitTemplate.ConvertAndSendAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync
  name: ReceiveAsync
  nameWithType: RabbitTemplate.ReceiveAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync
- uid: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
  commentId: T:System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Steeltoe.Messaging.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive
  name: Receive
  nameWithType: RabbitTemplate.Receive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: Receive(Int32)
  nameWithType: IRabbitTemplate.Receive(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
    name: Receive
    nameWithType: IRabbitTemplate.Receive
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
    name: Receive
    nameWithType: IRabbitTemplate.Receive
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: Receive(String, Int32)
  nameWithType: IRabbitTemplate.Receive(String, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String, System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
    name: Receive
    nameWithType: IRabbitTemplate.Receive
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
    name: Receive
    nameWithType: IRabbitTemplate.Receive
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert
  name: ReceiveAndConvert
  nameWithType: RabbitTemplate.ReceiveAndConvert
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ReceiveAndConvert<T>(Int32)
  nameWithType: IRabbitTemplate.ReceiveAndConvert<T>(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>(System.Int32)
  nameWithType.vb: IRabbitTemplate.ReceiveAndConvert(Of T)(Int32)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert(Of T)(System.Int32)
  name.vb: ReceiveAndConvert(Of T)(Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
    name: ReceiveAndConvert<T>
    nameWithType: IRabbitTemplate.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
    name: ReceiveAndConvert(Of T)
    nameWithType: IRabbitTemplate.ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ReceiveAndConvert<T>(String, Int32)
  nameWithType: IRabbitTemplate.ReceiveAndConvert<T>(String, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>(System.String, System.Int32)
  nameWithType.vb: IRabbitTemplate.ReceiveAndConvert(Of T)(String, Int32)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert(Of T)(System.String, System.Int32)
  name.vb: ReceiveAndConvert(Of T)(String, Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
    name: ReceiveAndConvert<T>
    nameWithType: IRabbitTemplate.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
    name: ReceiveAndConvert(Of T)
    nameWithType: IRabbitTemplate.ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync
  name: ReceiveAndConvertAsync
  nameWithType: RabbitTemplate.ReceiveAndConvertAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply
  name: ReceiveAndReply
  nameWithType: RabbitTemplate.ReceiveAndReply
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{{R},{S}})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  name: ReceiveAndReply<R, S>(Func<R, S>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{R},{S}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<R, S>
  nameWithType: Func<R, S>
  fullName: System.Func<R, S>
  nameWithType.vb: Func(Of R, S)
  fullName.vb: System.Func(Of R, S)
  name.vb: Func(Of R, S)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  isExternal: true
  name: ReceiveAndReply<R, S>(Func<R, S>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{{R},{S}})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  name: ReceiveAndReply<R, S>(String, Func<R, S>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  isExternal: true
  name: ReceiveAndReply<R, S>(String, Func<R, S>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{{R},{S}},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  name: ReceiveAndReply<R, S>(Func<R, S>, String, String)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.String, System.String)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  isExternal: true
  name: ReceiveAndReply<R, S>(Func<R, S>, String, String)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.String, System.String)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{{R},{S}},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  name: ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.String, System.String)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  isExternal: true
  name: ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.String, System.String)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{{R},{S}},System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  name: ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address}
  commentId: T:System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address}
  parent: System
  definition: System.Func`3
  name: Func<IMessage, S, Address>
  nameWithType: Func<IMessage, S, Address>
  fullName: System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>
  nameWithType.vb: Func(Of IMessage, S, Address)
  fullName.vb: System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address)
  name.vb: Func(Of IMessage, S, Address)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  isExternal: true
  name: ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{{R},{S}},System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  name: ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  isExternal: true
  name: ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply<R, S>
    nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
    name: ReceiveAndReply(Of R, S)
    nameWithType: IRabbitTemplate.ReceiveAndReply(Of R, S)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive
  name: SendAndReceive
  nameWithType: RabbitTemplate.SendAndReceive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: SendAndReceive(String, String, IMessage)
  nameWithType: IRabbitTemplate.SendAndReceive(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String, System.String, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IRabbitTemplate.SendAndReceive
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IRabbitTemplate.SendAndReceive
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync
  name: SendAndReceiveAsync
  nameWithType: RabbitTemplate.SendAndReceiveAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive
  name: ConvertSendAndReceive
  nameWithType: RabbitTemplate.ConvertSendAndReceive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertSendAndReceive<T>(Object, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(Object, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(Object, CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive<T>
    nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IRabbitTemplate.ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor, CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive<T>
    nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IRabbitTemplate.ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertSendAndReceive<T>(String, String, Object)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(String, String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object)
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IRabbitTemplate.ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertSendAndReceive<T>(String, String, Object, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(String, String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object, CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive<T>
    nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IRabbitTemplate.ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive<T>
    nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IRabbitTemplate.ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync
  name: ConvertSendAndReceiveAsync
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType
  name: ConvertSendAndReceiveAsType
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsType
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync
  name: ConvertSendAndReceiveAsTypeAsync
  nameWithType: RabbitTemplate.ConvertSendAndReceiveAsTypeAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend
  name: CorrelationConvertAndSend
  nameWithType: RabbitTemplate.CorrelationConvertAndSend
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed
  name: GetUnconfirmed
  nameWithType: RabbitTemplate.GetUnconfirmed
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Collections.Generic.ICollection{Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData}
  commentId: T:System.Collections.Generic.ICollection{Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<CorrelationData>
  nameWithType: ICollection<CorrelationData>
  fullName: System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData>
  nameWithType.vb: ICollection(Of CorrelationData)
  fullName.vb: System.Collections.Generic.ICollection(Of Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ICollection(Of CorrelationData)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    name: CorrelationData
    nameWithType: CorrelationData
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount
  name: GetUnconfirmedCount
  nameWithType: RabbitTemplate.GetUnconfirmedCount
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute
  name: Execute
  nameWithType: RabbitTemplate.Execute
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute
- uid: System.Action{RabbitMQ.Client.IModel}
  commentId: T:System.Action{RabbitMQ.Client.IModel}
  parent: System
  definition: System.Action`1
  name: Action<IModel>
  nameWithType: Action<IModel>
  fullName: System.Action<RabbitMQ.Client.IModel>
  nameWithType.vb: Action(Of IModel)
  fullName.vb: System.Action(Of RabbitMQ.Client.IModel)
  name.vb: Action(Of IModel)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,{T}})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  name: Execute<T>(Func<IModel, T>)
  nameWithType: IRabbitTemplate.Execute<T>(Func<IModel, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute<T>(System.Func<RabbitMQ.Client.IModel, T>)
  nameWithType.vb: IRabbitTemplate.Execute(Of T)(Func(Of IModel, T))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute(Of T)(System.Func(Of RabbitMQ.Client.IModel, T))
  name.vb: Execute(Of T)(Func(Of IModel, T))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
    name: Execute<T>
    nameWithType: IRabbitTemplate.Execute<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
    name: Execute(Of T)
    nameWithType: IRabbitTemplate.Execute(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{RabbitMQ.Client.IModel,{T}}
  commentId: T:System.Func{RabbitMQ.Client.IModel,``0}
  parent: System
  definition: System.Func`2
  name: Func<IModel, T>
  nameWithType: Func<IModel, T>
  fullName: System.Func<RabbitMQ.Client.IModel, T>
  nameWithType.vb: Func(Of IModel, T)
  fullName.vb: System.Func(Of RabbitMQ.Client.IModel, T)
  name.vb: Func(Of IModel, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  isExternal: true
  name: Execute<T>(Func<IModel, T>)
  nameWithType: IRabbitTemplate.Execute<T>(Func<IModel, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute<T>(System.Func<RabbitMQ.Client.IModel, T>)
  nameWithType.vb: IRabbitTemplate.Execute(Of T)(Func(Of IModel, T))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute(Of T)(System.Func(Of RabbitMQ.Client.IModel, T))
  name.vb: Execute(Of T)(Func(Of IModel, T))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
    name: Execute<T>
    nameWithType: IRabbitTemplate.Execute<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
    name: Execute(Of T)
    nameWithType: IRabbitTemplate.Execute(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener
  name: AddListener
  nameWithType: RabbitTemplate.AddListener
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke
  name: Invoke
  nameWithType: RabbitTemplate.Invoke
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  name: Invoke<T>(Func<IRabbitTemplate, T>)
  nameWithType: IRabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>)
  nameWithType.vb: IRabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
    name: Invoke<T>
    nameWithType: IRabbitTemplate.Invoke<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
    name: Invoke(Of T)
    nameWithType: IRabbitTemplate.Invoke(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}}
  commentId: T:System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0}
  parent: System
  definition: System.Func`2
  name: Func<IRabbitTemplate, T>
  nameWithType: Func<IRabbitTemplate, T>
  fullName: System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>
  nameWithType.vb: Func(Of IRabbitTemplate, T)
  fullName.vb: System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T)
  name.vb: Func(Of IRabbitTemplate, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  isExternal: true
  name: Invoke<T>(Func<IRabbitTemplate, T>)
  nameWithType: IRabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>)
  nameWithType.vb: IRabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
    name: Invoke<T>
    nameWithType: IRabbitTemplate.Invoke<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
    name: Invoke(Of T)
    nameWithType: IRabbitTemplate.Invoke(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  definition: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  name: Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  nameWithType: IRabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>, System.Action<System.Object, RabbitMQ.Client.Events.BasicAckEventArgs>, System.Action<System.Object, RabbitMQ.Client.Events.BasicNackEventArgs>)
  nameWithType.vb: IRabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicAckEventArgs), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicNackEventArgs))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
    name: Invoke<T>
    nameWithType: IRabbitTemplate.Invoke<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
    name: Invoke(Of T)
    nameWithType: IRabbitTemplate.Invoke(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs}
  commentId: T:System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs}
  parent: System
  definition: System.Action`2
  name: Action<Object, BasicAckEventArgs>
  nameWithType: Action<Object, BasicAckEventArgs>
  fullName: System.Action<System.Object, RabbitMQ.Client.Events.BasicAckEventArgs>
  nameWithType.vb: Action(Of Object, BasicAckEventArgs)
  fullName.vb: System.Action(Of System.Object, RabbitMQ.Client.Events.BasicAckEventArgs)
  name.vb: Action(Of Object, BasicAckEventArgs)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs}
  commentId: T:System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs}
  parent: System
  definition: System.Action`2
  name: Action<Object, BasicNackEventArgs>
  nameWithType: Action<Object, BasicNackEventArgs>
  fullName: System.Action<System.Object, RabbitMQ.Client.Events.BasicNackEventArgs>
  nameWithType.vb: Action(Of Object, BasicNackEventArgs)
  fullName.vb: System.Action(Of System.Object, RabbitMQ.Client.Events.BasicNackEventArgs)
  name.vb: Action(Of Object, BasicNackEventArgs)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  isExternal: true
  name: Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  nameWithType: IRabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>, System.Action<System.Object, RabbitMQ.Client.Events.BasicAckEventArgs>, System.Action<System.Object, RabbitMQ.Client.Events.BasicNackEventArgs>)
  nameWithType.vb: IRabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicAckEventArgs), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicNackEventArgs))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
    name: Invoke<T>
    nameWithType: IRabbitTemplate.Invoke<T>
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
    name: Invoke(Of T)
    nameWithType: IRabbitTemplate.Invoke(Of T)
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms
  name: WaitForConfirms
  nameWithType: RabbitTemplate.WaitForConfirms
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: WaitForConfirms(Int32)
  nameWithType: IRabbitTemplate.WaitForConfirms(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
    name: WaitForConfirms
    nameWithType: IRabbitTemplate.WaitForConfirms
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
    name: WaitForConfirms
    nameWithType: IRabbitTemplate.WaitForConfirms
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie
  name: WaitForConfirmsOrDie
  nameWithType: RabbitTemplate.WaitForConfirmsOrDie
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  isExternal: true
  name: WaitForConfirmsOrDie(Int32)
  nameWithType: IRabbitTemplate.WaitForConfirmsOrDie(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
    name: WaitForConfirmsOrDie
    nameWithType: IRabbitTemplate.WaitForConfirmsOrDie
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
    name: WaitForConfirmsOrDie
    nameWithType: IRabbitTemplate.WaitForConfirmsOrDie
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability
  name: DetermineConfirmsReturnsCapability
  nameWithType: RabbitTemplate.DetermineConfirmsReturnsCapability
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor
  name: IsMandatoryFor
  nameWithType: RabbitTemplate.IsMandatoryFor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose
  name: Dispose
  nameWithType: RabbitTemplate.Dispose
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start
  name: Start
  nameWithType: RabbitTemplate.Start
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop
  name: Stop
  nameWithType: RabbitTemplate.Stop
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary
  name: ConvertMessageIfNecessary
  nameWithType: RabbitTemplate.ConvertMessageIfNecessary
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary
  name: DoSendAndReceiveWithTemporary
  nameWithType: RabbitTemplate.DoSendAndReceiveWithTemporary
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert
  name: DoReceiveAndConvert
  nameWithType: RabbitTemplate.DoReceiveAndConvert
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive
  name: DoReceive
  nameWithType: RabbitTemplate.DoReceive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
  name: DoReceive(RabbitDestination)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.DoReceive(RabbitDestination)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).DoReceive(RabbitDestination)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: RabbitDestination
  nameWithType: RabbitDestination
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
  name: DoReceive(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoReceive(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceive(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoReceive(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceive(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate<D>.DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
  name: DoReceiveAsync(RabbitDestination, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.DoReceiveAsync(RabbitDestination, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of RabbitDestination).DoReceiveAsync(RabbitDestination, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<RabbitDestination>.DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of RabbitDestination).DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync
  name: DoReceiveAsync
  nameWithType: RabbitTemplate.DoReceiveAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DoReceiveAsync(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoReceiveAsync(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceiveAsync(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoReceiveAsync(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceiveAsync(D, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: DoSendAsync(RabbitDestination, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.DoSendAsync(RabbitDestination, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).DoSendAsync(RabbitDestination, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync
  name: DoSendAsync
  nameWithType: RabbitTemplate.DoSendAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: DoSendAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.DoSendAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoSendAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: DoSendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.DoSendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).DoSendAndReceiveAsync(RabbitDestination, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.DoSendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).DoSendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync
  name: DoSendAndReceiveAsync
  nameWithType: RabbitTemplate.DoSendAndReceiveAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: DoSendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAndReceiveAsync
    nameWithType: AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: DoSendAndReceive(RabbitDestination, IMessage)
  nameWithType: AbstractMessagingTemplate<RabbitDestination>.DoSendAndReceive(RabbitDestination, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of RabbitDestination).DoSendAndReceive(RabbitDestination, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: DoSendAndReceive
    nameWithType: AbstractMessagingTemplate<RabbitDestination>.DoSendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: DoSendAndReceive
    nameWithType: AbstractMessagingTemplate(Of RabbitDestination).DoSendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive
  name: DoSendAndReceive
  nameWithType: RabbitTemplate.DoSendAndReceive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: DoSendAndReceive(D, IMessage)
  nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceive(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of D).DoSendAndReceive(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceive(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: DoSendAndReceive
    nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: DoSendAndReceive
    nameWithType: AbstractMessagingTemplate(Of D).DoSendAndReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed
  name: DoSendAndReceiveWithFixed
  nameWithType: RabbitTemplate.DoSendAndReceiveWithFixed
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect
  name: DoSendAndReceiveWithDirect
  nameWithType: RabbitTemplate.DoSendAndReceiveWithDirect
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait
  name: DoReceiveNoWait
  nameWithType: RabbitTemplate.DoReceiveNoWait
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend
  name: DoSend
  nameWithType: RabbitTemplate.DoSend
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
  name: DoSend(RabbitDestination, IMessage)
  nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.DoSend(RabbitDestination, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of RabbitDestination).DoSend(RabbitDestination, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate<RabbitDestination>.DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination>.DoSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate(Of RabbitDestination).DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination).DoSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
    name: RabbitDestination
    nameWithType: RabbitDestination
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
  name: DoSend(D, IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.DoSend(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSend(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoSend(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSend(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate<D>.DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate(Of D).DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit
  name: SendToRabbit
  nameWithType: RabbitTemplate.SendToRabbit
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted
  name: IsChannelLocallyTransacted
  nameWithType: RabbitTemplate.IsChannelLocallyTransacted
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection
  name: CreateConnection
  nameWithType: RabbitTemplate.CreateConnection
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IConnection
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.IConnection
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: IConnection
  nameWithType: IConnection
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IConnection
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder
  name: GetTransactionalResourceHolder
  nameWithType: RabbitTemplate.GetTransactionalResourceHolder
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder
- uid: Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: RabbitResourceHolder
  nameWithType: RabbitResourceHolder
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException
  name: ConvertRabbitAccessException
  nameWithType: RabbitTemplate.ConvertRabbitAccessException
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw
  name: ConvertSendAndReceiveRaw
  nameWithType: RabbitTemplate.ConvertSendAndReceiveRaw
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange
  name: GetDefaultExchange
  nameWithType: RabbitTemplate.GetDefaultExchange
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey
  name: GetDefaultRoutingKey
  nameWithType: RabbitTemplate.GetDefaultRoutingKey
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo
  name: UseDirectReplyTo
  nameWithType: RabbitTemplate.UseDirectReplyTo
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut
  name: ReplyTimedOut
  nameWithType: RabbitTemplate.ReplyTimedOut
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart
  name: DoStart
  nameWithType: RabbitTemplate.DoStart
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop
  name: DoStop
  nameWithType: RabbitTemplate.DoStop
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop
