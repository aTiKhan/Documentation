### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  commentId: T:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  id: SimpleBatchingStrategy
  parent: Steeltoe.Messaging.RabbitMQ.Batch
  children:
  - Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.#ctor(System.Int32,System.Int32,System.Int64)
  - Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
  - Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease
  - Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches
  langs:
  - csharp
  - vb
  name: SimpleBatchingStrategy
  nameWithType: SimpleBatchingStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SimpleBatchingStrategy
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
    startLine: 14
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Batch
  syntax:
    content: 'public class SimpleBatchingStrategy : IBatchingStrategy'
    content.vb: >-
      Public Class SimpleBatchingStrategy

          Implements IBatchingStrategy
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.#ctor(System.Int32,System.Int32,System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.#ctor(System.Int32,System.Int32,System.Int64)
  id: '#ctor(System.Int32,System.Int32,System.Int64)'
  parent: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  langs:
  - csharp
  - vb
  name: SimpleBatchingStrategy(Int32, Int32, Int64)
  nameWithType: SimpleBatchingStrategy.SimpleBatchingStrategy(Int32, Int32, Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.SimpleBatchingStrategy(System.Int32, System.Int32, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
    startLine: 26
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Batch
  syntax:
    content: public SimpleBatchingStrategy(int batchSize, int bufferLimit, long timeout)
    parameters:
    - id: batchSize
      type: System.Int32
    - id: bufferLimit
      type: System.Int32
    - id: timeout
      type: System.Int64
    content.vb: Public Sub New(batchSize As Integer, bufferLimit As Integer, timeout As Long)
  overload: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
  id: AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  langs:
  - csharp
  - vb
  name: AddToBatch(String, String, IMessage)
  nameWithType: SimpleBatchingStrategy.AddToBatch(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch(System.String, System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddToBatch
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
    startLine: 33
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Batch
  syntax:
    content: public MessageBatch? AddToBatch(string exch, string routKey, IMessage input)
    parameters:
    - id: exch
      type: System.String
    - id: routKey
      type: System.String
    - id: input
      type: Steeltoe.Messaging.IMessage
    return:
      type: System.Nullable{Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch}
    content.vb: Public Function AddToBatch(exch As String, routKey As String, input As IMessage) As MessageBatch?
  overload: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease
  id: NextRelease
  parent: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  langs:
  - csharp
  - vb
  name: NextRelease()
  nameWithType: SimpleBatchingStrategy.NextRelease()
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: NextRelease
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
    startLine: 74
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Batch
  syntax:
    content: public DateTime? NextRelease()
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Public Function NextRelease As Date?
  overload: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches
  id: ReleaseBatches
  parent: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  langs:
  - csharp
  - vb
  name: ReleaseBatches()
  nameWithType: SimpleBatchingStrategy.ReleaseBatches()
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReleaseBatches
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
    startLine: 91
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Batch
  syntax:
    content: public ICollection<MessageBatch> ReleaseBatches()
    return:
      type: System.Collections.Generic.ICollection{Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch}
    content.vb: Public Function ReleaseBatches As ICollection(Of MessageBatch)
  overload: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  id: CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  langs:
  - csharp
  - vb
  name: CanDebatch(IMessageHeaders)
  nameWithType: SimpleBatchingStrategy.CanDebatch(IMessageHeaders)
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanDebatch
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
    startLine: 104
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Batch
  syntax:
    content: public bool CanDebatch(IMessageHeaders properties)
    parameters:
    - id: properties
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: System.Boolean
    content.vb: Public Function CanDebatch(properties As IMessageHeaders) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
  id: DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
  parent: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
  langs:
  - csharp
  - vb
  name: DeBatch(IMessage, Action<IMessage>)
  nameWithType: SimpleBatchingStrategy.DeBatch(IMessage, Action<IMessage>)
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage, System.Action<Steeltoe.Messaging.IMessage>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DeBatch
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Batch/SimpleBatchingStrategy.cs
    startLine: 114
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Batch
  syntax:
    content: public void DeBatch(IMessage input, Action<IMessage> fragmentConsumer)
    parameters:
    - id: input
      type: Steeltoe.Messaging.IMessage
    - id: fragmentConsumer
      type: System.Action{Steeltoe.Messaging.IMessage}
    content.vb: Public Sub DeBatch(input As IMessage, fragmentConsumer As Action(Of IMessage))
  overload: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch*
  implements:
  - Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
  nameWithType.vb: SimpleBatchingStrategy.DeBatch(IMessage, Action(Of IMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage, System.Action(Of Steeltoe.Messaging.IMessage))
  name.vb: DeBatch(IMessage, Action(Of IMessage))
references:
- uid: Steeltoe.Messaging.RabbitMQ.Batch
  commentId: N:Steeltoe.Messaging.RabbitMQ.Batch
  name: Steeltoe.Messaging.RabbitMQ.Batch
  nameWithType: Steeltoe.Messaging.RabbitMQ.Batch
  fullName: Steeltoe.Messaging.RabbitMQ.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  commentId: T:Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  parent: Steeltoe.Messaging.RabbitMQ.Batch
  name: IBatchingStrategy
  nameWithType: IBatchingStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.#ctor
  name: SimpleBatchingStrategy
  nameWithType: SimpleBatchingStrategy.SimpleBatchingStrategy
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.SimpleBatchingStrategy
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch
  name: AddToBatch
  nameWithType: SimpleBatchingStrategy.AddToBatch
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch
- uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  isExternal: true
  name: AddToBatch(String, String, IMessage)
  nameWithType: IBatchingStrategy.AddToBatch(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch(System.String, System.String, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
    name: AddToBatch
    nameWithType: IBatchingStrategy.AddToBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch(System.String,System.String,Steeltoe.Messaging.IMessage)
    name: AddToBatch
    nameWithType: IBatchingStrategy.AddToBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Nullable{Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch}
  commentId: T:System.Nullable{Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch}
  parent: System
  definition: System.Nullable`1
  name: Nullable<MessageBatch>
  nameWithType: Nullable<MessageBatch>
  fullName: System.Nullable<Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch>
  nameWithType.vb: Nullable(Of MessageBatch)
  fullName.vb: System.Nullable(Of Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch)
  name.vb: Nullable(Of MessageBatch)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
    name: MessageBatch
    nameWithType: MessageBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
    name: MessageBatch
    nameWithType: MessageBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease
  name: NextRelease
  nameWithType: SimpleBatchingStrategy.NextRelease
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease
- uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease
  parent: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  name: NextRelease()
  nameWithType: IBatchingStrategy.NextRelease()
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease
    name: NextRelease
    nameWithType: IBatchingStrategy.NextRelease
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease
    name: NextRelease
    nameWithType: IBatchingStrategy.NextRelease
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches
  name: ReleaseBatches
  nameWithType: SimpleBatchingStrategy.ReleaseBatches
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches
- uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches
  parent: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  name: ReleaseBatches()
  nameWithType: IBatchingStrategy.ReleaseBatches()
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches
    name: ReleaseBatches
    nameWithType: IBatchingStrategy.ReleaseBatches
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches
    name: ReleaseBatches
    nameWithType: IBatchingStrategy.ReleaseBatches
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch}
  commentId: T:System.Collections.Generic.ICollection{Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<MessageBatch>
  nameWithType: ICollection<MessageBatch>
  fullName: System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch>
  nameWithType.vb: ICollection(Of MessageBatch)
  fullName.vb: System.Collections.Generic.ICollection(Of Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch)
  name.vb: ICollection(Of MessageBatch)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
    name: MessageBatch
    nameWithType: MessageBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
    name: MessageBatch
    nameWithType: MessageBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch
  name: CanDebatch
  nameWithType: SimpleBatchingStrategy.CanDebatch
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch
- uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  name: CanDebatch(IMessageHeaders)
  nameWithType: IBatchingStrategy.CanDebatch(IMessageHeaders)
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
    name: CanDebatch
    nameWithType: IBatchingStrategy.CanDebatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders)
    name: CanDebatch
    nameWithType: IBatchingStrategy.CanDebatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch
  name: DeBatch
  nameWithType: SimpleBatchingStrategy.DeBatch
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch
- uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
  parent: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
  isExternal: true
  name: DeBatch(IMessage, Action<IMessage>)
  nameWithType: IBatchingStrategy.DeBatch(IMessage, Action<IMessage>)
  fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage, System.Action<Steeltoe.Messaging.IMessage>)
  nameWithType.vb: IBatchingStrategy.DeBatch(IMessage, Action(Of IMessage))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage, System.Action(Of Steeltoe.Messaging.IMessage))
  name.vb: DeBatch(IMessage, Action(Of IMessage))
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
    name: DeBatch
    nameWithType: IBatchingStrategy.DeBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage,System.Action{Steeltoe.Messaging.IMessage})
    name: DeBatch
    nameWithType: IBatchingStrategy.DeBatch
    fullName: Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Steeltoe.Messaging.IMessage}
  commentId: T:System.Action{Steeltoe.Messaging.IMessage}
  parent: System
  definition: System.Action`1
  name: Action<IMessage>
  nameWithType: Action<IMessage>
  fullName: System.Action<Steeltoe.Messaging.IMessage>
  nameWithType.vb: Action(Of IMessage)
  fullName.vb: System.Action(Of Steeltoe.Messaging.IMessage)
  name.vb: Action(Of IMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
