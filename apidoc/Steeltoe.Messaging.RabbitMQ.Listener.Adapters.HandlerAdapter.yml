### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  id: HandlerAdapter
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  children:
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor(Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor(System.Object,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString(System.Object)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor(System.Object)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor(System.Object)
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  - Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod
  langs:
  - csharp
  - vb
  name: HandlerAdapter
  nameWithType: HandlerAdapter
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HandlerAdapter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 10
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public class HandlerAdapter
    content.vb: Public Class HandlerAdapter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor(Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor(Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  id: '#ctor(Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)'
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: HandlerAdapter(IInvocableHandlerMethod)
  nameWithType: HandlerAdapter.HandlerAdapter(IInvocableHandlerMethod)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.HandlerAdapter(Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 12
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public HandlerAdapter(IInvocableHandlerMethod invokerHandlerMethod)
    parameters:
    - id: invokerHandlerMethod
      type: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    content.vb: Public Sub New(invokerHandlerMethod As IInvocableHandlerMethod)
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler)
  id: '#ctor(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler)'
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: HandlerAdapter(DelegatingInvocableHandler)
  nameWithType: HandlerAdapter.HandlerAdapter(DelegatingInvocableHandler)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.HandlerAdapter(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 18
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public HandlerAdapter(DelegatingInvocableHandler delegatingHandler)
    parameters:
    - id: delegatingHandler
      type: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
    content.vb: Public Sub New(delegatingHandler As DelegatingInvocableHandler)
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod
  id: InvokerHandlerMethod
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: InvokerHandlerMethod
  nameWithType: HandlerAdapter.InvokerHandlerMethod
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: InvokerHandlerMethod
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 24
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public IInvocableHandlerMethod InvokerHandlerMethod { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
    content.vb: Public ReadOnly Property InvokerHandlerMethod As IInvocableHandlerMethod
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler
  id: DelegatingHandler
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: DelegatingHandler
  nameWithType: HandlerAdapter.DelegatingHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DelegatingHandler
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 26
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public DelegatingInvocableHandler DelegatingHandler { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
    content.vb: Public ReadOnly Property DelegatingHandler As DelegatingInvocableHandler
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  id: Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: Invoke(IMessage, Object[])
  nameWithType: HandlerAdapter.Invoke(IMessage, Object[])
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke(Steeltoe.Messaging.IMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Invoke
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 28
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public InvocationResult Invoke(IMessage message, params object[] providedArgs)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: providedArgs
      type: System.Object[]
    return:
      type: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
    content.vb: Public Function Invoke(message As IMessage, ParamArray providedArgs As Object()) As InvocationResult
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke*
  nameWithType.vb: HandlerAdapter.Invoke(IMessage, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke(Steeltoe.Messaging.IMessage, System.Object())
  name.vb: Invoke(IMessage, Object())
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString(System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString(System.Object)
  id: GetMethodAsString(System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: GetMethodAsString(Object)
  nameWithType: HandlerAdapter.GetMethodAsString(Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMethodAsString
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 53
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public string GetMethodAsString(object payload)
    parameters:
    - id: payload
      type: System.Object
    return:
      type: System.String
    content.vb: Public Function GetMethodAsString(payload As Object) As String
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor(System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor(System.Object)
  id: GetMethodFor(System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: GetMethodFor(Object)
  nameWithType: HandlerAdapter.GetMethodFor(Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMethodFor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 65
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public MethodInfo GetMethodFor(object payload)
    parameters:
    - id: payload
      type: System.Object
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Function GetMethodFor(payload As Object) As MethodInfo
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor(System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor(System.Object)
  id: GetReturnTypeFor(System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: GetReturnTypeFor(Object)
  nameWithType: HandlerAdapter.GetReturnTypeFor(Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetReturnTypeFor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 77
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public Type GetReturnTypeFor(object payload)
    parameters:
    - id: payload
      type: System.Object
    return:
      type: System.Type
    content.vb: Public Function GetReturnTypeFor(payload As Object) As Type
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance
  commentId: P:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance
  id: Instance
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: HandlerAdapter.Instance
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Instance
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 89
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public object Instance { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Instance As Object
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor(System.Object,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor(System.Object,System.Object)
  id: GetInvocationResultFor(System.Object,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
  langs:
  - csharp
  - vb
  name: GetInvocationResultFor(Object, Object)
  nameWithType: HandlerAdapter.GetInvocationResultFor(Object, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetInvocationResultFor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Listener/Adapters/HandlerAdapter.cs
    startLine: 104
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  syntax:
    content: public InvocationResult GetInvocationResultFor(object result, object inboundPayload)
    parameters:
    - id: result
      type: System.Object
    - id: inboundPayload
      type: System.Object
    return:
      type: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
    content.vb: Public Function GetInvocationResultFor(result As Object, inboundPayload As Object) As InvocationResult
  overload: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  commentId: N:Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  name: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  nameWithType: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.#ctor
  name: HandlerAdapter
  nameWithType: HandlerAdapter.HandlerAdapter
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.HandlerAdapter
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  commentId: T:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  parent: Steeltoe.Messaging.Handler.Invocation
  name: IInvocableHandlerMethod
  nameWithType: IInvocableHandlerMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
- uid: Steeltoe.Messaging.Handler.Invocation
  commentId: N:Steeltoe.Messaging.Handler.Invocation
  name: Steeltoe.Messaging.Handler.Invocation
  nameWithType: Steeltoe.Messaging.Handler.Invocation
  fullName: Steeltoe.Messaging.Handler.Invocation
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  name: DelegatingInvocableHandler
  nameWithType: DelegatingInvocableHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod
  name: InvokerHandlerMethod
  nameWithType: HandlerAdapter.InvokerHandlerMethod
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler
  name: DelegatingHandler
  nameWithType: HandlerAdapter.DelegatingHandler
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke
  name: Invoke
  nameWithType: HandlerAdapter.Invoke
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
  commentId: T:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
  parent: Steeltoe.Messaging.RabbitMQ.Listener.Adapters
  name: InvocationResult
  nameWithType: InvocationResult
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString
  name: GetMethodAsString
  nameWithType: HandlerAdapter.GetMethodAsString
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor
  name: GetMethodFor
  nameWithType: HandlerAdapter.GetMethodFor
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor
  name: GetReturnTypeFor
  nameWithType: HandlerAdapter.GetReturnTypeFor
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance
  name: Instance
  nameWithType: HandlerAdapter.Instance
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance
- uid: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor
  name: GetInvocationResultFor
  nameWithType: HandlerAdapter.GetInvocationResultFor
  fullName: Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor
