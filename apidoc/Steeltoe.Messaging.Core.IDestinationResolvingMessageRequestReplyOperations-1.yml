### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  commentId: T:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  id: IDestinationResolvingMessageRequestReplyOperations`1
  parent: Steeltoe.Messaging.Core
  children:
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDestinationResolvingMessageRequestReplyOperations<D>
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>
  type: Interface
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IDestinationResolvingMessageRequestReplyOperations
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 14
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nProvide operations for sending and receiving messages to and from a destination specified as a string\n"
  example: []
  syntax:
    content: 'public interface IDestinationResolvingMessageRequestReplyOperations<D> : IMessageRequestReplyOperations<D>'
    typeParameters:
    - id: D
      description: the type of the destination
    content.vb: >-
      Public Interface IDestinationResolvingMessageRequestReplyOperations(Of D)

          Inherits IMessageRequestReplyOperations(Of D)
  inheritedMembers:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive({D},Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D)
  name.vb: IDestinationResolvingMessageRequestReplyOperations(Of D)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(String, IMessage, CancellationToken)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceiveAsync(String, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceiveAsync(System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 24
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name to a destination and send the given message,\nreceive a reply and return it.\n"
  example: []
  syntax:
    content: Task<IMessage> SendAndReceiveAsync(string destinationName, IMessage requestMessage, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
      description: the message to send
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: token used to signal cancelation
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
      description: a task to signal completion
    content.vb: Function SendAndReceiveAsync(destinationName As String, requestMessage As IMessage, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceiveAsync*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceiveAsync(String, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceiveAsync(System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, CancellationToken)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(String, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.String, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 36
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: Task<T> ConvertSendAndReceiveAsync<T>(string destinationName, object request, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: token used to signal cancelation
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: a task to signal completion
    content.vb: Function ConvertSendAndReceiveAsync(Of T)(destinationName As String, request As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(String, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, CancellationToken)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(String, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.String, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 49
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message with the given headers and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: Task<T> ConvertSendAndReceiveAsync<T>(string destinationName, object request, IDictionary<string, object> headers, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: the headers to include in the message
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: token used to signal cancelation
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: a task to signal completion
    content.vb: Function ConvertSendAndReceiveAsync(Of T)(destinationName As String, request As Object, headers As IDictionary(Of String, Object), cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(String, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, IDictionary(Of String, Object), CancellationToken)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(String, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.String, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 62
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message, apply the post process, and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: Task<T> ConvertSendAndReceiveAsync<T>(string destinationName, object request, IMessagePostProcessor requestPostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
      description: post process for the request message
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: token used to signal cancelation
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: a task to signal completion
    content.vb: Function ConvertSendAndReceiveAsync(Of T)(destinationName As String, request As Object, requestPostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(String, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(String, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(String, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.String, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 76
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message with the given headers, apply the post process, and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: Task<T> ConvertSendAndReceiveAsync<T>(string destinationName, object request, IDictionary<string, object> headers, IMessagePostProcessor requestPostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: the headers to include in the message
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
      description: post process for the request message
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: token used to signal cancelation
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: a task to signal completion
    content.vb: Function ConvertSendAndReceiveAsync(Of T)(destinationName As String, request As Object, headers As IDictionary(Of String, Object), requestPostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(String, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.String, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(String, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  id: SendAndReceive(System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: SendAndReceive(String, IMessage)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceive(String, IMessage)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceive(System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 85
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name to a destination and send the given message,\nreceive a reply and return it.\n"
  example: []
  syntax:
    content: IMessage SendAndReceive(string destinationName, IMessage requestMessage)
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
      description: the message to send
    return:
      type: Steeltoe.Messaging.IMessage
      description: the received message or null if nothing received
    content.vb: Function SendAndReceive(destinationName As String, requestMessage As IMessage) As IMessage
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceive*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceive(String, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceive(System.String, Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object)
  id: ConvertSendAndReceive``1(System.String,System.Object)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(String, Object)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 96
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: T ConvertSendAndReceive<T>(string destinationName, object request)
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: '{T}'
      description: the converted payload of the reply message, possibly null
    content.vb: Function ConvertSendAndReceive(Of T)(destinationName As String, request As Object) As T
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(String, Object)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.String, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(String, Object)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object, IDictionary<String, Object>)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(String, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.String, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 108
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message with the given headers and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: T ConvertSendAndReceive<T>(string destinationName, object request, IDictionary<string, object> headers)
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: the headers to include in the message
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: '{T}'
      description: the converted payload of the reply message, possibly null
    content.vb: Function ConvertSendAndReceive(Of T)(destinationName As String, request As Object, headers As IDictionary(Of String, Object)) As T
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(String, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.String, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(String, Object, IDictionary(Of String, Object))
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(System.String,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object, IMessagePostProcessor)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(String, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.String, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 120
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message, apply the post process, and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: T ConvertSendAndReceive<T>(string destinationName, object request, IMessagePostProcessor requestPostProcessor)
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
      description: post process for the request message
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: '{T}'
      description: the converted payload of the reply message, possibly null
    content.vb: Function ConvertSendAndReceive(Of T)(destinationName As String, request As Object, requestPostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(String, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.String, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(String, Object, IMessagePostProcessor)
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(String, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.String, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/Abstractions/Core/IDestinationResolvingMessageRequestReplyOperations.cs
    startLine: 133
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Core
  summary: "\nResolve the given destination name, convert the payload request object to serialized form, possibly using a\nmessage converter and then wrap it as a message with the given headers, apply the post process, and send it to the resolved destination, receive a reply\nand convert its body to the specified target type.\n"
  example: []
  syntax:
    content: T ConvertSendAndReceive<T>(string destinationName, object request, IDictionary<string, object> headers, IMessagePostProcessor requestPostProcessor)
    parameters:
    - id: destinationName
      type: System.String
      description: the name of the target destination
    - id: request
      type: System.Object
      description: the payload for the request message
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: the headers to include in the message
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
      description: post process for the request message
    typeParameters:
    - id: T
      description: the type of the reply
    return:
      type: '{T}'
      description: the converted payload of the reply message, possibly null
    content.vb: Function ConvertSendAndReceive(Of T)(destinationName As String, request As Object, headers As IDictionary(Of String, Object), requestPostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive*
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(String, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.String, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(String, Object, IDictionary(Of String, Object), IMessagePostProcessor)
references:
- uid: Steeltoe.Messaging.Core
  commentId: N:Steeltoe.Messaging.Core
  name: Steeltoe.Messaging.Core
  nameWithType: Steeltoe.Messaging.Core
  fullName: Steeltoe.Messaging.Core
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAndReceiveAsync(IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceive(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  name: SendAndReceive(IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive({D},Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: SendAndReceive(D, IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(System.Object)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
  name: ConvertSendAndReceive<T>(Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object)
  name.vb: ConvertSendAndReceive(Of T)(Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
  name: ConvertSendAndReceive<T>(D, Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(D, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAndReceiveAsync(IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  commentId: T:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  name: IMessageRequestReplyOperations<D>
  nameWithType: IMessageRequestReplyOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>
  nameWithType.vb: IMessageRequestReplyOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D)
  name.vb: IMessageRequestReplyOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  name: SendAndReceive(IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: SendAndReceive(D, IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
  isExternal: true
  name: ConvertSendAndReceive<T>(Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object)
  name.vb: ConvertSendAndReceive(Of T)(Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(D, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  commentId: T:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  name: IMessageRequestReplyOperations<D>
  nameWithType: IMessageRequestReplyOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>
  nameWithType.vb: IMessageRequestReplyOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D)
  name.vb: IMessageRequestReplyOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceiveAsync
  name: SendAndReceiveAsync
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceiveAsync
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceiveAsync
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceiveAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
  commentId: T:System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Steeltoe.Messaging.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync
  name: ConvertSendAndReceiveAsync
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Core.IMessagePostProcessor
  commentId: T:Steeltoe.Messaging.Core.IMessagePostProcessor
  parent: Steeltoe.Messaging.Core
  name: IMessagePostProcessor
  nameWithType: IMessagePostProcessor
  fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceive*
  commentId: Overload:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.SendAndReceive
  name: SendAndReceive
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceive
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.SendAndReceive
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceive
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).SendAndReceive
- uid: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive*
  commentId: Overload:Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations`1.ConvertSendAndReceive
  name: ConvertSendAndReceive
  nameWithType: IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive
  fullName: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations<D>.ConvertSendAndReceive
  nameWithType.vb: IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive
  fullName.vb: Steeltoe.Messaging.Core.IDestinationResolvingMessageRequestReplyOperations(Of D).ConvertSendAndReceive
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
