### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  commentId: T:Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  id: RabbitHostService
  parent: Steeltoe.Messaging.RabbitMQ.Host
  children:
  - Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILogger{Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService})
  - Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync(System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: RabbitHostService
  nameWithType: RabbitHostService
  fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RabbitHostService
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
    startLine: 16
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Host
  syntax:
    content: 'public class RabbitHostService : IHostedService'
    content.vb: >-
      Public Class RabbitHostService

          Implements IHostedService
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Hosting.IHostedService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILogger{Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILogger{Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService})
  id: '#ctor(Steeltoe.Common.Contexts.IApplicationContext,Microsoft.Extensions.Logging.ILogger{Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService})'
  parent: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  langs:
  - csharp
  - vb
  name: RabbitHostService(IApplicationContext, ILogger<RabbitHostService>)
  nameWithType: RabbitHostService.RabbitHostService(IApplicationContext, ILogger<RabbitHostService>)
  fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.RabbitHostService(Steeltoe.Common.Contexts.IApplicationContext, Microsoft.Extensions.Logging.ILogger<Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService>)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
    startLine: 21
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Host
  syntax:
    content: public RabbitHostService(IApplicationContext applicationContext, ILogger<RabbitHostService> logger = null)
    parameters:
    - id: applicationContext
      type: Steeltoe.Common.Contexts.IApplicationContext
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService}
    content.vb: Public Sub New(applicationContext As IApplicationContext, logger As ILogger(Of RabbitHostService) = Nothing)
  overload: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.#ctor*
  nameWithType.vb: RabbitHostService.RabbitHostService(IApplicationContext, ILogger(Of RabbitHostService))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.RabbitHostService(Steeltoe.Common.Contexts.IApplicationContext, Microsoft.Extensions.Logging.ILogger(Of Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService))
  name.vb: RabbitHostService(IApplicationContext, ILogger(Of RabbitHostService))
- uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync(System.Threading.CancellationToken)
  id: StartAsync(System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  langs:
  - csharp
  - vb
  name: StartAsync(CancellationToken)
  nameWithType: RabbitHostService.StartAsync(CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: StartAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
    startLine: 27
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Host
  syntax:
    content: public Task StartAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function StartAsync(cancellationToken As CancellationToken) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync(System.Threading.CancellationToken)
  id: StopAsync(System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  langs:
  - csharp
  - vb
  name: StopAsync(CancellationToken)
  nameWithType: RabbitHostService.StopAsync(CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: StopAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Host/RabbitHostService.cs
    startLine: 63
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Host
  syntax:
    content: public Task StopAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function StopAsync(cancellationToken As CancellationToken) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Messaging.RabbitMQ.Host
  commentId: N:Steeltoe.Messaging.RabbitMQ.Host
  name: Steeltoe.Messaging.RabbitMQ.Host
  nameWithType: Steeltoe.Messaging.RabbitMQ.Host
  fullName: Steeltoe.Messaging.RabbitMQ.Host
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Hosting.IHostedService
  commentId: T:Microsoft.Extensions.Hosting.IHostedService
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostedService
  nameWithType: IHostedService
  fullName: Microsoft.Extensions.Hosting.IHostedService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  isExternal: true
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.#ctor
  name: RabbitHostService
  nameWithType: RabbitHostService.RabbitHostService
  fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.RabbitHostService
- uid: Steeltoe.Common.Contexts.IApplicationContext
  commentId: T:Steeltoe.Common.Contexts.IApplicationContext
  parent: Steeltoe.Common.Contexts
  name: IApplicationContext
  nameWithType: IApplicationContext
  fullName: Steeltoe.Common.Contexts.IApplicationContext
- uid: Microsoft.Extensions.Logging.ILogger{Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<RabbitHostService>
  nameWithType: ILogger<RabbitHostService>
  fullName: Microsoft.Extensions.Logging.ILogger<Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService>
  nameWithType.vb: ILogger(Of RabbitHostService)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService)
  name.vb: ILogger(Of RabbitHostService)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
    name: RabbitHostService
    nameWithType: RabbitHostService
    fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
    name: RabbitHostService
    nameWithType: RabbitHostService
    fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Contexts
  commentId: N:Steeltoe.Common.Contexts
  name: Steeltoe.Common.Contexts
  nameWithType: Steeltoe.Common.Contexts
  fullName: Steeltoe.Common.Contexts
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync
  name: StartAsync
  nameWithType: RabbitHostService.StartAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync
- uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostedService
  isExternal: true
  name: StartAsync(CancellationToken)
  nameWithType: IHostedService.StartAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: IHostedService.StartAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: IHostedService.StartAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync
  name: StopAsync
  nameWithType: RabbitHostService.StopAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync
- uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostedService
  isExternal: true
  name: StopAsync(CancellationToken)
  nameWithType: IHostedService.StopAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostedService.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostedService.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
