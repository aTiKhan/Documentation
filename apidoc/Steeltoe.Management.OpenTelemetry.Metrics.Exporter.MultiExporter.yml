### YamlMime:ManagedReference
items:
- uid: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter
  commentId: T:Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter
  id: MultiExporter
  parent: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  children:
  - Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.#ctor(System.Collections.Generic.IEnumerable{MetricExporter})
  - Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync``1(System.Collections.Generic.List{Metric{``0}},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: MultiExporter
  nameWithType: MultiExporter
  fullName: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter
  type: Class
  source:
    remote:
      path: src/Management/src/OpenTelemetryBase/Metrics/Exporter/MultiExporter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MultiExporter
    path: ../Steeltoe/src/Management/src/OpenTelemetryBase/Metrics/Exporter/MultiExporter.cs
    startLine: 14
  assemblies:
  - Steeltoe.Management.OpenTelemetryBase
  namespace: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  summary: "\nAn Exporter that publishes to multiple Exporters.\n"
  example: []
  syntax:
    content: 'public class MultiExporter : MetricExporter'
    content.vb: >-
      Public Class MultiExporter

          Inherits MetricExporter
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.#ctor(System.Collections.Generic.IEnumerable{MetricExporter})
  commentId: M:Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.#ctor(System.Collections.Generic.IEnumerable{MetricExporter})
  id: '#ctor(System.Collections.Generic.IEnumerable{MetricExporter})'
  parent: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter
  langs:
  - csharp
  - vb
  name: MultiExporter(IEnumerable<MetricExporter>)
  nameWithType: MultiExporter.MultiExporter(IEnumerable<MetricExporter>)
  fullName: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.MultiExporter(System.Collections.Generic.IEnumerable<MetricExporter>)
  type: Constructor
  source:
    remote:
      path: src/Management/src/OpenTelemetryBase/Metrics/Exporter/MultiExporter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Management/src/OpenTelemetryBase/Metrics/Exporter/MultiExporter.cs
    startLine: 18
  assemblies:
  - Steeltoe.Management.OpenTelemetryBase
  namespace: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  syntax:
    content: public MultiExporter(IEnumerable<MetricExporter> exporters)
    parameters:
    - id: exporters
      type: System.Collections.Generic.IEnumerable{MetricExporter}
    content.vb: Public Sub New(exporters As IEnumerable(Of MetricExporter))
  overload: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.#ctor*
  nameWithType.vb: MultiExporter.MultiExporter(IEnumerable(Of MetricExporter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.MultiExporter(System.Collections.Generic.IEnumerable(Of MetricExporter))
  name.vb: MultiExporter(IEnumerable(Of MetricExporter))
- uid: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync``1(System.Collections.Generic.List{Metric{``0}},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync``1(System.Collections.Generic.List{Metric{``0}},System.Threading.CancellationToken)
  id: ExportAsync``1(System.Collections.Generic.List{Metric{``0}},System.Threading.CancellationToken)
  parent: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter
  langs:
  - csharp
  - vb
  name: ExportAsync<T>(List<Metric<T>>, CancellationToken)
  nameWithType: MultiExporter.ExportAsync<T>(List<Metric<T>>, CancellationToken)
  fullName: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync<T>(System.Collections.Generic.List<Metric<T>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Management/src/OpenTelemetryBase/Metrics/Exporter/MultiExporter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ExportAsync
    path: ../Steeltoe/src/Management/src/OpenTelemetryBase/Metrics/Exporter/MultiExporter.cs
    startLine: 23
  assemblies:
  - Steeltoe.Management.OpenTelemetryBase
  namespace: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  syntax:
    content: public override Task<ExportResult> ExportAsync<T>(List<Metric<T>> metrics, CancellationToken cancellationToken)
    parameters:
    - id: metrics
      type: System.Collections.Generic.List{Metric{{T}}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{ExportResult}
    content.vb: Public Overrides Function ExportAsync(Of T)(metrics As List(Of Metric(Of T)), cancellationToken As CancellationToken) As Task(Of ExportResult)
  overload: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync*
  nameWithType.vb: MultiExporter.ExportAsync(Of T)(List(Of Metric(Of T)), CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync(Of T)(System.Collections.Generic.List(Of Metric(Of T)), System.Threading.CancellationToken)
  name.vb: ExportAsync(Of T)(List(Of Metric(Of T)), CancellationToken)
references:
- uid: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  commentId: N:Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  name: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  nameWithType: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
  fullName: Steeltoe.Management.OpenTelemetry.Metrics.Exporter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.#ctor*
  commentId: Overload:Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.#ctor
  name: MultiExporter
  nameWithType: MultiExporter.MultiExporter
  fullName: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.MultiExporter
- uid: System.Collections.Generic.IEnumerable{MetricExporter}
  commentId: T:System.Collections.Generic.IEnumerable{MetricExporter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MetricExporter>
  nameWithType: IEnumerable<MetricExporter>
  fullName: System.Collections.Generic.IEnumerable<MetricExporter>
  nameWithType.vb: IEnumerable(Of MetricExporter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MetricExporter)
  name.vb: IEnumerable(Of MetricExporter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MetricExporter
    name: MetricExporter
    nameWithType: MetricExporter
    fullName: MetricExporter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MetricExporter
    name: MetricExporter
    nameWithType: MetricExporter
    fullName: MetricExporter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync*
  commentId: Overload:Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync
  name: ExportAsync
  nameWithType: MultiExporter.ExportAsync
  fullName: Steeltoe.Management.OpenTelemetry.Metrics.Exporter.MultiExporter.ExportAsync
- uid: System.Collections.Generic.List{Metric{{T}}}
  commentId: T:System.Collections.Generic.List{Metric{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Metric<T>>
  nameWithType: List<Metric<T>>
  fullName: System.Collections.Generic.List<Metric<T>>
  nameWithType.vb: List(Of Metric(Of T))
  fullName.vb: System.Collections.Generic.List(Of Metric(Of T))
  name.vb: List(Of Metric(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Metric`1
    name: Metric
    nameWithType: Metric
    fullName: Metric
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Metric`1
    name: Metric
    nameWithType: Metric
    fullName: Metric
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{ExportResult}
  commentId: T:System.Threading.Tasks.Task{ExportResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ExportResult>
  nameWithType: Task<ExportResult>
  fullName: System.Threading.Tasks.Task<ExportResult>
  nameWithType.vb: Task(Of ExportResult)
  fullName.vb: System.Threading.Tasks.Task(Of ExportResult)
  name.vb: Task(Of ExportResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: ExportResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: ExportResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
