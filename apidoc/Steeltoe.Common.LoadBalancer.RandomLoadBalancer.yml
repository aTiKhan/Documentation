### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  commentId: T:Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  id: RandomLoadBalancer
  parent: Steeltoe.Common.LoadBalancer
  children:
  - Steeltoe.Common.LoadBalancer.RandomLoadBalancer.#ctor(Steeltoe.Common.Discovery.IServiceInstanceProvider,IDistributedCache,DistributedCacheEntryOptions,ILogger)
  - Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  - Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
  langs:
  - csharp
  - vb
  name: RandomLoadBalancer
  nameWithType: RandomLoadBalancer
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  type: Class
  source:
    remote:
      path: src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RandomLoadBalancer
    path: ../Steeltoe/src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
    startLine: 12
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.LoadBalancer
  syntax:
    content: 'public class RandomLoadBalancer : ILoadBalancer'
    content.vb: >-
      Public Class RandomLoadBalancer

          Implements ILoadBalancer
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Common.LoadBalancer.ILoadBalancer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.#ctor(Steeltoe.Common.Discovery.IServiceInstanceProvider,IDistributedCache,DistributedCacheEntryOptions,ILogger)
  commentId: M:Steeltoe.Common.LoadBalancer.RandomLoadBalancer.#ctor(Steeltoe.Common.Discovery.IServiceInstanceProvider,IDistributedCache,DistributedCacheEntryOptions,ILogger)
  id: '#ctor(Steeltoe.Common.Discovery.IServiceInstanceProvider,IDistributedCache,DistributedCacheEntryOptions,ILogger)'
  parent: Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  langs:
  - csharp
  - vb
  name: RandomLoadBalancer(IServiceInstanceProvider, IDistributedCache, DistributedCacheEntryOptions, ILogger)
  nameWithType: RandomLoadBalancer.RandomLoadBalancer(IServiceInstanceProvider, IDistributedCache, DistributedCacheEntryOptions, ILogger)
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.RandomLoadBalancer(Steeltoe.Common.Discovery.IServiceInstanceProvider, IDistributedCache, DistributedCacheEntryOptions, ILogger)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
    startLine: 28
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.LoadBalancer
  summary: "\nInitializes a new instance of the <xref href=\"Steeltoe.Common.LoadBalancer.RandomLoadBalancer\" data-throw-if-not-resolved=\"false\"></xref> class.\nReturns random service instances, with option caching of service lookups\n"
  example: []
  syntax:
    content: public RandomLoadBalancer(IServiceInstanceProvider serviceInstanceProvider, IDistributedCache distributedCache = null, DistributedCacheEntryOptions cacheEntryOptions = null, ILogger logger = null)
    parameters:
    - id: serviceInstanceProvider
      type: Steeltoe.Common.Discovery.IServiceInstanceProvider
      description: Provider of service instance information
    - id: distributedCache
      type: IDistributedCache
      description: For caching service instance data
    - id: cacheEntryOptions
      type: DistributedCacheEntryOptions
      description: Configuration for cache entries of service instance data
    - id: logger
      type: ILogger
      description: For logging
    content.vb: Public Sub New(serviceInstanceProvider As IServiceInstanceProvider, distributedCache As IDistributedCache = Nothing, cacheEntryOptions As DistributedCacheEntryOptions = Nothing, logger As ILogger = Nothing)
  overload: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  commentId: M:Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  id: ResolveServiceInstanceAsync(System.Uri)
  parent: Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  langs:
  - csharp
  - vb
  name: ResolveServiceInstanceAsync(Uri)
  nameWithType: RandomLoadBalancer.ResolveServiceInstanceAsync(Uri)
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ResolveServiceInstanceAsync
    path: ../Steeltoe/src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
    startLine: 36
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.LoadBalancer
  syntax:
    content: public virtual Task<Uri> ResolveServiceInstanceAsync(Uri request)
    parameters:
    - id: request
      type: System.Uri
    return:
      type: System.Threading.Tasks.Task{System.Uri}
    content.vb: Public Overridable Function ResolveServiceInstanceAsync(request As Uri) As Task(Of Uri)
  overload: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync*
  implements:
  - Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
  commentId: M:Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
  id: UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
  parent: Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  langs:
  - csharp
  - vb
  name: UpdateStatsAsync(Uri, Uri, TimeSpan, Exception)
  nameWithType: RandomLoadBalancer.UpdateStatsAsync(Uri, Uri, TimeSpan, Exception)
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync(System.Uri, System.Uri, System.TimeSpan, System.Exception)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UpdateStatsAsync
    path: ../Steeltoe/src/Common/src/Common/LoadBalancer/RandomLoadBalancer.cs
    startLine: 54
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.LoadBalancer
  syntax:
    content: public virtual Task UpdateStatsAsync(Uri originalUri, Uri resolvedUri, TimeSpan responseTime, Exception exception)
    parameters:
    - id: originalUri
      type: System.Uri
    - id: resolvedUri
      type: System.Uri
    - id: responseTime
      type: System.TimeSpan
    - id: exception
      type: System.Exception
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function UpdateStatsAsync(originalUri As Uri, resolvedUri As Uri, responseTime As TimeSpan, exception As Exception) As Task
  overload: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync*
  implements:
  - Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Steeltoe.Common.LoadBalancer
  commentId: N:Steeltoe.Common.LoadBalancer
  name: Steeltoe.Common.LoadBalancer
  nameWithType: Steeltoe.Common.LoadBalancer
  fullName: Steeltoe.Common.LoadBalancer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.LoadBalancer.ILoadBalancer
  commentId: T:Steeltoe.Common.LoadBalancer.ILoadBalancer
  parent: Steeltoe.Common.LoadBalancer
  name: ILoadBalancer
  nameWithType: ILoadBalancer
  fullName: Steeltoe.Common.LoadBalancer.ILoadBalancer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  commentId: T:Steeltoe.Common.LoadBalancer.RandomLoadBalancer
  name: RandomLoadBalancer
  nameWithType: RandomLoadBalancer
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.#ctor*
  commentId: Overload:Steeltoe.Common.LoadBalancer.RandomLoadBalancer.#ctor
  name: RandomLoadBalancer
  nameWithType: RandomLoadBalancer.RandomLoadBalancer
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.RandomLoadBalancer
- uid: Steeltoe.Common.Discovery.IServiceInstanceProvider
  commentId: T:Steeltoe.Common.Discovery.IServiceInstanceProvider
  parent: Steeltoe.Common.Discovery
  name: IServiceInstanceProvider
  nameWithType: IServiceInstanceProvider
  fullName: Steeltoe.Common.Discovery.IServiceInstanceProvider
- uid: IDistributedCache
  isExternal: true
  name: IDistributedCache
  nameWithType: IDistributedCache
  fullName: IDistributedCache
- uid: DistributedCacheEntryOptions
  isExternal: true
  name: DistributedCacheEntryOptions
  nameWithType: DistributedCacheEntryOptions
  fullName: DistributedCacheEntryOptions
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Steeltoe.Common.Discovery
  commentId: N:Steeltoe.Common.Discovery
  name: Steeltoe.Common.Discovery
  nameWithType: Steeltoe.Common.Discovery
  fullName: Steeltoe.Common.Discovery
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync*
  commentId: Overload:Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync
  name: ResolveServiceInstanceAsync
  nameWithType: RandomLoadBalancer.ResolveServiceInstanceAsync
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.ResolveServiceInstanceAsync
- uid: Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  commentId: M:Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  parent: Steeltoe.Common.LoadBalancer.ILoadBalancer
  isExternal: true
  name: ResolveServiceInstanceAsync(Uri)
  nameWithType: ILoadBalancer.ResolveServiceInstanceAsync(Uri)
  fullName: Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync(System.Uri)
  spec.csharp:
  - uid: Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync(System.Uri)
    name: ResolveServiceInstanceAsync
    nameWithType: ILoadBalancer.ResolveServiceInstanceAsync
    fullName: Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync(System.Uri)
    name: ResolveServiceInstanceAsync
    nameWithType: ILoadBalancer.ResolveServiceInstanceAsync
    fullName: Steeltoe.Common.LoadBalancer.ILoadBalancer.ResolveServiceInstanceAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Threading.Tasks.Task{System.Uri}
  commentId: T:System.Threading.Tasks.Task{System.Uri}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Uri>
  nameWithType: Task<Uri>
  fullName: System.Threading.Tasks.Task<System.Uri>
  nameWithType.vb: Task(Of Uri)
  fullName.vb: System.Threading.Tasks.Task(Of System.Uri)
  name.vb: Task(Of Uri)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync*
  commentId: Overload:Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync
  name: UpdateStatsAsync
  nameWithType: RandomLoadBalancer.UpdateStatsAsync
  fullName: Steeltoe.Common.LoadBalancer.RandomLoadBalancer.UpdateStatsAsync
- uid: Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
  commentId: M:Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
  parent: Steeltoe.Common.LoadBalancer.ILoadBalancer
  isExternal: true
  name: UpdateStatsAsync(Uri, Uri, TimeSpan, Exception)
  nameWithType: ILoadBalancer.UpdateStatsAsync(Uri, Uri, TimeSpan, Exception)
  fullName: Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync(System.Uri, System.Uri, System.TimeSpan, System.Exception)
  spec.csharp:
  - uid: Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
    name: UpdateStatsAsync
    nameWithType: ILoadBalancer.UpdateStatsAsync
    fullName: Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync(System.Uri,System.Uri,System.TimeSpan,System.Exception)
    name: UpdateStatsAsync
    nameWithType: ILoadBalancer.UpdateStatsAsync
    fullName: Steeltoe.Common.LoadBalancer.ILoadBalancer.UpdateStatsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
