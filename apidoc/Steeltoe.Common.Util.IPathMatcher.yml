### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.IPathMatcher
  commentId: T:Steeltoe.Common.Util.IPathMatcher
  id: IPathMatcher
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.IPathMatcher.Combine(System.String,System.String)
  - Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern(System.String,System.String)
  - Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables(System.String,System.String)
  - Steeltoe.Common.Util.IPathMatcher.GetPatternComparer(System.String)
  - Steeltoe.Common.Util.IPathMatcher.IsPattern(System.String)
  - Steeltoe.Common.Util.IPathMatcher.Match(System.String,System.String)
  - Steeltoe.Common.Util.IPathMatcher.MatchStart(System.String,System.String)
  langs:
  - csharp
  - vb
  name: IPathMatcher
  nameWithType: IPathMatcher
  fullName: Steeltoe.Common.Util.IPathMatcher
  type: Interface
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IPathMatcher
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 8
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public interface IPathMatcher
    content.vb: Public Interface IPathMatcher
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Common.Util.IPathMatcher.IsPattern(System.String)
  commentId: M:Steeltoe.Common.Util.IPathMatcher.IsPattern(System.String)
  id: IsPattern(System.String)
  parent: Steeltoe.Common.Util.IPathMatcher
  langs:
  - csharp
  - vb
  name: IsPattern(String)
  nameWithType: IPathMatcher.IsPattern(String)
  fullName: Steeltoe.Common.Util.IPathMatcher.IsPattern(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsPattern
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 10
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: bool IsPattern(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsPattern(path As String) As Boolean
  overload: Steeltoe.Common.Util.IPathMatcher.IsPattern*
- uid: Steeltoe.Common.Util.IPathMatcher.Match(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.IPathMatcher.Match(System.String,System.String)
  id: Match(System.String,System.String)
  parent: Steeltoe.Common.Util.IPathMatcher
  langs:
  - csharp
  - vb
  name: Match(String, String)
  nameWithType: IPathMatcher.Match(String, String)
  fullName: Steeltoe.Common.Util.IPathMatcher.Match(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Match
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 12
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: bool Match(string pattern, string path)
    parameters:
    - id: pattern
      type: System.String
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function Match(pattern As String, path As String) As Boolean
  overload: Steeltoe.Common.Util.IPathMatcher.Match*
- uid: Steeltoe.Common.Util.IPathMatcher.MatchStart(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.IPathMatcher.MatchStart(System.String,System.String)
  id: MatchStart(System.String,System.String)
  parent: Steeltoe.Common.Util.IPathMatcher
  langs:
  - csharp
  - vb
  name: MatchStart(String, String)
  nameWithType: IPathMatcher.MatchStart(String, String)
  fullName: Steeltoe.Common.Util.IPathMatcher.MatchStart(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MatchStart
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 14
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: bool MatchStart(string pattern, string path)
    parameters:
    - id: pattern
      type: System.String
    - id: path
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function MatchStart(pattern As String, path As String) As Boolean
  overload: Steeltoe.Common.Util.IPathMatcher.MatchStart*
- uid: Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern(System.String,System.String)
  id: ExtractPathWithinPattern(System.String,System.String)
  parent: Steeltoe.Common.Util.IPathMatcher
  langs:
  - csharp
  - vb
  name: ExtractPathWithinPattern(String, String)
  nameWithType: IPathMatcher.ExtractPathWithinPattern(String, String)
  fullName: Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ExtractPathWithinPattern
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 16
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: string ExtractPathWithinPattern(string pattern, string path)
    parameters:
    - id: pattern
      type: System.String
    - id: path
      type: System.String
    return:
      type: System.String
    content.vb: Function ExtractPathWithinPattern(pattern As String, path As String) As String
  overload: Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern*
- uid: Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables(System.String,System.String)
  id: ExtractUriTemplateVariables(System.String,System.String)
  parent: Steeltoe.Common.Util.IPathMatcher
  langs:
  - csharp
  - vb
  name: ExtractUriTemplateVariables(String, String)
  nameWithType: IPathMatcher.ExtractUriTemplateVariables(String, String)
  fullName: Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ExtractUriTemplateVariables
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 18
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: IDictionary<string, string> ExtractUriTemplateVariables(string pattern, string path)
    parameters:
    - id: pattern
      type: System.String
    - id: path
      type: System.String
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Function ExtractUriTemplateVariables(pattern As String, path As String) As IDictionary(Of String, String)
  overload: Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables*
- uid: Steeltoe.Common.Util.IPathMatcher.GetPatternComparer(System.String)
  commentId: M:Steeltoe.Common.Util.IPathMatcher.GetPatternComparer(System.String)
  id: GetPatternComparer(System.String)
  parent: Steeltoe.Common.Util.IPathMatcher
  langs:
  - csharp
  - vb
  name: GetPatternComparer(String)
  nameWithType: IPathMatcher.GetPatternComparer(String)
  fullName: Steeltoe.Common.Util.IPathMatcher.GetPatternComparer(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetPatternComparer
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 20
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: IComparer<string> GetPatternComparer(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Collections.Generic.IComparer{System.String}
    content.vb: Function GetPatternComparer(path As String) As IComparer(Of String)
  overload: Steeltoe.Common.Util.IPathMatcher.GetPatternComparer*
- uid: Steeltoe.Common.Util.IPathMatcher.Combine(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.IPathMatcher.Combine(System.String,System.String)
  id: Combine(System.String,System.String)
  parent: Steeltoe.Common.Util.IPathMatcher
  langs:
  - csharp
  - vb
  name: Combine(String, String)
  nameWithType: IPathMatcher.Combine(String, String)
  fullName: Steeltoe.Common.Util.IPathMatcher.Combine(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IPathMatcher.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Combine
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IPathMatcher.cs
    startLine: 22
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: string Combine(string pattern1, string pattern2)
    parameters:
    - id: pattern1
      type: System.String
    - id: pattern2
      type: System.String
    return:
      type: System.String
    content.vb: Function Combine(pattern1 As String, pattern2 As String) As String
  overload: Steeltoe.Common.Util.IPathMatcher.Combine*
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: Steeltoe.Common.Util.IPathMatcher.IsPattern*
  commentId: Overload:Steeltoe.Common.Util.IPathMatcher.IsPattern
  name: IsPattern
  nameWithType: IPathMatcher.IsPattern
  fullName: Steeltoe.Common.Util.IPathMatcher.IsPattern
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Util.IPathMatcher.Match*
  commentId: Overload:Steeltoe.Common.Util.IPathMatcher.Match
  name: Match
  nameWithType: IPathMatcher.Match
  fullName: Steeltoe.Common.Util.IPathMatcher.Match
- uid: Steeltoe.Common.Util.IPathMatcher.MatchStart*
  commentId: Overload:Steeltoe.Common.Util.IPathMatcher.MatchStart
  name: MatchStart
  nameWithType: IPathMatcher.MatchStart
  fullName: Steeltoe.Common.Util.IPathMatcher.MatchStart
- uid: Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern*
  commentId: Overload:Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern
  name: ExtractPathWithinPattern
  nameWithType: IPathMatcher.ExtractPathWithinPattern
  fullName: Steeltoe.Common.Util.IPathMatcher.ExtractPathWithinPattern
- uid: Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables*
  commentId: Overload:Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables
  name: ExtractUriTemplateVariables
  nameWithType: IPathMatcher.ExtractUriTemplateVariables
  fullName: Steeltoe.Common.Util.IPathMatcher.ExtractUriTemplateVariables
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Common.Util.IPathMatcher.GetPatternComparer*
  commentId: Overload:Steeltoe.Common.Util.IPathMatcher.GetPatternComparer
  name: GetPatternComparer
  nameWithType: IPathMatcher.GetPatternComparer
  fullName: Steeltoe.Common.Util.IPathMatcher.GetPatternComparer
- uid: System.Collections.Generic.IComparer{System.String}
  commentId: T:System.Collections.Generic.IComparer{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<String>
  nameWithType: IComparer<String>
  fullName: System.Collections.Generic.IComparer<System.String>
  nameWithType.vb: IComparer(Of String)
  fullName.vb: System.Collections.Generic.IComparer(Of System.String)
  name.vb: IComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.IPathMatcher.Combine*
  commentId: Overload:Steeltoe.Common.Util.IPathMatcher.Combine
  name: Combine
  nameWithType: IPathMatcher.Combine
  fullName: Steeltoe.Common.Util.IPathMatcher.Combine
