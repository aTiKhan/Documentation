### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  commentId: T:Steeltoe.Common.Transaction.TransactionSynchronizationManager
  id: TransactionSynchronizationManager
  parent: Steeltoe.Common.Transaction
  children:
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource(System.Object,System.Object,ILogger)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization(ILogger)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource(System.Object,ILogger)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource(System.Object)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization(ILogger)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization(Steeltoe.Common.Transaction.ITransactionSynchronization)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive(System.Boolean)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel(System.Nullable{System.Int32})
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName(System.String)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly(System.Boolean)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource(System.Object,ILogger)
  - Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible(System.Object,ILogger)
  langs:
  - csharp
  - vb
  name: TransactionSynchronizationManager
  nameWithType: TransactionSynchronizationManager
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: TransactionSynchronizationManager
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 14
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static class TransactionSynchronizationManager
    content.vb: Public Module TransactionSynchronizationManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap
  id: GetResourceMap
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: GetResourceMap()
  nameWithType: TransactionSynchronizationManager.GetResourceMap()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetResourceMap
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 26
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static IDictionary<object, object> GetResourceMap()
    return:
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
    content.vb: Public Shared Function GetResourceMap As IDictionary(Of Object, Object)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource(System.Object)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource(System.Object)
  id: HasResource(System.Object)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: HasResource(Object)
  nameWithType: TransactionSynchronizationManager.HasResource(Object)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource(System.Object)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HasResource
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 32
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static bool HasResource(object key)
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasResource(key As Object) As Boolean
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource(System.Object,ILogger)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource(System.Object,ILogger)
  id: GetResource(System.Object,ILogger)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: GetResource(Object, ILogger)
  nameWithType: TransactionSynchronizationManager.GetResource(Object, ILogger)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource(System.Object, ILogger)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetResource
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 38
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static object GetResource(object key, ILogger logger = null)
    parameters:
    - id: key
      type: System.Object
    - id: logger
      type: ILogger
    return:
      type: System.Object
    content.vb: Public Shared Function GetResource(key As Object, logger As ILogger = Nothing) As Object
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource(System.Object,System.Object,ILogger)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource(System.Object,System.Object,ILogger)
  id: BindResource(System.Object,System.Object,ILogger)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: BindResource(Object, Object, ILogger)
  nameWithType: TransactionSynchronizationManager.BindResource(Object, Object, ILogger)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource(System.Object, System.Object, ILogger)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: BindResource
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 49
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void BindResource(object key, object value, ILogger logger = null)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
    - id: logger
      type: ILogger
    content.vb: Public Shared Sub BindResource(key As Object, value As Object, logger As ILogger = Nothing)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource(System.Object,ILogger)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource(System.Object,ILogger)
  id: UnbindResource(System.Object,ILogger)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: UnbindResource(Object, ILogger)
  nameWithType: TransactionSynchronizationManager.UnbindResource(Object, ILogger)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource(System.Object, ILogger)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UnbindResource
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 82
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static object UnbindResource(object key, ILogger logger = null)
    parameters:
    - id: key
      type: System.Object
    - id: logger
      type: ILogger
    return:
      type: System.Object
    content.vb: Public Shared Function UnbindResource(key As Object, logger As ILogger = Nothing) As Object
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible(System.Object,ILogger)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible(System.Object,ILogger)
  id: UnbindResourceIfPossible(System.Object,ILogger)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: UnbindResourceIfPossible(Object, ILogger)
  nameWithType: TransactionSynchronizationManager.UnbindResourceIfPossible(Object, ILogger)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible(System.Object, ILogger)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: UnbindResourceIfPossible
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 94
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static object UnbindResourceIfPossible(object key, ILogger logger = null)
    parameters:
    - id: key
      type: System.Object
    - id: logger
      type: ILogger
    return:
      type: System.Object
    content.vb: Public Shared Function UnbindResourceIfPossible(key As Object, logger As ILogger = Nothing) As Object
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive
  id: IsSynchronizationActive
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: IsSynchronizationActive()
  nameWithType: TransactionSynchronizationManager.IsSynchronizationActive()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsSynchronizationActive
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 99
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static bool IsSynchronizationActive()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsSynchronizationActive As Boolean
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization(ILogger)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization(ILogger)
  id: InitSynchronization(ILogger)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: InitSynchronization(ILogger)
  nameWithType: TransactionSynchronizationManager.InitSynchronization(ILogger)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization(ILogger)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: InitSynchronization
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 104
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void InitSynchronization(ILogger logger = null)
    parameters:
    - id: logger
      type: ILogger
    content.vb: Public Shared Sub InitSynchronization(logger As ILogger = Nothing)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization(Steeltoe.Common.Transaction.ITransactionSynchronization)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization(Steeltoe.Common.Transaction.ITransactionSynchronization)
  id: RegisterSynchronization(Steeltoe.Common.Transaction.ITransactionSynchronization)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: RegisterSynchronization(ITransactionSynchronization)
  nameWithType: TransactionSynchronizationManager.RegisterSynchronization(ITransactionSynchronization)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization(Steeltoe.Common.Transaction.ITransactionSynchronization)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RegisterSynchronization
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 115
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void RegisterSynchronization(ITransactionSynchronization synchronization)
    parameters:
    - id: synchronization
      type: Steeltoe.Common.Transaction.ITransactionSynchronization
    content.vb: Public Shared Sub RegisterSynchronization(synchronization As ITransactionSynchronization)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations
  id: GetSynchronizations
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: GetSynchronizations()
  nameWithType: TransactionSynchronizationManager.GetSynchronizations()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetSynchronizations
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 131
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static List<ITransactionSynchronization> GetSynchronizations()
    return:
      type: System.Collections.Generic.List{Steeltoe.Common.Transaction.ITransactionSynchronization}
    content.vb: Public Shared Function GetSynchronizations As List(Of ITransactionSynchronization)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization(ILogger)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization(ILogger)
  id: ClearSynchronization(ILogger)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: ClearSynchronization(ILogger)
  nameWithType: TransactionSynchronizationManager.ClearSynchronization(ILogger)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization(ILogger)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ClearSynchronization
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 172
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void ClearSynchronization(ILogger logger = null)
    parameters:
    - id: logger
      type: ILogger
    content.vb: Public Shared Sub ClearSynchronization(logger As ILogger = Nothing)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive
  id: IsActualTransactionActive
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: IsActualTransactionActive()
  nameWithType: TransactionSynchronizationManager.IsActualTransactionActive()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsActualTransactionActive
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 183
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static bool IsActualTransactionActive()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsActualTransactionActive As Boolean
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive(System.Boolean)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive(System.Boolean)
  id: SetActualTransactionActive(System.Boolean)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: SetActualTransactionActive(Boolean)
  nameWithType: TransactionSynchronizationManager.SetActualTransactionActive(Boolean)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetActualTransactionActive
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 188
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void SetActualTransactionActive(bool active)
    parameters:
    - id: active
      type: System.Boolean
    content.vb: Public Shared Sub SetActualTransactionActive(active As Boolean)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel
  id: GetCurrentTransactionIsolationLevel
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: GetCurrentTransactionIsolationLevel()
  nameWithType: TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetCurrentTransactionIsolationLevel
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 193
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static int? GetCurrentTransactionIsolationLevel()
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Shared Function GetCurrentTransactionIsolationLevel As Integer?
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel(System.Nullable{System.Int32})
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel(System.Nullable{System.Int32})
  id: SetCurrentTransactionIsolationLevel(System.Nullable{System.Int32})
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: SetCurrentTransactionIsolationLevel(Nullable<Int32>)
  nameWithType: TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel(Nullable<Int32>)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel(System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetCurrentTransactionIsolationLevel
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 198
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void SetCurrentTransactionIsolationLevel(int? isolationLevel)
    parameters:
    - id: isolationLevel
      type: System.Nullable{System.Int32}
    content.vb: Public Shared Sub SetCurrentTransactionIsolationLevel(isolationLevel As Integer?)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel*
  nameWithType.vb: TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel(Nullable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel(System.Nullable(Of System.Int32))
  name.vb: SetCurrentTransactionIsolationLevel(Nullable(Of Int32))
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName(System.String)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName(System.String)
  id: SetCurrentTransactionName(System.String)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: SetCurrentTransactionName(String)
  nameWithType: TransactionSynchronizationManager.SetCurrentTransactionName(String)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetCurrentTransactionName
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 203
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void SetCurrentTransactionName(string name)
    parameters:
    - id: name
      type: System.String
    content.vb: Public Shared Sub SetCurrentTransactionName(name As String)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName
  id: GetCurrentTransactionName
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: GetCurrentTransactionName()
  nameWithType: TransactionSynchronizationManager.GetCurrentTransactionName()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetCurrentTransactionName
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 208
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static string GetCurrentTransactionName()
    return:
      type: System.String
    content.vb: Public Shared Function GetCurrentTransactionName As String
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly(System.Boolean)
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly(System.Boolean)
  id: SetCurrentTransactionReadOnly(System.Boolean)
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: SetCurrentTransactionReadOnly(Boolean)
  nameWithType: TransactionSynchronizationManager.SetCurrentTransactionReadOnly(Boolean)
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetCurrentTransactionReadOnly
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 213
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void SetCurrentTransactionReadOnly(bool readOnly)
    parameters:
    - id: readOnly
      type: System.Boolean
    content.vb: Public Shared Sub SetCurrentTransactionReadOnly(readOnly As Boolean)
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly
  id: IsCurrentTransactionReadOnly
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: IsCurrentTransactionReadOnly()
  nameWithType: TransactionSynchronizationManager.IsCurrentTransactionReadOnly()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsCurrentTransactionReadOnly
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 218
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static bool IsCurrentTransactionReadOnly()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsCurrentTransactionReadOnly As Boolean
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear
  commentId: M:Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear
  id: Clear
  parent: Steeltoe.Common.Transaction.TransactionSynchronizationManager
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TransactionSynchronizationManager.Clear()
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Clear
    path: ../Steeltoe/src/Common/src/Common/Transaction/TransactionSynchronizationManager.cs
    startLine: 223
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Transaction
  syntax:
    content: public static void Clear()
    content.vb: Public Shared Sub Clear
  overload: Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Common.Transaction
  commentId: N:Steeltoe.Common.Transaction
  name: Steeltoe.Common.Transaction
  nameWithType: Steeltoe.Common.Transaction
  fullName: Steeltoe.Common.Transaction
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap
  name: GetResourceMap
  nameWithType: TransactionSynchronizationManager.GetResourceMap
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResourceMap
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Object, Object>
  nameWithType: IDictionary<Object, Object>
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>
  nameWithType.vb: IDictionary(Of Object, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object)
  name.vb: IDictionary(Of Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource
  name: HasResource
  nameWithType: TransactionSynchronizationManager.HasResource
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.HasResource
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource
  name: GetResource
  nameWithType: TransactionSynchronizationManager.GetResource
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetResource
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource
  name: BindResource
  nameWithType: TransactionSynchronizationManager.BindResource
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.BindResource
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource
  name: UnbindResource
  nameWithType: TransactionSynchronizationManager.UnbindResource
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResource
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible
  name: UnbindResourceIfPossible
  nameWithType: TransactionSynchronizationManager.UnbindResourceIfPossible
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.UnbindResourceIfPossible
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive
  name: IsSynchronizationActive
  nameWithType: TransactionSynchronizationManager.IsSynchronizationActive
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsSynchronizationActive
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization
  name: InitSynchronization
  nameWithType: TransactionSynchronizationManager.InitSynchronization
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.InitSynchronization
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization
  name: RegisterSynchronization
  nameWithType: TransactionSynchronizationManager.RegisterSynchronization
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.RegisterSynchronization
- uid: Steeltoe.Common.Transaction.ITransactionSynchronization
  commentId: T:Steeltoe.Common.Transaction.ITransactionSynchronization
  parent: Steeltoe.Common.Transaction
  name: ITransactionSynchronization
  nameWithType: ITransactionSynchronization
  fullName: Steeltoe.Common.Transaction.ITransactionSynchronization
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations
  name: GetSynchronizations
  nameWithType: TransactionSynchronizationManager.GetSynchronizations
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetSynchronizations
- uid: System.Collections.Generic.List{Steeltoe.Common.Transaction.ITransactionSynchronization}
  commentId: T:System.Collections.Generic.List{Steeltoe.Common.Transaction.ITransactionSynchronization}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ITransactionSynchronization>
  nameWithType: List<ITransactionSynchronization>
  fullName: System.Collections.Generic.List<Steeltoe.Common.Transaction.ITransactionSynchronization>
  nameWithType.vb: List(Of ITransactionSynchronization)
  fullName.vb: System.Collections.Generic.List(Of Steeltoe.Common.Transaction.ITransactionSynchronization)
  name.vb: List(Of ITransactionSynchronization)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Common.Transaction.ITransactionSynchronization
    name: ITransactionSynchronization
    nameWithType: ITransactionSynchronization
    fullName: Steeltoe.Common.Transaction.ITransactionSynchronization
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Common.Transaction.ITransactionSynchronization
    name: ITransactionSynchronization
    nameWithType: ITransactionSynchronization
    fullName: Steeltoe.Common.Transaction.ITransactionSynchronization
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization
  name: ClearSynchronization
  nameWithType: TransactionSynchronizationManager.ClearSynchronization
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.ClearSynchronization
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive
  name: IsActualTransactionActive
  nameWithType: TransactionSynchronizationManager.IsActualTransactionActive
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsActualTransactionActive
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive
  name: SetActualTransactionActive
  nameWithType: TransactionSynchronizationManager.SetActualTransactionActive
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetActualTransactionActive
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel
  name: GetCurrentTransactionIsolationLevel
  nameWithType: TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionIsolationLevel
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel
  name: SetCurrentTransactionIsolationLevel
  nameWithType: TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionIsolationLevel
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName
  name: SetCurrentTransactionName
  nameWithType: TransactionSynchronizationManager.SetCurrentTransactionName
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName
  name: GetCurrentTransactionName
  nameWithType: TransactionSynchronizationManager.GetCurrentTransactionName
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.GetCurrentTransactionName
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly
  name: SetCurrentTransactionReadOnly
  nameWithType: TransactionSynchronizationManager.SetCurrentTransactionReadOnly
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.SetCurrentTransactionReadOnly
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly
  name: IsCurrentTransactionReadOnly
  nameWithType: TransactionSynchronizationManager.IsCurrentTransactionReadOnly
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.IsCurrentTransactionReadOnly
- uid: Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear*
  commentId: Overload:Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear
  name: Clear
  nameWithType: TransactionSynchronizationManager.Clear
  fullName: Steeltoe.Common.Transaction.TransactionSynchronizationManager.Clear
