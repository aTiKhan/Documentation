### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  commentId: T:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  id: AbstractExceptionHandlerMethodResolver
  parent: Steeltoe.Messaging.Handler.Invocation
  children:
  - Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Reflection.MethodInfo})
  - Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature(System.Reflection.MethodInfo)
  - Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings
  - Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod(System.Exception)
  - Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType(System.Type)
  langs:
  - csharp
  - vb
  name: AbstractExceptionHandlerMethodResolver
  nameWithType: AbstractExceptionHandlerMethodResolver
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractExceptionHandlerMethodResolver
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
    startLine: 12
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public abstract class AbstractExceptionHandlerMethodResolver
    content.vb: Public MustInherit Class AbstractExceptionHandlerMethodResolver
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Messaging.Handler.Attributes.Support.AttributeExceptionHandlerMethodResolver
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Reflection.MethodInfo})
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Reflection.MethodInfo})
  id: '#ctor(System.Collections.Generic.IDictionary{System.Type,System.Reflection.MethodInfo})'
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  langs:
  - csharp
  - vb
  name: AbstractExceptionHandlerMethodResolver(IDictionary<Type, MethodInfo>)
  nameWithType: AbstractExceptionHandlerMethodResolver.AbstractExceptionHandlerMethodResolver(IDictionary<Type, MethodInfo>)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.AbstractExceptionHandlerMethodResolver(System.Collections.Generic.IDictionary<System.Type, System.Reflection.MethodInfo>)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
    startLine: 18
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected AbstractExceptionHandlerMethodResolver(IDictionary<Type, MethodInfo> mappedMethods)
    parameters:
    - id: mappedMethods
      type: System.Collections.Generic.IDictionary{System.Type,System.Reflection.MethodInfo}
    content.vb: Protected Sub New(mappedMethods As IDictionary(Of Type, MethodInfo))
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.#ctor*
  nameWithType.vb: AbstractExceptionHandlerMethodResolver.AbstractExceptionHandlerMethodResolver(IDictionary(Of Type, MethodInfo))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.AbstractExceptionHandlerMethodResolver(System.Collections.Generic.IDictionary(Of System.Type, System.Reflection.MethodInfo))
  name.vb: AbstractExceptionHandlerMethodResolver(IDictionary(Of Type, MethodInfo))
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature(System.Reflection.MethodInfo)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature(System.Reflection.MethodInfo)
  id: GetExceptionsFromMethodSignature(System.Reflection.MethodInfo)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  langs:
  - csharp
  - vb
  name: GetExceptionsFromMethodSignature(MethodInfo)
  nameWithType: AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature(MethodInfo)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature(System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetExceptionsFromMethodSignature
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
    startLine: 31
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: protected static List<Type> GetExceptionsFromMethodSignature(MethodInfo method)
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Collections.Generic.List{System.Type}
    content.vb: Protected Shared Function GetExceptionsFromMethodSignature(method As MethodInfo) As List(Of Type)
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings
  commentId: P:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings
  id: HasExceptionMappings
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  langs:
  - csharp
  - vb
  name: HasExceptionMappings
  nameWithType: AbstractExceptionHandlerMethodResolver.HasExceptionMappings
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: HasExceptionMappings
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
    startLine: 52
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public bool HasExceptionMappings { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasExceptionMappings As Boolean
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod(System.Exception)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod(System.Exception)
  id: ResolveMethod(System.Exception)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  langs:
  - csharp
  - vb
  name: ResolveMethod(Exception)
  nameWithType: AbstractExceptionHandlerMethodResolver.ResolveMethod(Exception)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod(System.Exception)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ResolveMethod
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
    startLine: 57
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public MethodInfo ResolveMethod(Exception exception)
    parameters:
    - id: exception
      type: System.Exception
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Function ResolveMethod(exception As Exception) As MethodInfo
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType(System.Type)
  commentId: M:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType(System.Type)
  id: ResolveMethodByExceptionType(System.Type)
  parent: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver
  langs:
  - csharp
  - vb
  name: ResolveMethodByExceptionType(Type)
  nameWithType: AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType(Type)
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ResolveMethodByExceptionType
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Handler/Invocation/AbstractExceptionHandlerMethodResolver.cs
    startLine: 72
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: public MethodInfo ResolveMethodByExceptionType(Type exceptionType)
    parameters:
    - id: exceptionType
      type: System.Type
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Function ResolveMethodByExceptionType(exceptionType As Type) As MethodInfo
  overload: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Messaging.Handler.Invocation
  commentId: N:Steeltoe.Messaging.Handler.Invocation
  name: Steeltoe.Messaging.Handler.Invocation
  nameWithType: Steeltoe.Messaging.Handler.Invocation
  fullName: Steeltoe.Messaging.Handler.Invocation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.#ctor*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.#ctor
  name: AbstractExceptionHandlerMethodResolver
  nameWithType: AbstractExceptionHandlerMethodResolver.AbstractExceptionHandlerMethodResolver
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.AbstractExceptionHandlerMethodResolver
- uid: System.Collections.Generic.IDictionary{System.Type,System.Reflection.MethodInfo}
  commentId: T:System.Collections.Generic.IDictionary{System.Type,System.Reflection.MethodInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Type, MethodInfo>
  nameWithType: IDictionary<Type, MethodInfo>
  fullName: System.Collections.Generic.IDictionary<System.Type, System.Reflection.MethodInfo>
  nameWithType.vb: IDictionary(Of Type, MethodInfo)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Type, System.Reflection.MethodInfo)
  name.vb: IDictionary(Of Type, MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature
  name: GetExceptionsFromMethodSignature
  nameWithType: AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.GetExceptionsFromMethodSignature
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.List{System.Type}
  commentId: T:System.Collections.Generic.List{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Type>
  nameWithType: List<Type>
  fullName: System.Collections.Generic.List<System.Type>
  nameWithType.vb: List(Of Type)
  fullName.vb: System.Collections.Generic.List(Of System.Type)
  name.vb: List(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings
  name: HasExceptionMappings
  nameWithType: AbstractExceptionHandlerMethodResolver.HasExceptionMappings
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.HasExceptionMappings
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod
  name: ResolveMethod
  nameWithType: AbstractExceptionHandlerMethodResolver.ResolveMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethod
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType
  name: ResolveMethodByExceptionType
  nameWithType: AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType
  fullName: Steeltoe.Messaging.Handler.Invocation.AbstractExceptionHandlerMethodResolver.ResolveMethodByExceptionType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
