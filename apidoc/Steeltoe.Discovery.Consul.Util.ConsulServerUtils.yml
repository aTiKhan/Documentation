### YamlMime:ManagedReference
items:
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils
  commentId: T:Steeltoe.Discovery.Consul.Util.ConsulServerUtils
  id: ConsulServerUtils
  parent: Steeltoe.Discovery.Consul.Util
  children:
  - Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost(ServiceEntry)
  - Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address(System.String)
  - Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(ServiceEntry)
  - Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(System.Collections.Generic.IList{System.String})
  langs:
  - csharp
  - vb
  name: ConsulServerUtils
  nameWithType: ConsulServerUtils
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils
  type: Class
  source:
    remote:
      path: src/Discovery/src/Consul/Util/ConsulServerUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConsulServerUtils
    path: ../Steeltoe/src/Discovery/src/Consul/Util/ConsulServerUtils.cs
    startLine: 13
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Util
  syntax:
    content: public static class ConsulServerUtils
    content.vb: Public Module ConsulServerUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost(ServiceEntry)
  commentId: M:Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost(ServiceEntry)
  id: FindHost(ServiceEntry)
  parent: Steeltoe.Discovery.Consul.Util.ConsulServerUtils
  langs:
  - csharp
  - vb
  name: FindHost(ServiceEntry)
  nameWithType: ConsulServerUtils.FindHost(ServiceEntry)
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost(ServiceEntry)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Util/ConsulServerUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FindHost
    path: ../Steeltoe/src/Discovery/src/Consul/Util/ConsulServerUtils.cs
    startLine: 15
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Util
  syntax:
    content: public static string FindHost(ServiceEntry healthService)
    parameters:
    - id: healthService
      type: ServiceEntry
    return:
      type: System.String
    content.vb: Public Shared Function FindHost(healthService As ServiceEntry) As String
  overload: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address(System.String)
  commentId: M:Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address(System.String)
  id: FixIPv6Address(System.String)
  parent: Steeltoe.Discovery.Consul.Util.ConsulServerUtils
  langs:
  - csharp
  - vb
  name: FixIPv6Address(String)
  nameWithType: ConsulServerUtils.FixIPv6Address(String)
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address(System.String)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Util/ConsulServerUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FixIPv6Address
    path: ../Steeltoe/src/Discovery/src/Consul/Util/ConsulServerUtils.cs
    startLine: 33
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Util
  syntax:
    content: public static string FixIPv6Address(string address)
    parameters:
    - id: address
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function FixIPv6Address(address As String) As String
  overload: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(ServiceEntry)
  commentId: M:Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(ServiceEntry)
  id: GetMetadata(ServiceEntry)
  parent: Steeltoe.Discovery.Consul.Util.ConsulServerUtils
  langs:
  - csharp
  - vb
  name: GetMetadata(ServiceEntry)
  nameWithType: ConsulServerUtils.GetMetadata(ServiceEntry)
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(ServiceEntry)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Util/ConsulServerUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMetadata
    path: ../Steeltoe/src/Discovery/src/Consul/Util/ConsulServerUtils.cs
    startLine: 57
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Util
  syntax:
    content: public static IDictionary<string, string> GetMetadata(ServiceEntry healthService)
    parameters:
    - id: healthService
      type: ServiceEntry
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Shared Function GetMetadata(healthService As ServiceEntry) As IDictionary(Of String, String)
  overload: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(System.Collections.Generic.IList{System.String})
  commentId: M:Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(System.Collections.Generic.IList{System.String})
  id: GetMetadata(System.Collections.Generic.IList{System.String})
  parent: Steeltoe.Discovery.Consul.Util.ConsulServerUtils
  langs:
  - csharp
  - vb
  name: GetMetadata(IList<String>)
  nameWithType: ConsulServerUtils.GetMetadata(IList<String>)
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Util/ConsulServerUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMetadata
    path: ../Steeltoe/src/Discovery/src/Consul/Util/ConsulServerUtils.cs
    startLine: 62
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Util
  syntax:
    content: public static IDictionary<string, string> GetMetadata(IList<string> tags)
    parameters:
    - id: tags
      type: System.Collections.Generic.IList{System.String}
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Shared Function GetMetadata(tags As IList(Of String)) As IDictionary(Of String, String)
  overload: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata*
  nameWithType.vb: ConsulServerUtils.GetMetadata(IList(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata(System.Collections.Generic.IList(Of System.String))
  name.vb: GetMetadata(IList(Of String))
references:
- uid: Steeltoe.Discovery.Consul.Util
  commentId: N:Steeltoe.Discovery.Consul.Util
  name: Steeltoe.Discovery.Consul.Util
  nameWithType: Steeltoe.Discovery.Consul.Util
  fullName: Steeltoe.Discovery.Consul.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost*
  commentId: Overload:Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost
  name: FindHost
  nameWithType: ConsulServerUtils.FindHost
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FindHost
- uid: ServiceEntry
  isExternal: true
  name: ServiceEntry
  nameWithType: ServiceEntry
  fullName: ServiceEntry
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address*
  commentId: Overload:Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address
  name: FixIPv6Address
  nameWithType: ConsulServerUtils.FixIPv6Address
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.FixIPv6Address
- uid: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata*
  commentId: Overload:Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata
  name: GetMetadata
  nameWithType: ConsulServerUtils.GetMetadata
  fullName: Steeltoe.Discovery.Consul.Util.ConsulServerUtils.GetMetadata
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
