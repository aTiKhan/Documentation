### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  commentId: T:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  id: RabbitServicesExtensions
  parent: Steeltoe.Messaging.RabbitMQ.Extensions
  children:
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding[])
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange[])
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue)
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IQueue})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.Queue})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue[])
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  - Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  langs:
  - csharp
  - vb
  name: RabbitServicesExtensions
  nameWithType: RabbitServicesExtensions
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RabbitServicesExtensions
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 21
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static class RabbitServicesExtensions
    content.vb: Public Module RabbitServicesExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitTemplate(IServiceCollection)
  nameWithType: RabbitServicesExtensions.AddRabbitTemplate(IServiceCollection)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 23
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitTemplate(this IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitTemplate(services As IServiceCollection) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  id: AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitTemplate(IServiceCollection, Action<IServiceProvider, RabbitTemplate>)
  nameWithType: RabbitServicesExtensions.AddRabbitTemplate(IServiceCollection, Action<IServiceProvider, RabbitTemplate>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 28
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitTemplate(this IServiceCollection services, Action<IServiceProvider, RabbitTemplate> configure)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitTemplate(services As IServiceCollection, configure As Action(Of IServiceProvider, RabbitTemplate)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitTemplate(IServiceCollection, Action(Of IServiceProvider, RabbitTemplate))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate))
  name.vb: AddRabbitTemplate(IServiceCollection, Action(Of IServiceProvider, RabbitTemplate))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  id: AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitTemplate(IServiceCollection, String, Action<IServiceProvider, RabbitTemplate>)
  nameWithType: RabbitServicesExtensions.AddRabbitTemplate(IServiceCollection, String, Action<IServiceProvider, RabbitTemplate>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 33
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitTemplate(this IServiceCollection services, string serviceName, Action<IServiceProvider, RabbitTemplate> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitTemplate(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, RabbitTemplate) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitTemplate(IServiceCollection, String, Action(Of IServiceProvider, RabbitTemplate))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate))
  name.vb: AddRabbitTemplate(IServiceCollection, String, Action(Of IServiceProvider, RabbitTemplate))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitAdmin(IServiceCollection)
  nameWithType: RabbitServicesExtensions.AddRabbitAdmin(IServiceCollection)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitAdmin
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 59
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitAdmin(this IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitAdmin(services As IServiceCollection) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  id: AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitAdmin(IServiceCollection, Action<IServiceProvider, RabbitAdmin>)
  nameWithType: RabbitServicesExtensions.AddRabbitAdmin(IServiceCollection, Action<IServiceProvider, RabbitAdmin>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitAdmin
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 64
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitAdmin(this IServiceCollection services, Action<IServiceProvider, RabbitAdmin> configure)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitAdmin(services As IServiceCollection, configure As Action(Of IServiceProvider, RabbitAdmin)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitAdmin(IServiceCollection, Action(Of IServiceProvider, RabbitAdmin))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin))
  name.vb: AddRabbitAdmin(IServiceCollection, Action(Of IServiceProvider, RabbitAdmin))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  id: AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitAdmin(IServiceCollection, String, Action<IServiceProvider, RabbitAdmin>)
  nameWithType: RabbitServicesExtensions.AddRabbitAdmin(IServiceCollection, String, Action<IServiceProvider, RabbitAdmin>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitAdmin
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 69
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitAdmin(this IServiceCollection services, string serviceName, Action<IServiceProvider, RabbitAdmin> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitAdmin(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, RabbitAdmin) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitAdmin(IServiceCollection, String, Action(Of IServiceProvider, RabbitAdmin))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin))
  name.vb: AddRabbitAdmin(IServiceCollection, String, Action(Of IServiceProvider, RabbitAdmin))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue[])
  id: AddRabbitQueues(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue[])
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitQueues(IServiceCollection, IQueue[])
  nameWithType: RabbitServicesExtensions.AddRabbitQueues(IServiceCollection, IQueue[])
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IQueue[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitQueues
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 94
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitQueues(this IServiceCollection services, params IQueue[] queues)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: queues
      type: Steeltoe.Messaging.RabbitMQ.Config.IQueue[]
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitQueues(services As IServiceCollection, ParamArray queues As IQueue()) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitQueues(IServiceCollection, IQueue())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IQueue())
  name.vb: AddRabbitQueues(IServiceCollection, IQueue())
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue)
  id: AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IQueue)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitQueue(IServiceCollection, IQueue)
  nameWithType: RabbitServicesExtensions.AddRabbitQueue(IServiceCollection, IQueue)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IQueue)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitQueue
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 104
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitQueue(this IServiceCollection services, IQueue queue)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: queue
      type: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitQueue(services As IServiceCollection, queue As IQueue) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IQueue})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IQueue})
  id: AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IQueue})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitQueue(IServiceCollection, Func<IServiceProvider, IQueue>)
  nameWithType: RabbitServicesExtensions.AddRabbitQueue(IServiceCollection, Func<IServiceProvider, IQueue>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IQueue>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitQueue
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 109
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitQueue(this IServiceCollection services, Func<IServiceProvider, IQueue> factory)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: factory
      type: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IQueue}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitQueue(services As IServiceCollection, factory As Func(Of IServiceProvider, IQueue)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitQueue(IServiceCollection, Func(Of IServiceProvider, IQueue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IQueue))
  name.vb: AddRabbitQueue(IServiceCollection, Func(Of IServiceProvider, IQueue))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.Queue})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.Queue})
  id: AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.Queue})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitQueue(IServiceCollection, String, Action<IServiceProvider, Queue>)
  nameWithType: RabbitServicesExtensions.AddRabbitQueue(IServiceCollection, String, Action<IServiceProvider, Queue>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.Queue>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitQueue
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 119
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitQueue(this IServiceCollection services, string queueName, Action<IServiceProvider, Queue> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: queueName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.Queue}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitQueue(services As IServiceCollection, queueName As String, configure As Action(Of IServiceProvider, Queue) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitQueue(IServiceCollection, String, Action(Of IServiceProvider, Queue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.Queue))
  name.vb: AddRabbitQueue(IServiceCollection, String, Action(Of IServiceProvider, Queue))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange[])
  id: AddRabbitExchanges(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange[])
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitExchanges(IServiceCollection, IExchange[])
  nameWithType: RabbitServicesExtensions.AddRabbitExchanges(IServiceCollection, IExchange[])
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IExchange[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitExchanges
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 135
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitExchanges(this IServiceCollection services, params IExchange[] exchanges)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: exchanges
      type: Steeltoe.Messaging.RabbitMQ.Config.IExchange[]
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitExchanges(services As IServiceCollection, ParamArray exchanges As IExchange()) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitExchanges(IServiceCollection, IExchange())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IExchange())
  name.vb: AddRabbitExchanges(IServiceCollection, IExchange())
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  id: AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitExchange(IServiceCollection, Func<IServiceProvider, IExchange>)
  nameWithType: RabbitServicesExtensions.AddRabbitExchange(IServiceCollection, Func<IServiceProvider, IExchange>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitExchange
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 145
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitExchange(this IServiceCollection services, Func<IServiceProvider, IExchange> factory)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: factory
      type: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitExchange(services As IServiceCollection, factory As Func(Of IServiceProvider, IExchange)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitExchange(IServiceCollection, Func(Of IServiceProvider, IExchange))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange))
  name.vb: AddRabbitExchange(IServiceCollection, Func(Of IServiceProvider, IExchange))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  id: AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitExchange(IServiceCollection, IExchange)
  nameWithType: RabbitServicesExtensions.AddRabbitExchange(IServiceCollection, IExchange)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitExchange
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 155
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitExchange(this IServiceCollection services, IExchange exchange)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: exchange
      type: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitExchange(services As IServiceCollection, exchange As IExchange) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  id: AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitExchange(IServiceCollection, String, String, Action<IServiceProvider, IExchange>)
  nameWithType: RabbitServicesExtensions.AddRabbitExchange(IServiceCollection, String, String, Action<IServiceProvider, IExchange>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitExchange
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 160
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitExchange(this IServiceCollection services, string exchangeName, string exchangeType, Action<IServiceProvider, IExchange> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: exchangeName
      type: System.String
    - id: exchangeType
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitExchange(services As IServiceCollection, exchangeName As String, exchangeType As String, configure As Action(Of IServiceProvider, IExchange) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitExchange(IServiceCollection, String, String, Action(Of IServiceProvider, IExchange))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange))
  name.vb: AddRabbitExchange(IServiceCollection, String, String, Action(Of IServiceProvider, IExchange))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding[])
  id: AddRabbitBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding[])
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitBindings(IServiceCollection, IBinding[])
  nameWithType: RabbitServicesExtensions.AddRabbitBindings(IServiceCollection, IBinding[])
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IBinding[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitBindings
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 186
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitBindings(this IServiceCollection services, params IBinding[] bindings)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: bindings
      type: Steeltoe.Messaging.RabbitMQ.Config.IBinding[]
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitBindings(services As IServiceCollection, ParamArray bindings As IBinding()) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitBindings(IServiceCollection, IBinding())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IBinding())
  name.vb: AddRabbitBindings(IServiceCollection, IBinding())
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  id: AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitBinding(IServiceCollection, Func<IServiceProvider, IBinding>)
  nameWithType: RabbitServicesExtensions.AddRabbitBinding(IServiceCollection, Func<IServiceProvider, IBinding>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitBinding
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 196
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitBinding(this IServiceCollection services, Func<IServiceProvider, IBinding> factory)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: factory
      type: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitBinding(services As IServiceCollection, factory As Func(Of IServiceProvider, IBinding)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitBinding(IServiceCollection, Func(Of IServiceProvider, IBinding))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding))
  name.vb: AddRabbitBinding(IServiceCollection, Func(Of IServiceProvider, IBinding))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  id: AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitBinding(IServiceCollection, IBinding)
  nameWithType: RabbitServicesExtensions.AddRabbitBinding(IServiceCollection, IBinding)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection, Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitBinding
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 206
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitBinding(this IServiceCollection services, IBinding binding)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: binding
      type: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitBinding(services As IServiceCollection, binding As IBinding) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  id: AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitBinding(IServiceCollection, String, Binding.DestinationType, Action<IServiceProvider, IBinding>)
  nameWithType: RabbitServicesExtensions.AddRabbitBinding(IServiceCollection, String, Binding.DestinationType, Action<IServiceProvider, IBinding>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitBinding
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 212
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitBinding(this IServiceCollection services, string bindingName, Binding.DestinationType bindingType, Action<IServiceProvider, IBinding> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: bindingName
      type: System.String
    - id: bindingType
      type: Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitBinding(services As IServiceCollection, bindingName As String, bindingType As Binding.DestinationType, configure As Action(Of IServiceProvider, IBinding) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitBinding(IServiceCollection, String, Binding.DestinationType, Action(Of IServiceProvider, IBinding))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding))
  name.vb: AddRabbitBinding(IServiceCollection, String, Binding.DestinationType, Action(Of IServiceProvider, IBinding))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  id: ConfigureRabbitOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: ConfigureRabbitOptions(IServiceCollection, IConfiguration)
  nameWithType: RabbitServicesExtensions.ConfigureRabbitOptions(IServiceCollection, IConfiguration)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConfigureRabbitOptions
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 232
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection ConfigureRabbitOptions(this IServiceCollection services, IConfiguration config)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: config
      type: Microsoft.Extensions.Configuration.IConfiguration
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ConfigureRabbitOptions(services As IServiceCollection, config As IConfiguration) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)
  id: AddRabbitServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitServices(IServiceCollection, Boolean)
  nameWithType: RabbitServicesExtensions.AddRabbitServices(IServiceCollection, Boolean)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitServices
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 238
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitServices(this IServiceCollection services, bool useJsonMessageConverter = false)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: useJsonMessageConverter
      type: System.Boolean
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitServices(services As IServiceCollection, useJsonMessageConverter As Boolean = False) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddRabbitHostingServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitHostingServices(IServiceCollection)
  nameWithType: RabbitServicesExtensions.AddRabbitHostingServices(IServiceCollection)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitHostingServices
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 265
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitHostingServices(this IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitHostingServices(services As IServiceCollection) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  id: AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerAttributeProcessor(IServiceCollection, Action<IServiceProvider, RabbitListenerAttributeProcessor>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(IServiceCollection, Action<IServiceProvider, RabbitListenerAttributeProcessor>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerAttributeProcessor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 275
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerAttributeProcessor(this IServiceCollection services, Action<IServiceProvider, RabbitListenerAttributeProcessor> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerAttributeProcessor(services As IServiceCollection, configure As Action(Of IServiceProvider, RabbitListenerAttributeProcessor) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(IServiceCollection, Action(Of IServiceProvider, RabbitListenerAttributeProcessor))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor))
  name.vb: AddRabbitListenerAttributeProcessor(IServiceCollection, Action(Of IServiceProvider, RabbitListenerAttributeProcessor))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  id: AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerAttributeProcessor(IServiceCollection, String, Action<IServiceProvider, RabbitListenerAttributeProcessor>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(IServiceCollection, String, Action<IServiceProvider, RabbitListenerAttributeProcessor>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerAttributeProcessor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 280
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerAttributeProcessor(this IServiceCollection services, string serviceName, Action<IServiceProvider, RabbitListenerAttributeProcessor> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerAttributeProcessor(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, RabbitListenerAttributeProcessor) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(IServiceCollection, String, Action(Of IServiceProvider, RabbitListenerAttributeProcessor))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor))
  name.vb: AddRabbitListenerAttributeProcessor(IServiceCollection, String, Action(Of IServiceProvider, RabbitListenerAttributeProcessor))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerAttributeProcessor<P>(IServiceCollection, Action<IServiceProvider, P>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor<P>(IServiceCollection, Action<IServiceProvider, P>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor<P>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, P>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerAttributeProcessor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 291
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerAttributeProcessor<P>(this IServiceCollection services, Action<IServiceProvider, P> configure)

          where P : IRabbitListenerAttributeProcessor
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,{P}}
    typeParameters:
    - id: P
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerAttributeProcessor(Of P As IRabbitListenerAttributeProcessor)(services As IServiceCollection, configure As Action(Of IServiceProvider, P)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Of P)(IServiceCollection, Action(Of IServiceProvider, P))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Of P)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, P))
  name.vb: AddRabbitListenerAttributeProcessor(Of P)(IServiceCollection, Action(Of IServiceProvider, P))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerAttributeProcessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerAttributeProcessor<P>(IServiceCollection, String, Action<IServiceProvider, P>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor<P>(IServiceCollection, String, Action<IServiceProvider, P>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor<P>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, P>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerAttributeProcessor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 297
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerAttributeProcessor<P>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, P> configure = null)

          where P : IRabbitListenerAttributeProcessor
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{P}}
    typeParameters:
    - id: P
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerAttributeProcessor(Of P As IRabbitListenerAttributeProcessor)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, P) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Of P)(IServiceCollection, String, Action(Of IServiceProvider, P))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(Of P)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, P))
  name.vb: AddRabbitListenerAttributeProcessor(Of P)(IServiceCollection, String, Action(Of IServiceProvider, P))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  id: AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistrar(IServiceCollection, Action<IServiceProvider, RabbitListenerEndpointRegistrar>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(IServiceCollection, Action<IServiceProvider, RabbitListenerEndpointRegistrar>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistrar
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 319
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerEndpointRegistrar(this IServiceCollection services, Action<IServiceProvider, RabbitListenerEndpointRegistrar> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistrar(services As IServiceCollection, configure As Action(Of IServiceProvider, RabbitListenerEndpointRegistrar) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(IServiceCollection, Action(Of IServiceProvider, RabbitListenerEndpointRegistrar))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar))
  name.vb: AddRabbitListenerEndpointRegistrar(IServiceCollection, Action(Of IServiceProvider, RabbitListenerEndpointRegistrar))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  id: AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistrar(IServiceCollection, String, Action<IServiceProvider, RabbitListenerEndpointRegistrar>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(IServiceCollection, String, Action<IServiceProvider, RabbitListenerEndpointRegistrar>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistrar
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 325
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerEndpointRegistrar(this IServiceCollection services, string serviceName, Action<IServiceProvider, RabbitListenerEndpointRegistrar> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistrar(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, RabbitListenerEndpointRegistrar) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(IServiceCollection, String, Action(Of IServiceProvider, RabbitListenerEndpointRegistrar))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar))
  name.vb: AddRabbitListenerEndpointRegistrar(IServiceCollection, String, Action(Of IServiceProvider, RabbitListenerEndpointRegistrar))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistrar<R>(IServiceCollection, Action<IServiceProvider, R>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar<R>(IServiceCollection, Action<IServiceProvider, R>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar<R>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, R>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistrar
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 336
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerEndpointRegistrar<R>(this IServiceCollection services, Action<IServiceProvider, R> configure)

          where R : IRabbitListenerEndpointRegistrar
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,{R}}
    typeParameters:
    - id: R
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistrar(Of R As IRabbitListenerEndpointRegistrar)(services As IServiceCollection, configure As Action(Of IServiceProvider, R)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Of R)(IServiceCollection, Action(Of IServiceProvider, R))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Of R)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, R))
  name.vb: AddRabbitListenerEndpointRegistrar(Of R)(IServiceCollection, Action(Of IServiceProvider, R))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerEndpointRegistrar``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistrar<R>(IServiceCollection, String, Action<IServiceProvider, R>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar<R>(IServiceCollection, String, Action<IServiceProvider, R>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar<R>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, R>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistrar
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 342
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerEndpointRegistrar<R>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, R> configure = null)

          where R : IRabbitListenerEndpointRegistrar
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{R}}
    typeParameters:
    - id: R
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistrar(Of R As IRabbitListenerEndpointRegistrar)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, R) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Of R)(IServiceCollection, String, Action(Of IServiceProvider, R))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(Of R)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, R))
  name.vb: AddRabbitListenerEndpointRegistrar(Of R)(IServiceCollection, String, Action(Of IServiceProvider, R))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  id: AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistry(IServiceCollection, Action<IServiceProvider, RabbitListenerEndpointRegistry>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(IServiceCollection, Action<IServiceProvider, RabbitListenerEndpointRegistry>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistry
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 364
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerEndpointRegistry(this IServiceCollection services, Action<IServiceProvider, RabbitListenerEndpointRegistry> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistry(services As IServiceCollection, configure As Action(Of IServiceProvider, RabbitListenerEndpointRegistry) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(IServiceCollection, Action(Of IServiceProvider, RabbitListenerEndpointRegistry))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry))
  name.vb: AddRabbitListenerEndpointRegistry(IServiceCollection, Action(Of IServiceProvider, RabbitListenerEndpointRegistry))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  id: AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistry(IServiceCollection, String, Action<IServiceProvider, RabbitListenerEndpointRegistry>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(IServiceCollection, String, Action<IServiceProvider, RabbitListenerEndpointRegistry>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistry
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 370
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerEndpointRegistry(this IServiceCollection services, string serviceName, Action<IServiceProvider, RabbitListenerEndpointRegistry> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistry(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, RabbitListenerEndpointRegistry) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(IServiceCollection, String, Action(Of IServiceProvider, RabbitListenerEndpointRegistry))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry))
  name.vb: AddRabbitListenerEndpointRegistry(IServiceCollection, String, Action(Of IServiceProvider, RabbitListenerEndpointRegistry))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistry<R>(IServiceCollection, Action<IServiceProvider, R>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry<R>(IServiceCollection, Action<IServiceProvider, R>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry<R>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, R>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistry
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 381
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerEndpointRegistry<R>(this IServiceCollection services, Action<IServiceProvider, R> configure)

          where R : IRabbitListenerEndpointRegistry
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,{R}}
    typeParameters:
    - id: R
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistry(Of R As IRabbitListenerEndpointRegistry)(services As IServiceCollection, configure As Action(Of IServiceProvider, R)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Of R)(IServiceCollection, Action(Of IServiceProvider, R))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Of R)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, R))
  name.vb: AddRabbitListenerEndpointRegistry(Of R)(IServiceCollection, Action(Of IServiceProvider, R))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerEndpointRegistry``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerEndpointRegistry<R>(IServiceCollection, String, Action<IServiceProvider, R>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry<R>(IServiceCollection, String, Action<IServiceProvider, R>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry<R>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, R>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerEndpointRegistry
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 387
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerEndpointRegistry<R>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, R> configure = null)

          where R : IRabbitListenerEndpointRegistry
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{R}}
    typeParameters:
    - id: R
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerEndpointRegistry(Of R As IRabbitListenerEndpointRegistry)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, R) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Of R)(IServiceCollection, String, Action(Of IServiceProvider, R))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(Of R)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, R))
  name.vb: AddRabbitListenerEndpointRegistry(Of R)(IServiceCollection, String, Action(Of IServiceProvider, R))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  id: AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerContainerFactory(IServiceCollection, Action<IServiceProvider, DirectRabbitListenerContainerFactory>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainerFactory(IServiceCollection, Action<IServiceProvider, DirectRabbitListenerContainerFactory>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerContainerFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 415
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerContainerFactory(this IServiceCollection services, Action<IServiceProvider, DirectRabbitListenerContainerFactory> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerContainerFactory(services As IServiceCollection, configure As Action(Of IServiceProvider, DirectRabbitListenerContainerFactory) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerContainerFactory(IServiceCollection, Action(Of IServiceProvider, DirectRabbitListenerContainerFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory))
  name.vb: AddRabbitListenerContainerFactory(IServiceCollection, Action(Of IServiceProvider, DirectRabbitListenerContainerFactory))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  id: AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerContainerFactory(IServiceCollection, String, Action<IServiceProvider, DirectRabbitListenerContainerFactory>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainerFactory(IServiceCollection, String, Action<IServiceProvider, DirectRabbitListenerContainerFactory>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerContainerFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 420
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitListenerContainerFactory(this IServiceCollection services, string serviceName, Action<IServiceProvider, DirectRabbitListenerContainerFactory> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerContainerFactory(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, DirectRabbitListenerContainerFactory) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerContainerFactory(IServiceCollection, String, Action(Of IServiceProvider, DirectRabbitListenerContainerFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory))
  name.vb: AddRabbitListenerContainerFactory(IServiceCollection, String, Action(Of IServiceProvider, DirectRabbitListenerContainerFactory))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerContainerFactory<F>(IServiceCollection, Action<IServiceProvider, F>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainerFactory<F>(IServiceCollection, Action<IServiceProvider, F>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory<F>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, F>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerContainerFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 430
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerContainerFactory<F>(this IServiceCollection services, Action<IServiceProvider, F> configure)

          where F : IRabbitListenerContainerFactory
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,{F}}
    typeParameters:
    - id: F
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerContainerFactory(Of F As IRabbitListenerContainerFactory)(services As IServiceCollection, configure As Action(Of IServiceProvider, F)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerContainerFactory(Of F)(IServiceCollection, Action(Of IServiceProvider, F))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Of F)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, F))
  name.vb: AddRabbitListenerContainerFactory(Of F)(IServiceCollection, Action(Of IServiceProvider, F))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerContainerFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerContainerFactory<F>(IServiceCollection, String, Action<IServiceProvider, F>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainerFactory<F>(IServiceCollection, String, Action<IServiceProvider, F>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory<F>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, F>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerContainerFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 436
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerContainerFactory<F>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, F> configure = null)

          where F : IRabbitListenerContainerFactory
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{F}}
    typeParameters:
    - id: F
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerContainerFactory(Of F As IRabbitListenerContainerFactory)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, F) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerContainerFactory(Of F)(IServiceCollection, String, Action(Of IServiceProvider, F))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(Of F)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, F))
  name.vb: AddRabbitListenerContainerFactory(Of F)(IServiceCollection, String, Action(Of IServiceProvider, F))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  id: AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitConnectionFactory(IServiceCollection, Action<IServiceProvider, CachingConnectionFactory>)
  nameWithType: RabbitServicesExtensions.AddRabbitConnectionFactory(IServiceCollection, Action<IServiceProvider, CachingConnectionFactory>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 462
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitConnectionFactory(this IServiceCollection services, Action<IServiceProvider, CachingConnectionFactory> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitConnectionFactory(services As IServiceCollection, configure As Action(Of IServiceProvider, CachingConnectionFactory) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitConnectionFactory(IServiceCollection, Action(Of IServiceProvider, CachingConnectionFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory))
  name.vb: AddRabbitConnectionFactory(IServiceCollection, Action(Of IServiceProvider, CachingConnectionFactory))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  id: AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitConnectionFactory(IServiceCollection, String, Action<IServiceProvider, CachingConnectionFactory>)
  nameWithType: RabbitServicesExtensions.AddRabbitConnectionFactory(IServiceCollection, String, Action<IServiceProvider, CachingConnectionFactory>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 467
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitConnectionFactory(this IServiceCollection services, string serviceName, Action<IServiceProvider, CachingConnectionFactory> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitConnectionFactory(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, CachingConnectionFactory) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitConnectionFactory(IServiceCollection, String, Action(Of IServiceProvider, CachingConnectionFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory))
  name.vb: AddRabbitConnectionFactory(IServiceCollection, String, Action(Of IServiceProvider, CachingConnectionFactory))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  id: AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitConnectionFactory<F>(IServiceCollection, Action<IServiceProvider, F>)
  nameWithType: RabbitServicesExtensions.AddRabbitConnectionFactory<F>(IServiceCollection, Action<IServiceProvider, F>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory<F>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, F>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 477
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitConnectionFactory<F>(this IServiceCollection services, Action<IServiceProvider, F> configure)

          where F : IConnectionFactory
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,{F}}
    typeParameters:
    - id: F
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitConnectionFactory(Of F As IConnectionFactory)(services As IServiceCollection, configure As Action(Of IServiceProvider, F)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitConnectionFactory(Of F)(IServiceCollection, Action(Of IServiceProvider, F))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Of F)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, F))
  name.vb: AddRabbitConnectionFactory(Of F)(IServiceCollection, Action(Of IServiceProvider, F))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitConnectionFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitConnectionFactory<F>(IServiceCollection, String, Action<IServiceProvider, F>)
  nameWithType: RabbitServicesExtensions.AddRabbitConnectionFactory<F>(IServiceCollection, String, Action<IServiceProvider, F>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory<F>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, F>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 483
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitConnectionFactory<F>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, F> configure = null)

          where F : IConnectionFactory
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{F}}
    typeParameters:
    - id: F
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitConnectionFactory(Of F As IConnectionFactory)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, F) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitConnectionFactory(Of F)(IServiceCollection, String, Action(Of IServiceProvider, F))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(Of F)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, F))
  name.vb: AddRabbitConnectionFactory(Of F)(IServiceCollection, String, Action(Of IServiceProvider, F))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  id: AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitJsonMessageConverter(IServiceCollection, Action<IServiceProvider, JsonMessageConverter>)
  nameWithType: RabbitServicesExtensions.AddRabbitJsonMessageConverter(IServiceCollection, Action<IServiceProvider, JsonMessageConverter>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitJsonMessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 505
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitJsonMessageConverter(this IServiceCollection services, Action<IServiceProvider, JsonMessageConverter> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitJsonMessageConverter(services As IServiceCollection, configure As Action(Of IServiceProvider, JsonMessageConverter) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitJsonMessageConverter(IServiceCollection, Action(Of IServiceProvider, JsonMessageConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter))
  name.vb: AddRabbitJsonMessageConverter(IServiceCollection, Action(Of IServiceProvider, JsonMessageConverter))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  id: AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitJsonMessageConverter(IServiceCollection, String, Action<IServiceProvider, JsonMessageConverter>)
  nameWithType: RabbitServicesExtensions.AddRabbitJsonMessageConverter(IServiceCollection, String, Action<IServiceProvider, JsonMessageConverter>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitJsonMessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 510
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitJsonMessageConverter(this IServiceCollection services, string serviceName, Action<IServiceProvider, JsonMessageConverter> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitJsonMessageConverter(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, JsonMessageConverter) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitJsonMessageConverter(IServiceCollection, String, Action(Of IServiceProvider, JsonMessageConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter))
  name.vb: AddRabbitJsonMessageConverter(IServiceCollection, String, Action(Of IServiceProvider, JsonMessageConverter))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  id: AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitDefaultMessageConverter(IServiceCollection, Action<IServiceProvider, SimpleMessageConverter>)
  nameWithType: RabbitServicesExtensions.AddRabbitDefaultMessageConverter(IServiceCollection, Action<IServiceProvider, SimpleMessageConverter>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitDefaultMessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 520
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitDefaultMessageConverter(this IServiceCollection services, Action<IServiceProvider, SimpleMessageConverter> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitDefaultMessageConverter(services As IServiceCollection, configure As Action(Of IServiceProvider, SimpleMessageConverter) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitDefaultMessageConverter(IServiceCollection, Action(Of IServiceProvider, SimpleMessageConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter))
  name.vb: AddRabbitDefaultMessageConverter(IServiceCollection, Action(Of IServiceProvider, SimpleMessageConverter))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  id: AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitDefaultMessageConverter(IServiceCollection, String, Action<IServiceProvider, SimpleMessageConverter>)
  nameWithType: RabbitServicesExtensions.AddRabbitDefaultMessageConverter(IServiceCollection, String, Action<IServiceProvider, SimpleMessageConverter>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitDefaultMessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 525
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitDefaultMessageConverter(this IServiceCollection services, string serviceName, Action<IServiceProvider, SimpleMessageConverter> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitDefaultMessageConverter(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, SimpleMessageConverter) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitDefaultMessageConverter(IServiceCollection, String, Action(Of IServiceProvider, SimpleMessageConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter))
  name.vb: AddRabbitDefaultMessageConverter(IServiceCollection, String, Action(Of IServiceProvider, SimpleMessageConverter))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  id: AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitMessageConverter<C>(IServiceCollection, Action<IServiceProvider, C>)
  nameWithType: RabbitServicesExtensions.AddRabbitMessageConverter<C>(IServiceCollection, Action<IServiceProvider, C>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter<C>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, C>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitMessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 535
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitMessageConverter<C>(this IServiceCollection services, Action<IServiceProvider, C> configure)

          where C : ISmartMessageConverter
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,{C}}
    typeParameters:
    - id: C
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitMessageConverter(Of C As ISmartMessageConverter)(services As IServiceCollection, configure As Action(Of IServiceProvider, C)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitMessageConverter(Of C)(IServiceCollection, Action(Of IServiceProvider, C))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter(Of C)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, C))
  name.vb: AddRabbitMessageConverter(Of C)(IServiceCollection, Action(Of IServiceProvider, C))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitMessageConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitMessageConverter<C>(IServiceCollection, String, Action<IServiceProvider, C>)
  nameWithType: RabbitServicesExtensions.AddRabbitMessageConverter<C>(IServiceCollection, String, Action<IServiceProvider, C>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter<C>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, C>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitMessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 541
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitMessageConverter<C>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, C> configure = null)

          where C : ISmartMessageConverter
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{C}}
    typeParameters:
    - id: C
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitMessageConverter(Of C As ISmartMessageConverter)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, C) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitMessageConverter(Of C)(IServiceCollection, String, Action(Of IServiceProvider, C))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter(Of C)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, C))
  name.vb: AddRabbitMessageConverter(Of C)(IServiceCollection, String, Action(Of IServiceProvider, C))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  id: AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitMessageHandlerMethodFactory(IServiceCollection, Action<IServiceProvider, RabbitMessageHandlerMethodFactory>)
  nameWithType: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(IServiceCollection, Action<IServiceProvider, RabbitMessageHandlerMethodFactory>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitMessageHandlerMethodFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 563
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitMessageHandlerMethodFactory(this IServiceCollection services, Action<IServiceProvider, RabbitMessageHandlerMethodFactory> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitMessageHandlerMethodFactory(services As IServiceCollection, configure As Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(IServiceCollection, Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory))
  name.vb: AddRabbitMessageHandlerMethodFactory(IServiceCollection, Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  id: AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitMessageHandlerMethodFactory(IServiceCollection, String, Action<IServiceProvider, RabbitMessageHandlerMethodFactory>)
  nameWithType: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(IServiceCollection, String, Action<IServiceProvider, RabbitMessageHandlerMethodFactory>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitMessageHandlerMethodFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 568
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitMessageHandlerMethodFactory(this IServiceCollection services, string serviceName, Action<IServiceProvider, RabbitMessageHandlerMethodFactory> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitMessageHandlerMethodFactory(services As IServiceCollection, serviceName As String, configure As Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(IServiceCollection, String, Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory))
  name.vb: AddRabbitMessageHandlerMethodFactory(IServiceCollection, String, Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  id: AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitMessageHandlerMethodFactory<F>(IServiceCollection, Action<IServiceProvider, F>)
  nameWithType: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory<F>(IServiceCollection, Action<IServiceProvider, F>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory<F>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<System.IServiceProvider, F>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitMessageHandlerMethodFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 578
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitMessageHandlerMethodFactory<F>(this IServiceCollection services, Action<IServiceProvider, F> configure)

          where F : IMessageHandlerMethodFactory
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configure
      type: System.Action{System.IServiceProvider,{F}}
    typeParameters:
    - id: F
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitMessageHandlerMethodFactory(Of F As IMessageHandlerMethodFactory)(services As IServiceCollection, configure As Action(Of IServiceProvider, F)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Of F)(IServiceCollection, Action(Of IServiceProvider, F))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Of F)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of System.IServiceProvider, F))
  name.vb: AddRabbitMessageHandlerMethodFactory(Of F)(IServiceCollection, Action(Of IServiceProvider, F))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitMessageHandlerMethodFactory``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitMessageHandlerMethodFactory<F>(IServiceCollection, String, Action<IServiceProvider, F>)
  nameWithType: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory<F>(IServiceCollection, String, Action<IServiceProvider, F>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory<F>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, F>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitMessageHandlerMethodFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 584
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitMessageHandlerMethodFactory<F>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, F> configure = null)

          where F : IMessageHandlerMethodFactory
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{F}}
    typeParameters:
    - id: F
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitMessageHandlerMethodFactory(Of F As IMessageHandlerMethodFactory)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, F) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Of F)(IServiceCollection, String, Action(Of IServiceProvider, F))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(Of F)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, F))
  name.vb: AddRabbitMessageHandlerMethodFactory(Of F)(IServiceCollection, String, Action(Of IServiceProvider, F))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  id: AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitDirecListenerContainer(IServiceCollection, Func<IServiceProvider, DirectMessageListenerContainer>)
  nameWithType: RabbitServicesExtensions.AddRabbitDirecListenerContainer(IServiceCollection, Func<IServiceProvider, DirectMessageListenerContainer>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitDirecListenerContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 608
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitDirecListenerContainer(this IServiceCollection services, Func<IServiceProvider, DirectMessageListenerContainer> factory)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: factory
      type: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitDirecListenerContainer(services As IServiceCollection, factory As Func(Of IServiceProvider, DirectMessageListenerContainer)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitDirecListenerContainer(IServiceCollection, Func(Of IServiceProvider, DirectMessageListenerContainer))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer))
  name.vb: AddRabbitDirecListenerContainer(IServiceCollection, Func(Of IServiceProvider, DirectMessageListenerContainer))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  id: AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitDirecListenerContainer(IServiceCollection, String, Action<IServiceProvider, DirectMessageListenerContainer>)
  nameWithType: RabbitServicesExtensions.AddRabbitDirecListenerContainer(IServiceCollection, String, Action<IServiceProvider, DirectMessageListenerContainer>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitDirecListenerContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 613
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IServiceCollection AddRabbitDirecListenerContainer(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, DirectMessageListenerContainer> configure = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitDirecListenerContainer(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, DirectMessageListenerContainer) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitDirecListenerContainer(IServiceCollection, String, Action(Of IServiceProvider, DirectMessageListenerContainer))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer))
  name.vb: AddRabbitDirecListenerContainer(IServiceCollection, String, Action(Of IServiceProvider, DirectMessageListenerContainer))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerContainer<C>(IServiceCollection, Func<IServiceProvider, C>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainer<C>(IServiceCollection, Func<IServiceProvider, C>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer<C>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, C>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 618
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerContainer<C>(this IServiceCollection services, Func<IServiceProvider, C> factory)

          where C : AbstractMessageListenerContainer
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: factory
      type: System.Func{System.IServiceProvider,{C}}
    typeParameters:
    - id: C
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerContainer(Of C As AbstractMessageListenerContainer)(services As IServiceCollection, factory As Func(Of IServiceProvider, C)) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerContainer(Of C)(IServiceCollection, Func(Of IServiceProvider, C))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer(Of C)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, C))
  name.vb: AddRabbitListenerContainer(Of C)(IServiceCollection, Func(Of IServiceProvider, C))
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  id: AddRabbitListenerContainer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
  langs:
  - csharp
  - vb
  name: AddRabbitListenerContainer<C>(IServiceCollection, String, Action<IServiceProvider, C>)
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainer<C>(IServiceCollection, String, Action<IServiceProvider, C>)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer<C>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action<System.IServiceProvider, C>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddRabbitListenerContainer
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/RabbitServicesExtensions.cs
    startLine: 629
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: >-
      public static IServiceCollection AddRabbitListenerContainer<C>(this IServiceCollection services, string serviceName = null, Action<IServiceProvider, C> configure = null)

          where C : AbstractMessageListenerContainer
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: serviceName
      type: System.String
    - id: configure
      type: System.Action{System.IServiceProvider,{C}}
    typeParameters:
    - id: C
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRabbitListenerContainer(Of C As AbstractMessageListenerContainer)(services As IServiceCollection, serviceName As String = Nothing, configure As Action(Of IServiceProvider, C) = Nothing) As IServiceCollection
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer*
  nameWithType.vb: RabbitServicesExtensions.AddRabbitListenerContainer(Of C)(IServiceCollection, String, Action(Of IServiceProvider, C))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer(Of C)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.String, System.Action(Of System.IServiceProvider, C))
  name.vb: AddRabbitListenerContainer(Of C)(IServiceCollection, String, Action(Of IServiceProvider, C))
references:
- uid: Steeltoe.Messaging.RabbitMQ.Extensions
  commentId: N:Steeltoe.Messaging.RabbitMQ.Extensions
  name: Steeltoe.Messaging.RabbitMQ.Extensions
  nameWithType: Steeltoe.Messaging.RabbitMQ.Extensions
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate
  name: AddRabbitTemplate
  nameWithType: RabbitServicesExtensions.AddRabbitTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, RabbitTemplate>
  nameWithType: Action<IServiceProvider, RabbitTemplate>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate>
  nameWithType.vb: Action(Of IServiceProvider, RabbitTemplate)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate)
  name.vb: Action(Of IServiceProvider, RabbitTemplate)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
    name: RabbitTemplate
    nameWithType: RabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
    name: RabbitTemplate
    nameWithType: RabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin
  name: AddRabbitAdmin
  nameWithType: RabbitServicesExtensions.AddRabbitAdmin
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, RabbitAdmin>
  nameWithType: Action<IServiceProvider, RabbitAdmin>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin>
  nameWithType.vb: Action(Of IServiceProvider, RabbitAdmin)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin)
  name.vb: Action(Of IServiceProvider, RabbitAdmin)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
    name: RabbitAdmin
    nameWithType: RabbitAdmin
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
    name: RabbitAdmin
    nameWithType: RabbitAdmin
    fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues
  name: AddRabbitQueues
  nameWithType: RabbitServicesExtensions.AddRabbitQueues
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues
- uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue[]
  isExternal: true
  name: IQueue[]
  nameWithType: IQueue[]
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue[]
  nameWithType.vb: IQueue()
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.IQueue()
  name.vb: IQueue()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    name: IQueue
    nameWithType: IQueue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    name: IQueue
    nameWithType: IQueue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue
  name: AddRabbitQueue
  nameWithType: RabbitServicesExtensions.AddRabbitQueue
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue
- uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.IQueue
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: IQueue
  nameWithType: IQueue
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
- uid: Steeltoe.Messaging.RabbitMQ.Config
  commentId: N:Steeltoe.Messaging.RabbitMQ.Config
  name: Steeltoe.Messaging.RabbitMQ.Config
  nameWithType: Steeltoe.Messaging.RabbitMQ.Config
  fullName: Steeltoe.Messaging.RabbitMQ.Config
- uid: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IQueue}
  commentId: T:System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IQueue}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, IQueue>
  nameWithType: Func<IServiceProvider, IQueue>
  fullName: System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IQueue>
  nameWithType.vb: Func(Of IServiceProvider, IQueue)
  fullName.vb: System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IQueue)
  name.vb: Func(Of IServiceProvider, IQueue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    name: IQueue
    nameWithType: IQueue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    name: IQueue
    nameWithType: IQueue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.Queue}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.Queue}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, Queue>
  nameWithType: Action<IServiceProvider, Queue>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.Queue>
  nameWithType.vb: Action(Of IServiceProvider, Queue)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.Queue)
  name.vb: Action(Of IServiceProvider, Queue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.Queue
    name: Queue
    nameWithType: Queue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.Queue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.Queue
    name: Queue
    nameWithType: Queue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.Queue
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges
  name: AddRabbitExchanges
  nameWithType: RabbitServicesExtensions.AddRabbitExchanges
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges
- uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange[]
  isExternal: true
  name: IExchange[]
  nameWithType: IExchange[]
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange[]
  nameWithType.vb: IExchange()
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.IExchange()
  name.vb: IExchange()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange
  name: AddRabbitExchange
  nameWithType: RabbitServicesExtensions.AddRabbitExchange
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange
- uid: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange}
  commentId: T:System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, IExchange>
  nameWithType: Func<IServiceProvider, IExchange>
  fullName: System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange>
  nameWithType.vb: Func(Of IServiceProvider, IExchange)
  fullName.vb: System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  name.vb: Func(Of IServiceProvider, IExchange)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.IExchange
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: IExchange
  nameWithType: IExchange
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IExchange}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, IExchange>
  nameWithType: Action<IServiceProvider, IExchange>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange>
  nameWithType.vb: Action(Of IServiceProvider, IExchange)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  name.vb: Action(Of IServiceProvider, IExchange)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings
  name: AddRabbitBindings
  nameWithType: RabbitServicesExtensions.AddRabbitBindings
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings
- uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding[]
  isExternal: true
  name: IBinding[]
  nameWithType: IBinding[]
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding[]
  nameWithType.vb: IBinding()
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.IBinding()
  name.vb: IBinding()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding
  name: AddRabbitBinding
  nameWithType: RabbitServicesExtensions.AddRabbitBinding
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding
- uid: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding}
  commentId: T:System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, IBinding>
  nameWithType: Func<IServiceProvider, IBinding>
  fullName: System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding>
  nameWithType.vb: Func(Of IServiceProvider, IBinding)
  fullName.vb: System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  name.vb: Func(Of IServiceProvider, IBinding)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.IBinding
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: IBinding
  nameWithType: IBinding
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
- uid: Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: Binding.DestinationType
  nameWithType: Binding.DestinationType
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.IBinding}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, IBinding>
  nameWithType: Action<IServiceProvider, IBinding>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding>
  nameWithType.vb: Action(Of IServiceProvider, IBinding)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  name.vb: Action(Of IServiceProvider, IBinding)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions
  name: ConfigureRabbitOptions
  nameWithType: RabbitServicesExtensions.ConfigureRabbitOptions
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: true
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices
  name: AddRabbitServices
  nameWithType: RabbitServicesExtensions.AddRabbitServices
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices
  name: AddRabbitHostingServices
  nameWithType: RabbitServicesExtensions.AddRabbitHostingServices
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor
  name: AddRabbitListenerAttributeProcessor
  nameWithType: RabbitServicesExtensions.AddRabbitListenerAttributeProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, RabbitListenerAttributeProcessor>
  nameWithType: Action<IServiceProvider, RabbitListenerAttributeProcessor>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor>
  nameWithType.vb: Action(Of IServiceProvider, RabbitListenerAttributeProcessor)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor)
  name.vb: Action(Of IServiceProvider, RabbitListenerAttributeProcessor)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor
    name: RabbitListenerAttributeProcessor
    nameWithType: RabbitListenerAttributeProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor
    name: RabbitListenerAttributeProcessor
    nameWithType: RabbitListenerAttributeProcessor
    fullName: Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.IServiceProvider,{P}}
  commentId: T:System.Action{System.IServiceProvider,``0}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, P>
  nameWithType: Action<IServiceProvider, P>
  fullName: System.Action<System.IServiceProvider, P>
  nameWithType.vb: Action(Of IServiceProvider, P)
  fullName.vb: System.Action(Of System.IServiceProvider, P)
  name.vb: Action(Of IServiceProvider, P)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: P
    nameWithType: P
    fullName: P
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: P
    nameWithType: P
    fullName: P
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar
  name: AddRabbitListenerEndpointRegistrar
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, RabbitListenerEndpointRegistrar>
  nameWithType: Action<IServiceProvider, RabbitListenerEndpointRegistrar>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar>
  nameWithType.vb: Action(Of IServiceProvider, RabbitListenerEndpointRegistrar)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar)
  name.vb: Action(Of IServiceProvider, RabbitListenerEndpointRegistrar)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar
    name: RabbitListenerEndpointRegistrar
    nameWithType: RabbitListenerEndpointRegistrar
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar
    name: RabbitListenerEndpointRegistrar
    nameWithType: RabbitListenerEndpointRegistrar
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.IServiceProvider,{R}}
  commentId: T:System.Action{System.IServiceProvider,``0}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, R>
  nameWithType: Action<IServiceProvider, R>
  fullName: System.Action<System.IServiceProvider, R>
  nameWithType.vb: Action(Of IServiceProvider, R)
  fullName.vb: System.Action(Of System.IServiceProvider, R)
  name.vb: Action(Of IServiceProvider, R)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: R
    nameWithType: R
    fullName: R
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: R
    nameWithType: R
    fullName: R
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry
  name: AddRabbitListenerEndpointRegistry
  nameWithType: RabbitServicesExtensions.AddRabbitListenerEndpointRegistry
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, RabbitListenerEndpointRegistry>
  nameWithType: Action<IServiceProvider, RabbitListenerEndpointRegistry>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry>
  nameWithType.vb: Action(Of IServiceProvider, RabbitListenerEndpointRegistry)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry)
  name.vb: Action(Of IServiceProvider, RabbitListenerEndpointRegistry)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry
    name: RabbitListenerEndpointRegistry
    nameWithType: RabbitListenerEndpointRegistry
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry
    name: RabbitListenerEndpointRegistry
    nameWithType: RabbitListenerEndpointRegistry
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory
  name: AddRabbitListenerContainerFactory
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainerFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, DirectRabbitListenerContainerFactory>
  nameWithType: Action<IServiceProvider, DirectRabbitListenerContainerFactory>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory>
  nameWithType.vb: Action(Of IServiceProvider, DirectRabbitListenerContainerFactory)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory)
  name.vb: Action(Of IServiceProvider, DirectRabbitListenerContainerFactory)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory
    name: DirectRabbitListenerContainerFactory
    nameWithType: DirectRabbitListenerContainerFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory
    name: DirectRabbitListenerContainerFactory
    nameWithType: DirectRabbitListenerContainerFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.IServiceProvider,{F}}
  commentId: T:System.Action{System.IServiceProvider,``0}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, F>
  nameWithType: Action<IServiceProvider, F>
  fullName: System.Action<System.IServiceProvider, F>
  nameWithType.vb: Action(Of IServiceProvider, F)
  fullName.vb: System.Action(Of System.IServiceProvider, F)
  name.vb: Action(Of IServiceProvider, F)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: F
    nameWithType: F
    fullName: F
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: F
    nameWithType: F
    fullName: F
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory
  name: AddRabbitConnectionFactory
  nameWithType: RabbitServicesExtensions.AddRabbitConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, CachingConnectionFactory>
  nameWithType: Action<IServiceProvider, CachingConnectionFactory>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory>
  nameWithType.vb: Action(Of IServiceProvider, CachingConnectionFactory)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory)
  name.vb: Action(Of IServiceProvider, CachingConnectionFactory)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory
    name: CachingConnectionFactory
    nameWithType: CachingConnectionFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory
    name: CachingConnectionFactory
    nameWithType: CachingConnectionFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter
  name: AddRabbitJsonMessageConverter
  nameWithType: RabbitServicesExtensions.AddRabbitJsonMessageConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, JsonMessageConverter>
  nameWithType: Action<IServiceProvider, JsonMessageConverter>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter>
  nameWithType.vb: Action(Of IServiceProvider, JsonMessageConverter)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter)
  name.vb: Action(Of IServiceProvider, JsonMessageConverter)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter
    name: JsonMessageConverter
    nameWithType: JsonMessageConverter
    fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter
    name: JsonMessageConverter
    nameWithType: JsonMessageConverter
    fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter
  name: AddRabbitDefaultMessageConverter
  nameWithType: RabbitServicesExtensions.AddRabbitDefaultMessageConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, SimpleMessageConverter>
  nameWithType: Action<IServiceProvider, SimpleMessageConverter>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter>
  nameWithType.vb: Action(Of IServiceProvider, SimpleMessageConverter)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter)
  name.vb: Action(Of IServiceProvider, SimpleMessageConverter)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter
    name: SimpleMessageConverter
    nameWithType: SimpleMessageConverter
    fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter
    name: SimpleMessageConverter
    nameWithType: SimpleMessageConverter
    fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter
  name: AddRabbitMessageConverter
  nameWithType: RabbitServicesExtensions.AddRabbitMessageConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter
- uid: System.Action{System.IServiceProvider,{C}}
  commentId: T:System.Action{System.IServiceProvider,``0}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, C>
  nameWithType: Action<IServiceProvider, C>
  fullName: System.Action<System.IServiceProvider, C>
  nameWithType.vb: Action(Of IServiceProvider, C)
  fullName.vb: System.Action(Of System.IServiceProvider, C)
  name.vb: Action(Of IServiceProvider, C)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory
  name: AddRabbitMessageHandlerMethodFactory
  nameWithType: RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, RabbitMessageHandlerMethodFactory>
  nameWithType: Action<IServiceProvider, RabbitMessageHandlerMethodFactory>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory>
  nameWithType.vb: Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory)
  name.vb: Action(Of IServiceProvider, RabbitMessageHandlerMethodFactory)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory
    name: RabbitMessageHandlerMethodFactory
    nameWithType: RabbitMessageHandlerMethodFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory
    name: RabbitMessageHandlerMethodFactory
    nameWithType: RabbitMessageHandlerMethodFactory
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer
  name: AddRabbitDirecListenerContainer
  nameWithType: RabbitServicesExtensions.AddRabbitDirecListenerContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer
- uid: System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer}
  commentId: T:System.Func{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, DirectMessageListenerContainer>
  nameWithType: Func<IServiceProvider, DirectMessageListenerContainer>
  fullName: System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer>
  nameWithType.vb: Func(Of IServiceProvider, DirectMessageListenerContainer)
  fullName.vb: System.Func(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer)
  name.vb: Func(Of IServiceProvider, DirectMessageListenerContainer)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
    name: DirectMessageListenerContainer
    nameWithType: DirectMessageListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
    name: DirectMessageListenerContainer
    nameWithType: DirectMessageListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer}
  commentId: T:System.Action{System.IServiceProvider,Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer}
  parent: System
  definition: System.Action`2
  name: Action<IServiceProvider, DirectMessageListenerContainer>
  nameWithType: Action<IServiceProvider, DirectMessageListenerContainer>
  fullName: System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer>
  nameWithType.vb: Action(Of IServiceProvider, DirectMessageListenerContainer)
  fullName.vb: System.Action(Of System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer)
  name.vb: Action(Of IServiceProvider, DirectMessageListenerContainer)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
    name: DirectMessageListenerContainer
    nameWithType: DirectMessageListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
    name: DirectMessageListenerContainer
    nameWithType: DirectMessageListenerContainer
    fullName: Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer
  name: AddRabbitListenerContainer
  nameWithType: RabbitServicesExtensions.AddRabbitListenerContainer
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer
- uid: System.Func{System.IServiceProvider,{C}}
  commentId: T:System.Func{System.IServiceProvider,``0}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, C>
  nameWithType: Func<IServiceProvider, C>
  fullName: System.Func<System.IServiceProvider, C>
  nameWithType.vb: Func(Of IServiceProvider, C)
  fullName.vb: System.Func(Of System.IServiceProvider, C)
  name.vb: Func(Of IServiceProvider, C)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: )
    nameWithType: )
    fullName: )
