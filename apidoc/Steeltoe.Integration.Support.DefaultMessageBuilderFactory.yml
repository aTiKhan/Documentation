### YamlMime:ManagedReference
items:
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  commentId: T:Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  id: DefaultMessageBuilderFactory
  parent: Steeltoe.Integration.Support
  children:
  - Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders(System.String[])
  - Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  - Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  - Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders
  - Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload(System.Object)
  - Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload``1(``0)
  langs:
  - csharp
  - vb
  name: DefaultMessageBuilderFactory
  nameWithType: DefaultMessageBuilderFactory
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  type: Class
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DefaultMessageBuilderFactory
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
    startLine: 9
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Support
  syntax:
    content: 'public class DefaultMessageBuilderFactory : IMessageBuilderFactory'
    content.vb: >-
      Public Class DefaultMessageBuilderFactory

          Implements IMessageBuilderFactory
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Integration.Support.IMessageBuilderFactory
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders
  commentId: P:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders
  id: ReadOnlyHeaders
  parent: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: ReadOnlyHeaders
  nameWithType: DefaultMessageBuilderFactory.ReadOnlyHeaders
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders
  type: Property
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReadOnlyHeaders
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
    startLine: 11
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Support
  syntax:
    content: public IList<string> ReadOnlyHeaders { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: Public Property ReadOnlyHeaders As IList(Of String)
  overload: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders(System.String[])
  commentId: M:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders(System.String[])
  id: AddReadOnlyHeaders(System.String[])
  parent: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: AddReadOnlyHeaders(String[])
  nameWithType: DefaultMessageBuilderFactory.AddReadOnlyHeaders(String[])
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders(System.String[])
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddReadOnlyHeaders
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
    startLine: 13
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Support
  syntax:
    content: public void AddReadOnlyHeaders(params string[] readOnlyHeaders)
    parameters:
    - id: readOnlyHeaders
      type: System.String[]
    content.vb: Public Sub AddReadOnlyHeaders(ParamArray readOnlyHeaders As String())
  overload: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders*
  nameWithType.vb: DefaultMessageBuilderFactory.AddReadOnlyHeaders(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders(System.String())
  name.vb: AddReadOnlyHeaders(String())
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  commentId: M:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  id: FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  parent: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage<T>)
  nameWithType: DefaultMessageBuilderFactory.FromMessage<T>(IMessage<T>)
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage<T>(Steeltoe.Messaging.IMessage<T>)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
    startLine: 21
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Support
  syntax:
    content: public IMessageBuilder<T> FromMessage<T>(IMessage<T> message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage{{T}}
    typeParameters:
    - id: T
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder{{T}}
    content.vb: Public Function FromMessage(Of T)(message As IMessage(Of T)) As IMessageBuilder(Of T)
  overload: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage*
  implements:
  - Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{{T}})
  nameWithType.vb: DefaultMessageBuilderFactory.FromMessage(Of T)(IMessage(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage(Of T)(Steeltoe.Messaging.IMessage(Of T))
  name.vb: FromMessage(Of T)(IMessage(Of T))
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  id: FromMessage(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage)
  nameWithType: DefaultMessageBuilderFactory.FromMessage(IMessage)
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
    startLine: 27
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Support
  syntax:
    content: public IMessageBuilder FromMessage(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder
    content.vb: Public Function FromMessage(message As IMessage) As IMessageBuilder
  overload: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage*
  implements:
  - Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload``1(``0)
  commentId: M:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload``1(``0)
  id: WithPayload``1(``0)
  parent: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: WithPayload<T>(T)
  nameWithType: DefaultMessageBuilderFactory.WithPayload<T>(T)
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload<T>(T)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithPayload
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
    startLine: 33
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Support
  syntax:
    content: public IMessageBuilder<T> WithPayload<T>(T payload)
    parameters:
    - id: payload
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder{{T}}
    content.vb: Public Function WithPayload(Of T)(payload As T) As IMessageBuilder(Of T)
  overload: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload*
  implements:
  - Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1({T})
  nameWithType.vb: DefaultMessageBuilderFactory.WithPayload(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload(Of T)(T)
  name.vb: WithPayload(Of T)(T)
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload(System.Object)
  commentId: M:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload(System.Object)
  id: WithPayload(System.Object)
  parent: Steeltoe.Integration.Support.DefaultMessageBuilderFactory
  langs:
  - csharp
  - vb
  name: WithPayload(Object)
  nameWithType: DefaultMessageBuilderFactory.WithPayload(Object)
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload(System.Object)
  type: Method
  source:
    remote:
      path: src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithPayload
    path: ../Steeltoe/src/Integration/src/IntegrationBase/Support/DefaultMessageBuilderFactory.cs
    startLine: 39
  assemblies:
  - Steeltoe.Integration.IntegrationBase
  namespace: Steeltoe.Integration.Support
  syntax:
    content: public IMessageBuilder WithPayload(object payload)
    parameters:
    - id: payload
      type: System.Object
    return:
      type: Steeltoe.Integration.Support.IMessageBuilder
    content.vb: Public Function WithPayload(payload As Object) As IMessageBuilder
  overload: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload*
  implements:
  - Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Integration.Support
  commentId: N:Steeltoe.Integration.Support
  name: Steeltoe.Integration.Support
  nameWithType: Steeltoe.Integration.Support
  fullName: Steeltoe.Integration.Support
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory
  commentId: T:Steeltoe.Integration.Support.IMessageBuilderFactory
  parent: Steeltoe.Integration.Support
  name: IMessageBuilderFactory
  nameWithType: IMessageBuilderFactory
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders*
  commentId: Overload:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders
  name: ReadOnlyHeaders
  nameWithType: DefaultMessageBuilderFactory.ReadOnlyHeaders
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.ReadOnlyHeaders
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders*
  commentId: Overload:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders
  name: AddReadOnlyHeaders
  nameWithType: DefaultMessageBuilderFactory.AddReadOnlyHeaders
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.AddReadOnlyHeaders
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage*
  commentId: Overload:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage
  name: FromMessage
  nameWithType: DefaultMessageBuilderFactory.FromMessage
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.FromMessage
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{{T}})
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  definition: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  name: FromMessage<T>(IMessage<T>)
  nameWithType: IMessageBuilderFactory.FromMessage<T>(IMessage<T>)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage<T>(Steeltoe.Messaging.IMessage<T>)
  nameWithType.vb: IMessageBuilderFactory.FromMessage(Of T)(IMessage(Of T))
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Of T)(Steeltoe.Messaging.IMessage(Of T))
  name.vb: FromMessage(Of T)(IMessage(Of T))
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
    name: FromMessage<T>
    nameWithType: IMessageBuilderFactory.FromMessage<T>
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
    name: FromMessage(Of T)
    nameWithType: IMessageBuilderFactory.FromMessage(Of T)
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage{{T}}
  commentId: T:Steeltoe.Messaging.IMessage{``0}
  parent: Steeltoe.Messaging
  definition: Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Integration.Support.IMessageBuilder{{T}}
  commentId: T:Steeltoe.Integration.Support.IMessageBuilder{``0}
  parent: Steeltoe.Integration.Support
  definition: Steeltoe.Integration.Support.IMessageBuilder`1
  name: IMessageBuilder<T>
  nameWithType: IMessageBuilder<T>
  fullName: Steeltoe.Integration.Support.IMessageBuilder<T>
  nameWithType.vb: IMessageBuilder(Of T)
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilder(Of T)
  name.vb: IMessageBuilder(Of T)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  name: FromMessage<T>(IMessage<T>)
  nameWithType: IMessageBuilderFactory.FromMessage<T>(IMessage<T>)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage<T>(Steeltoe.Messaging.IMessage<T>)
  nameWithType.vb: IMessageBuilderFactory.FromMessage(Of T)(IMessage(Of T))
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Of T)(Steeltoe.Messaging.IMessage(Of T))
  name.vb: FromMessage(Of T)(IMessage(Of T))
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
    name: FromMessage<T>
    nameWithType: IMessageBuilderFactory.FromMessage<T>
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
    name: FromMessage(Of T)
    nameWithType: IMessageBuilderFactory.FromMessage(Of T)
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage`1
  commentId: T:Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Integration.Support.IMessageBuilder`1
  commentId: T:Steeltoe.Integration.Support.IMessageBuilder`1
  parent: Steeltoe.Integration.Support
  name: IMessageBuilder<T>
  nameWithType: IMessageBuilder<T>
  fullName: Steeltoe.Integration.Support.IMessageBuilder<T>
  nameWithType.vb: IMessageBuilder(Of T)
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilder(Of T)
  name.vb: IMessageBuilder(Of T)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilder`1
    name: IMessageBuilder
    nameWithType: IMessageBuilder
    fullName: Steeltoe.Integration.Support.IMessageBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  name: FromMessage(IMessage)
  nameWithType: IMessageBuilderFactory.FromMessage(IMessage)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
    name: FromMessage
    nameWithType: IMessageBuilderFactory.FromMessage
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage(Steeltoe.Messaging.IMessage)
    name: FromMessage
    nameWithType: IMessageBuilderFactory.FromMessage
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: Steeltoe.Integration.Support.IMessageBuilder
  commentId: T:Steeltoe.Integration.Support.IMessageBuilder
  parent: Steeltoe.Integration.Support
  name: IMessageBuilder
  nameWithType: IMessageBuilder
  fullName: Steeltoe.Integration.Support.IMessageBuilder
- uid: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload*
  commentId: Overload:Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload
  name: WithPayload
  nameWithType: DefaultMessageBuilderFactory.WithPayload
  fullName: Steeltoe.Integration.Support.DefaultMessageBuilderFactory.WithPayload
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1({T})
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  definition: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
  name: WithPayload<T>(T)
  nameWithType: IMessageBuilderFactory.WithPayload<T>(T)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload<T>(T)
  nameWithType.vb: IMessageBuilderFactory.WithPayload(Of T)(T)
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(Of T)(T)
  name.vb: WithPayload(Of T)(T)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
    name: WithPayload<T>
    nameWithType: IMessageBuilderFactory.WithPayload<T>
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
    name: WithPayload(Of T)
    nameWithType: IMessageBuilderFactory.WithPayload(Of T)
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
  name: WithPayload<T>(T)
  nameWithType: IMessageBuilderFactory.WithPayload<T>(T)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload<T>(T)
  nameWithType.vb: IMessageBuilderFactory.WithPayload(Of T)(T)
  fullName.vb: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(Of T)(T)
  name.vb: WithPayload(Of T)(T)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
    name: WithPayload<T>
    nameWithType: IMessageBuilderFactory.WithPayload<T>
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload``1(``0)
    name: WithPayload(Of T)
    nameWithType: IMessageBuilderFactory.WithPayload(Of T)
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  commentId: M:Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  parent: Steeltoe.Integration.Support.IMessageBuilderFactory
  isExternal: true
  name: WithPayload(Object)
  nameWithType: IMessageBuilderFactory.WithPayload(Object)
  fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
  spec.csharp:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
    name: WithPayload
    nameWithType: IMessageBuilderFactory.WithPayload
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload(System.Object)
    name: WithPayload
    nameWithType: IMessageBuilderFactory.WithPayload
    fullName: Steeltoe.Integration.Support.IMessageBuilderFactory.WithPayload
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
