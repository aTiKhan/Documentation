### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  commentId: T:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  id: IInvocableHandlerMethod
  parent: Steeltoe.Messaging.Handler.Invocation
  children:
  - Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean
  - Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  - Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid
  - Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method
  - Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage
  langs:
  - csharp
  - vb
  name: IInvocableHandlerMethod
  nameWithType: IInvocableHandlerMethod
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  type: Interface
  source:
    remote:
      path: src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IInvocableHandlerMethod
    path: ../Steeltoe/src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
    startLine: 11
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Handler.Invocation
  summary: "\nInvokes the underlying method with argument values resolved from the current message.\n"
  example: []
  syntax:
    content: public interface IInvocableHandlerMethod
    content.vb: Public Interface IInvocableHandlerMethod
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean
  commentId: P:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean
  id: Bean
  parent: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  langs:
  - csharp
  - vb
  name: Bean
  nameWithType: IInvocableHandlerMethod.Bean
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean
  type: Property
  source:
    remote:
      path: src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Bean
    path: ../Steeltoe/src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: object Bean { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly Property Bean As Object
  overload: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method
  commentId: P:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method
  id: Method
  parent: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: IInvocableHandlerMethod.Method
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method
  type: Property
  source:
    remote:
      path: src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Method
    path: ../Steeltoe/src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
    startLine: 15
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Handler.Invocation
  syntax:
    content: MethodInfo Method { get; }
    parameters: []
    return:
      type: System.Reflection.MethodInfo
    content.vb: ReadOnly Property Method As MethodInfo
  overload: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid
  commentId: P:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid
  id: IsVoid
  parent: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  langs:
  - csharp
  - vb
  name: IsVoid
  nameWithType: IInvocableHandlerMethod.IsVoid
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid
  type: Property
  source:
    remote:
      path: src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsVoid
    path: ../Steeltoe/src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
    startLine: 20
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Handler.Invocation
  summary: "\nGets a value indicating whether the return type of the method is void\n"
  example: []
  syntax:
    content: bool IsVoid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsVoid As Boolean
  overload: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage
  commentId: P:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage
  id: ShortLogMessage
  parent: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  langs:
  - csharp
  - vb
  name: ShortLogMessage
  nameWithType: IInvocableHandlerMethod.ShortLogMessage
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage
  type: Property
  source:
    remote:
      path: src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ShortLogMessage
    path: ../Steeltoe/src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
    startLine: 25
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Handler.Invocation
  summary: "\nGets a value for message logging (TODO: Look to remove)\n"
  example: []
  syntax:
    content: string ShortLogMessage { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ShortLogMessage As String
  overload: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  commentId: M:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  id: Invoke(Steeltoe.Messaging.IMessage,System.Object[])
  parent: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
  langs:
  - csharp
  - vb
  name: Invoke(IMessage, Object[])
  nameWithType: IInvocableHandlerMethod.Invoke(IMessage, Object[])
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke(Steeltoe.Messaging.IMessage, System.Object[])
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Invoke
    path: ../Steeltoe/src/Messaging/src/Abstractions/Handler/Invocation/IInvocableHandlerMethod.cs
    startLine: 33
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging.Handler.Invocation
  summary: "\nInvoke the underlying method after resolving its argument values in the context of the given message.\n"
  example: []
  syntax:
    content: object Invoke(IMessage requestMessage, params object[] args)
    parameters:
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
      description: the message being processed
    - id: args
      type: System.Object[]
      description: given arguments matched by type, not resolved
    return:
      type: System.Object
      description: the raw value returned from the invoked method
    content.vb: Function Invoke(requestMessage As IMessage, ParamArray args As Object()) As Object
  overload: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke*
  nameWithType.vb: IInvocableHandlerMethod.Invoke(IMessage, Object())
  fullName.vb: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke(Steeltoe.Messaging.IMessage, System.Object())
  name.vb: Invoke(IMessage, Object())
references:
- uid: Steeltoe.Messaging.Handler.Invocation
  commentId: N:Steeltoe.Messaging.Handler.Invocation
  name: Steeltoe.Messaging.Handler.Invocation
  nameWithType: Steeltoe.Messaging.Handler.Invocation
  fullName: Steeltoe.Messaging.Handler.Invocation
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean
  name: Bean
  nameWithType: IInvocableHandlerMethod.Bean
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Bean
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method
  name: Method
  nameWithType: IInvocableHandlerMethod.Method
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Method
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid
  name: IsVoid
  nameWithType: IInvocableHandlerMethod.IsVoid
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.IsVoid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage
  name: ShortLogMessage
  nameWithType: IInvocableHandlerMethod.ShortLogMessage
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.ShortLogMessage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke*
  commentId: Overload:Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke
  name: Invoke
  nameWithType: IInvocableHandlerMethod.Invoke
  fullName: Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod.Invoke
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
