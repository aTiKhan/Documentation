### YamlMime:ManagedReference
items:
- uid: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions
  commentId: T:Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions
  id: MySqlProviderServiceCollectionExtensions
  parent: Steeltoe.Connector.MySql
  children:
  - Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection,IConfiguration,ServiceLifetime,System.Boolean)
  - Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection,IConfiguration,System.String,ServiceLifetime,System.Boolean)
  langs:
  - csharp
  - vb
  name: MySqlProviderServiceCollectionExtensions
  nameWithType: MySqlProviderServiceCollectionExtensions
  fullName: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: src/Connectors/src/ConnectorCore/MySqlProviderServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MySqlProviderServiceCollectionExtensions
    path: ../Steeltoe/src/Connectors/src/ConnectorCore/MySqlProviderServiceCollectionExtensions.cs
    startLine: 17
  assemblies:
  - Steeltoe.Connector.ConnectorCore
  namespace: Steeltoe.Connector.MySql
  syntax:
    content: public static class MySqlProviderServiceCollectionExtensions
    content.vb: Public Module MySqlProviderServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection,IConfiguration,ServiceLifetime,System.Boolean)
  commentId: M:Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection,IConfiguration,ServiceLifetime,System.Boolean)
  id: AddMySqlConnection(IServiceCollection,IConfiguration,ServiceLifetime,System.Boolean)
  isExtensionMethod: true
  parent: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddMySqlConnection(IServiceCollection, IConfiguration, ServiceLifetime, Boolean)
  nameWithType: MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection, IConfiguration, ServiceLifetime, Boolean)
  fullName: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection, IConfiguration, ServiceLifetime, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Connectors/src/ConnectorCore/MySqlProviderServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddMySqlConnection
    path: ../Steeltoe/src/Connectors/src/ConnectorCore/MySqlProviderServiceCollectionExtensions.cs
    startLine: 28
  assemblies:
  - Steeltoe.Connector.ConnectorCore
  namespace: Steeltoe.Connector.MySql
  summary: "\nAdd MySql and its IHealthContributor to a ServiceCollection\n"
  remarks: MySqlConnection is retrievable as both MySqlConnection and IDbConnection
  example: []
  syntax:
    content: public static IServiceCollection AddMySqlConnection(this IServiceCollection services, IConfiguration config, ServiceLifetime contextLifetime = null, bool addSteeltoeHealthChecks = false)
    parameters:
    - id: services
      type: IServiceCollection
      description: Service collection to add to
    - id: config
      type: IConfiguration
      description: App configuration
    - id: contextLifetime
      type: ServiceLifetime
      description: Lifetime of the service to inject
    - id: addSteeltoeHealthChecks
      type: System.Boolean
      description: Add steeltoeHealth checks even if community health checks exist
    return:
      type: IServiceCollection
      description: IServiceCollection for chaining
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddMySqlConnection(services As IServiceCollection, config As IConfiguration, contextLifetime As ServiceLifetime = Nothing, addSteeltoeHealthChecks As Boolean = False) As IServiceCollection
  overload: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection,IConfiguration,System.String,ServiceLifetime,System.Boolean)
  commentId: M:Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection,IConfiguration,System.String,ServiceLifetime,System.Boolean)
  id: AddMySqlConnection(IServiceCollection,IConfiguration,System.String,ServiceLifetime,System.Boolean)
  isExtensionMethod: true
  parent: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddMySqlConnection(IServiceCollection, IConfiguration, String, ServiceLifetime, Boolean)
  nameWithType: MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection, IConfiguration, String, ServiceLifetime, Boolean)
  fullName: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection(IServiceCollection, IConfiguration, System.String, ServiceLifetime, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Connectors/src/ConnectorCore/MySqlProviderServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddMySqlConnection
    path: ../Steeltoe/src/Connectors/src/ConnectorCore/MySqlProviderServiceCollectionExtensions.cs
    startLine: 56
  assemblies:
  - Steeltoe.Connector.ConnectorCore
  namespace: Steeltoe.Connector.MySql
  summary: "\nAdd MySql and its IHealthContributor to a ServiceCollection.\n"
  remarks: MySqlConnection is retrievable as both MySqlConnection and IDbConnection
  example: []
  syntax:
    content: public static IServiceCollection AddMySqlConnection(this IServiceCollection services, IConfiguration config, string serviceName, ServiceLifetime contextLifetime = null, bool addSteeltoeHealthChecks = false)
    parameters:
    - id: services
      type: IServiceCollection
      description: Service collection to add to
    - id: config
      type: IConfiguration
      description: App configuration
    - id: serviceName
      type: System.String
      description: cloud foundry service name binding
    - id: contextLifetime
      type: ServiceLifetime
      description: Lifetime of the service to inject
    - id: addSteeltoeHealthChecks
      type: System.Boolean
      description: Add steeltoeHealth checks even if community health checks exist
    return:
      type: IServiceCollection
      description: IServiceCollection for chaining
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddMySqlConnection(services As IServiceCollection, config As IConfiguration, serviceName As String, contextLifetime As ServiceLifetime = Nothing, addSteeltoeHealthChecks As Boolean = False) As IServiceCollection
  overload: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Connector.MySql
  commentId: N:Steeltoe.Connector.MySql
  name: Steeltoe.Connector.MySql
  nameWithType: Steeltoe.Connector.MySql
  fullName: Steeltoe.Connector.MySql
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection*
  commentId: Overload:Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection
  name: AddMySqlConnection
  nameWithType: MySqlProviderServiceCollectionExtensions.AddMySqlConnection
  fullName: Steeltoe.Connector.MySql.MySqlProviderServiceCollectionExtensions.AddMySqlConnection
- uid: IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: IServiceCollection
- uid: IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: IConfiguration
- uid: ServiceLifetime
  isExternal: true
  name: ServiceLifetime
  nameWithType: ServiceLifetime
  fullName: ServiceLifetime
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
