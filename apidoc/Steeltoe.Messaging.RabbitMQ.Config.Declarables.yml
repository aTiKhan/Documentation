### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.Declarables
  id: Declarables
  parent: Steeltoe.Messaging.RabbitMQ.Config
  children:
  - Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor(System.String,Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[])
  - Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor(System.String,System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable})
  - Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList
  - Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType``1
  - Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName
  langs:
  - csharp
  - vb
  name: Declarables
  nameWithType: Declarables
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/Declarables.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Declarables
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/Declarables.cs
    startLine: 11
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: 'public class Declarables : IServiceNameAware'
    content.vb: >-
      Public Class Declarables

          Implements IServiceNameAware
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Common.Services.IServiceNameAware
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor(System.String,Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[])
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor(System.String,Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[])
  id: '#ctor(System.String,Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[])'
  parent: Steeltoe.Messaging.RabbitMQ.Config.Declarables
  langs:
  - csharp
  - vb
  name: Declarables(String, IDeclarable[])
  nameWithType: Declarables.Declarables(String, IDeclarable[])
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.Declarables(System.String, Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[])
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/Declarables.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/Declarables.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public Declarables(string name, params IDeclarable[] declarables)
    parameters:
    - id: name
      type: System.String
    - id: declarables
      type: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[]
    content.vb: Public Sub New(name As String, ParamArray declarables As IDeclarable())
  overload: Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor*
  nameWithType.vb: Declarables.Declarables(String, IDeclarable())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.Declarables.Declarables(System.String, Steeltoe.Messaging.RabbitMQ.Config.IDeclarable())
  name.vb: Declarables(String, IDeclarable())
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor(System.String,System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor(System.String,System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable})
  id: '#ctor(System.String,System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable})'
  parent: Steeltoe.Messaging.RabbitMQ.Config.Declarables
  langs:
  - csharp
  - vb
  name: Declarables(String, List<IDeclarable>)
  nameWithType: Declarables.Declarables(String, List<IDeclarable>)
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.Declarables(System.String, System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Config.IDeclarable>)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/Declarables.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/Declarables.cs
    startLine: 29
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public Declarables(string name, List<IDeclarable> declarables)
    parameters:
    - id: name
      type: System.String
    - id: declarables
      type: System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable}
    content.vb: Public Sub New(name As String, declarables As List(Of IDeclarable))
  overload: Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor*
  nameWithType.vb: Declarables.Declarables(String, List(Of IDeclarable))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.Declarables.Declarables(System.String, System.Collections.Generic.List(Of Steeltoe.Messaging.RabbitMQ.Config.IDeclarable))
  name.vb: Declarables(String, List(Of IDeclarable))
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList
  id: DeclarableList
  parent: Steeltoe.Messaging.RabbitMQ.Config.Declarables
  langs:
  - csharp
  - vb
  name: DeclarableList
  nameWithType: Declarables.DeclarableList
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/Declarables.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DeclarableList
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/Declarables.cs
    startLine: 45
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public List<IDeclarable> DeclarableList { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable}
    content.vb: Public ReadOnly Property DeclarableList As List(Of IDeclarable)
  overload: Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName
  commentId: P:Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName
  id: ServiceName
  parent: Steeltoe.Messaging.RabbitMQ.Config.Declarables
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: Declarables.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/Declarables.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceName
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/Declarables.cs
    startLine: 47
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public string ServiceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ServiceName As String
  overload: Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName*
  implements:
  - Steeltoe.Common.Services.IServiceNameAware.ServiceName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType``1
  commentId: M:Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType``1
  id: GetDeclarablesByType``1
  parent: Steeltoe.Messaging.RabbitMQ.Config.Declarables
  langs:
  - csharp
  - vb
  name: GetDeclarablesByType<T>()
  nameWithType: Declarables.GetDeclarablesByType<T>()
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType<T>()
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Config/Declarables.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDeclarablesByType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Config/Declarables.cs
    startLine: 49
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Config
  syntax:
    content: public IEnumerable<T> GetDeclarablesByType<T>()
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetDeclarablesByType(Of T) As IEnumerable(Of T)
  overload: Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType*
  nameWithType.vb: Declarables.GetDeclarablesByType(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType(Of T)()
  name.vb: GetDeclarablesByType(Of T)()
references:
- uid: Steeltoe.Messaging.RabbitMQ.Config
  commentId: N:Steeltoe.Messaging.RabbitMQ.Config
  name: Steeltoe.Messaging.RabbitMQ.Config
  nameWithType: Steeltoe.Messaging.RabbitMQ.Config
  fullName: Steeltoe.Messaging.RabbitMQ.Config
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Common.Services.IServiceNameAware
  commentId: T:Steeltoe.Common.Services.IServiceNameAware
  parent: Steeltoe.Common.Services
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: Steeltoe.Common.Services.IServiceNameAware
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Services
  commentId: N:Steeltoe.Common.Services
  name: Steeltoe.Common.Services
  nameWithType: Steeltoe.Common.Services
  fullName: Steeltoe.Common.Services
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.Declarables.#ctor
  name: Declarables
  nameWithType: Declarables.Declarables
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.Declarables
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[]
  isExternal: true
  name: IDeclarable[]
  nameWithType: IDeclarable[]
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[]
  nameWithType.vb: IDeclarable()
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable()
  name.vb: IDeclarable()
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
    name: IDeclarable
    nameWithType: IDeclarable
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
    name: IDeclarable
    nameWithType: IDeclarable
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable}
  commentId: T:System.Collections.Generic.List{Steeltoe.Messaging.RabbitMQ.Config.IDeclarable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IDeclarable>
  nameWithType: List<IDeclarable>
  fullName: System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Config.IDeclarable>
  nameWithType.vb: List(Of IDeclarable)
  fullName.vb: System.Collections.Generic.List(Of Steeltoe.Messaging.RabbitMQ.Config.IDeclarable)
  name.vb: List(Of IDeclarable)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
    name: IDeclarable
    nameWithType: IDeclarable
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
    name: IDeclarable
    nameWithType: IDeclarable
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList
  name: DeclarableList
  nameWithType: Declarables.DeclarableList
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName
  name: ServiceName
  nameWithType: Declarables.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName
- uid: Steeltoe.Common.Services.IServiceNameAware.ServiceName
  commentId: P:Steeltoe.Common.Services.IServiceNameAware.ServiceName
  parent: Steeltoe.Common.Services.IServiceNameAware
  name: ServiceName
  nameWithType: IServiceNameAware.ServiceName
  fullName: Steeltoe.Common.Services.IServiceNameAware.ServiceName
- uid: Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType
  name: GetDeclarablesByType
  nameWithType: Declarables.GetDeclarablesByType
  fullName: Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
