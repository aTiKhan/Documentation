### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Converter.ConversionUtils
  commentId: T:Steeltoe.Common.Converter.ConversionUtils
  id: ConversionUtils
  parent: Steeltoe.Common.Converter
  children:
  - Steeltoe.Common.Converter.ConversionUtils.CanConvertElements(System.Type,System.Type,Steeltoe.Common.Converter.IConversionService)
  - Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.Count(System.Collections.IEnumerable)
  - Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable(System.Type,System.Type[])
  - Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.GetElementType(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable(System.Type,System.String,System.Type[])
  - Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType(System.Type)
  - Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod(System.Type,System.String,System.Type[])
  - Steeltoe.Common.Converter.ConversionUtils.ToString(System.Collections.IEnumerable,System.Type,Steeltoe.Common.Converter.IConversionService)
  langs:
  - csharp
  - vb
  name: ConversionUtils
  nameWithType: ConversionUtils
  fullName: Steeltoe.Common.Converter.ConversionUtils
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConversionUtils
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 12
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static class ConversionUtils
    content.vb: Public Module ConversionUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Common.Converter.ConversionUtils.CanConvertElements(System.Type,System.Type,Steeltoe.Common.Converter.IConversionService)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.CanConvertElements(System.Type,System.Type,Steeltoe.Common.Converter.IConversionService)
  id: CanConvertElements(System.Type,System.Type,Steeltoe.Common.Converter.IConversionService)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: CanConvertElements(Type, Type, IConversionService)
  nameWithType: ConversionUtils.CanConvertElements(Type, Type, IConversionService)
  fullName: Steeltoe.Common.Converter.ConversionUtils.CanConvertElements(System.Type, System.Type, Steeltoe.Common.Converter.IConversionService)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanConvertElements
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 16
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static bool CanConvertElements(Type sourceElementType, Type targetElementType, IConversionService conversionService)
    parameters:
    - id: sourceElementType
      type: System.Type
    - id: targetElementType
      type: System.Type
    - id: conversionService
      type: Steeltoe.Common.Converter.IConversionService
    return:
      type: System.Boolean
    content.vb: Public Shared Function CanConvertElements(sourceElementType As Type, targetElementType As Type, conversionService As IConversionService) As Boolean
  overload: Steeltoe.Common.Converter.ConversionUtils.CanConvertElements*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.GetElementType(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.GetElementType(System.Type)
  id: GetElementType(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: GetElementType(Type)
  nameWithType: ConversionUtils.GetElementType(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetElementType(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetElementType
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 46
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static Type GetElementType(Type sourceType)
    parameters:
    - id: sourceType
      type: System.Type
    return:
      type: System.Type
    content.vb: Public Shared Function GetElementType(sourceType As Type) As Type
  overload: Steeltoe.Common.Converter.ConversionUtils.GetElementType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.ToString(System.Collections.IEnumerable,System.Type,Steeltoe.Common.Converter.IConversionService)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.ToString(System.Collections.IEnumerable,System.Type,Steeltoe.Common.Converter.IConversionService)
  id: ToString(System.Collections.IEnumerable,System.Type,Steeltoe.Common.Converter.IConversionService)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: ToString(IEnumerable, Type, IConversionService)
  nameWithType: ConversionUtils.ToString(IEnumerable, Type, IConversionService)
  fullName: Steeltoe.Common.Converter.ConversionUtils.ToString(System.Collections.IEnumerable, System.Type, Steeltoe.Common.Converter.IConversionService)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToString
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 61
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static string ToString(IEnumerable collection, Type targetType, IConversionService conversionService)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
    - id: targetType
      type: System.Type
    - id: conversionService
      type: Steeltoe.Common.Converter.IConversionService
    return:
      type: System.String
    content.vb: Public Shared Function ToString(collection As IEnumerable, targetType As Type, conversionService As IConversionService) As String
  overload: Steeltoe.Common.Converter.ConversionUtils.ToString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.Count(System.Collections.IEnumerable)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.Count(System.Collections.IEnumerable)
  id: Count(System.Collections.IEnumerable)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: Count(IEnumerable)
  nameWithType: ConversionUtils.Count(IEnumerable)
  fullName: Steeltoe.Common.Converter.ConversionUtils.Count(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Count
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 74
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static int Count(IEnumerable enumerable)
    parameters:
    - id: enumerable
      type: System.Collections.IEnumerable
    return:
      type: System.Int32
    content.vb: Public Shared Function Count(enumerable As IEnumerable) As Integer
  overload: Steeltoe.Common.Converter.ConversionUtils.Count*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType(System.Type)
  id: GetNullableElementType(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: GetNullableElementType(Type)
  nameWithType: ConversionUtils.GetNullableElementType(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetNullableElementType
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 90
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static Type GetNullableElementType(Type nullable)
    parameters:
    - id: nullable
      type: System.Type
    return:
      type: System.Type
    content.vb: Public Shared Function GetNullableElementType(nullable As Type) As Type
  overload: Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor(System.Type)
  id: CanCreateCompatListFor(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: CanCreateCompatListFor(Type)
  nameWithType: ConversionUtils.CanCreateCompatListFor(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanCreateCompatListFor
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 100
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static bool CanCreateCompatListFor(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function CanCreateCompatListFor(type As Type) As Boolean
  overload: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor(System.Type)
  id: CanCreateCompatDictionaryFor(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: CanCreateCompatDictionaryFor(Type)
  nameWithType: ConversionUtils.CanCreateCompatDictionaryFor(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanCreateCompatDictionaryFor
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 146
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static bool CanCreateCompatDictionaryFor(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function CanCreateCompatDictionaryFor(type As Type) As Boolean
  overload: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType(System.Type)
  id: GetDictionaryKeyType(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: GetDictionaryKeyType(Type)
  nameWithType: ConversionUtils.GetDictionaryKeyType(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDictionaryKeyType
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 187
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static Type GetDictionaryKeyType(Type sourceType)
    parameters:
    - id: sourceType
      type: System.Type
    return:
      type: System.Type
    content.vb: Public Shared Function GetDictionaryKeyType(sourceType As Type) As Type
  overload: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType(System.Type)
  id: GetDictionaryValueType(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: GetDictionaryValueType(Type)
  nameWithType: ConversionUtils.GetDictionaryValueType(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDictionaryValueType
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 192
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static Type GetDictionaryValueType(Type sourceType)
    parameters:
    - id: sourceType
      type: System.Type
    return:
      type: System.Type
    content.vb: Public Shared Function GetDictionaryValueType(sourceType As Type) As Type
  overload: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor(System.Type)
  id: ContainsPublicNoArgConstructor(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: ContainsPublicNoArgConstructor(Type)
  nameWithType: ConversionUtils.ContainsPublicNoArgConstructor(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ContainsPublicNoArgConstructor
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 197
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static bool ContainsPublicNoArgConstructor(Type collectionType)
    parameters:
    - id: collectionType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function ContainsPublicNoArgConstructor(collectionType As Type) As Boolean
  overload: Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor(System.Type)
  id: CreateCompatListFor(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: CreateCompatListFor(Type)
  nameWithType: ConversionUtils.CreateCompatListFor(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateCompatListFor
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 207
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static IList CreateCompatListFor(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.IList
    content.vb: Public Shared Function CreateCompatListFor(type As Type) As IList
  overload: Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor(System.Type)
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor(System.Type)
  id: CreateCompatDictionaryFor(System.Type)
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: CreateCompatDictionaryFor(Type)
  nameWithType: ConversionUtils.CreateCompatDictionaryFor(Type)
  fullName: Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor(System.Type)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateCompatDictionaryFor
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 248
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static IDictionary CreateCompatDictionaryFor(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.IDictionary
    content.vb: Public Shared Function CreateCompatDictionaryFor(type As Type) As IDictionary
  overload: Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable(System.Type,System.Type[])
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable(System.Type,System.Type[])
  id: GetConstructorIfAvailable(System.Type,System.Type[])
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: GetConstructorIfAvailable(Type, Type[])
  nameWithType: ConversionUtils.GetConstructorIfAvailable(Type, Type[])
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable(System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetConstructorIfAvailable
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 284
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static ConstructorInfo GetConstructorIfAvailable(Type clazz, params Type[] paramTypes)
    parameters:
    - id: clazz
      type: System.Type
    - id: paramTypes
      type: System.Type[]
    return:
      type: System.Reflection.ConstructorInfo
    content.vb: Public Shared Function GetConstructorIfAvailable(clazz As Type, ParamArray paramTypes As Type()) As ConstructorInfo
  overload: Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable*
  nameWithType.vb: ConversionUtils.GetConstructorIfAvailable(Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable(System.Type, System.Type())
  name.vb: GetConstructorIfAvailable(Type, Type())
- uid: Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod(System.Type,System.String,System.Type[])
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod(System.Type,System.String,System.Type[])
  id: GetStaticMethod(System.Type,System.String,System.Type[])
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: GetStaticMethod(Type, String, Type[])
  nameWithType: ConversionUtils.GetStaticMethod(Type, String, Type[])
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod(System.Type, System.String, System.Type[])
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetStaticMethod
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 301
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static MethodInfo GetStaticMethod(Type clazz, string methodName, params Type[] args)
    parameters:
    - id: clazz
      type: System.Type
    - id: methodName
      type: System.String
    - id: args
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Shared Function GetStaticMethod(clazz As Type, methodName As String, ParamArray args As Type()) As MethodInfo
  overload: Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod*
  nameWithType.vb: ConversionUtils.GetStaticMethod(Type, String, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod(System.Type, System.String, System.Type())
  name.vb: GetStaticMethod(Type, String, Type())
- uid: Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable(System.Type,System.String,System.Type[])
  commentId: M:Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable(System.Type,System.String,System.Type[])
  id: GetMethodIfAvailable(System.Type,System.String,System.Type[])
  parent: Steeltoe.Common.Converter.ConversionUtils
  langs:
  - csharp
  - vb
  name: GetMethodIfAvailable(Type, String, Type[])
  nameWithType: ConversionUtils.GetMethodIfAvailable(Type, String, Type[])
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable(System.Type, System.String, System.Type[])
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Converter/ConversionUtils.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMethodIfAvailable
    path: ../Steeltoe/src/Common/src/Common/Converter/ConversionUtils.cs
    startLine: 324
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Converter
  syntax:
    content: public static MethodInfo GetMethodIfAvailable(Type clazz, string methodName, params Type[] paramTypes)
    parameters:
    - id: clazz
      type: System.Type
    - id: methodName
      type: System.String
    - id: paramTypes
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
    content.vb: Public Shared Function GetMethodIfAvailable(clazz As Type, methodName As String, ParamArray paramTypes As Type()) As MethodInfo
  overload: Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable*
  nameWithType.vb: ConversionUtils.GetMethodIfAvailable(Type, String, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable(System.Type, System.String, System.Type())
  name.vb: GetMethodIfAvailable(Type, String, Type())
references:
- uid: Steeltoe.Common.Converter
  commentId: N:Steeltoe.Common.Converter
  name: Steeltoe.Common.Converter
  nameWithType: Steeltoe.Common.Converter
  fullName: Steeltoe.Common.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Common.Converter.ConversionUtils.CanConvertElements*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.CanConvertElements
  name: CanConvertElements
  nameWithType: ConversionUtils.CanConvertElements
  fullName: Steeltoe.Common.Converter.ConversionUtils.CanConvertElements
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Common.Converter.IConversionService
  commentId: T:Steeltoe.Common.Converter.IConversionService
  parent: Steeltoe.Common.Converter
  name: IConversionService
  nameWithType: IConversionService
  fullName: Steeltoe.Common.Converter.IConversionService
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Converter.ConversionUtils.GetElementType*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.GetElementType
  name: GetElementType
  nameWithType: ConversionUtils.GetElementType
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetElementType
- uid: Steeltoe.Common.Converter.ConversionUtils.ToString*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.ToString
  name: ToString
  nameWithType: ConversionUtils.ToString
  fullName: Steeltoe.Common.Converter.ConversionUtils.ToString
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Steeltoe.Common.Converter.ConversionUtils.Count*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.Count
  name: Count
  nameWithType: ConversionUtils.Count
  fullName: Steeltoe.Common.Converter.ConversionUtils.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType
  name: GetNullableElementType
  nameWithType: ConversionUtils.GetNullableElementType
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetNullableElementType
- uid: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor
  name: CanCreateCompatListFor
  nameWithType: ConversionUtils.CanCreateCompatListFor
  fullName: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatListFor
- uid: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor
  name: CanCreateCompatDictionaryFor
  nameWithType: ConversionUtils.CanCreateCompatDictionaryFor
  fullName: Steeltoe.Common.Converter.ConversionUtils.CanCreateCompatDictionaryFor
- uid: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType
  name: GetDictionaryKeyType
  nameWithType: ConversionUtils.GetDictionaryKeyType
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryKeyType
- uid: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType
  name: GetDictionaryValueType
  nameWithType: ConversionUtils.GetDictionaryValueType
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetDictionaryValueType
- uid: Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor
  name: ContainsPublicNoArgConstructor
  nameWithType: ConversionUtils.ContainsPublicNoArgConstructor
  fullName: Steeltoe.Common.Converter.ConversionUtils.ContainsPublicNoArgConstructor
- uid: Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor
  name: CreateCompatListFor
  nameWithType: ConversionUtils.CreateCompatListFor
  fullName: Steeltoe.Common.Converter.ConversionUtils.CreateCompatListFor
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor
  name: CreateCompatDictionaryFor
  nameWithType: ConversionUtils.CreateCompatDictionaryFor
  fullName: Steeltoe.Common.Converter.ConversionUtils.CreateCompatDictionaryFor
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable
  name: GetConstructorIfAvailable
  nameWithType: ConversionUtils.GetConstructorIfAvailable
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetConstructorIfAvailable
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod
  name: GetStaticMethod
  nameWithType: ConversionUtils.GetStaticMethod
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetStaticMethod
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable*
  commentId: Overload:Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable
  name: GetMethodIfAvailable
  nameWithType: ConversionUtils.GetMethodIfAvailable
  fullName: Steeltoe.Common.Converter.ConversionUtils.GetMethodIfAvailable
