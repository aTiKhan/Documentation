### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.AbstractMessageConverter
  id: AbstractMessageConverter
  parent: Steeltoe.Messaging.Converter
  children:
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor(Steeltoe.Common.Util.MimeType)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor(System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType})
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom(Steeltoe.Messaging.IMessage,System.Type)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo(System.Object,Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType(System.Object)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType(Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports(System.Type)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType(Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  langs:
  - csharp
  - vb
  name: AbstractMessageConverter
  nameWithType: AbstractMessageConverter
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractMessageConverter
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 12
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: 'public abstract class AbstractMessageConverter : ISmartMessageConverter, IMessageConverter, IServiceNameAware'
    content.vb: >-
      Public MustInherit Class AbstractMessageConverter

          Implements ISmartMessageConverter, IMessageConverter, IServiceNameAware
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Messaging.Converter.ByteArrayMessageConverter
  - Steeltoe.Messaging.Converter.NewtonJsonMessageConverter
  - Steeltoe.Messaging.Converter.StringMessageConverter
  - Steeltoe.Stream.Converter.ObjectStringMessageConverter
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter
  - Steeltoe.Messaging.Converter.IMessageConverter
  - IServiceNameAware
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor(Steeltoe.Common.Util.MimeType)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor(Steeltoe.Common.Util.MimeType)
  id: '#ctor(Steeltoe.Common.Util.MimeType)'
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: AbstractMessageConverter(MimeType)
  nameWithType: AbstractMessageConverter.AbstractMessageConverter(MimeType)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.AbstractMessageConverter(Steeltoe.Common.Util.MimeType)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 22
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected AbstractMessageConverter(MimeType supportedMimeType)
    parameters:
    - id: supportedMimeType
      type: Steeltoe.Common.Util.MimeType
    content.vb: Protected Sub New(supportedMimeType As MimeType)
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor(System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType})
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor(System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType})
  id: '#ctor(System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType})'
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: AbstractMessageConverter(ICollection<MimeType>)
  nameWithType: AbstractMessageConverter.AbstractMessageConverter(ICollection<MimeType>)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.AbstractMessageConverter(System.Collections.Generic.ICollection<Steeltoe.Common.Util.MimeType>)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 32
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected AbstractMessageConverter(ICollection<MimeType> supportedMimeTypes)
    parameters:
    - id: supportedMimeTypes
      type: System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType}
    content.vb: Protected Sub New(supportedMimeTypes As ICollection(Of MimeType))
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor*
  nameWithType.vb: AbstractMessageConverter.AbstractMessageConverter(ICollection(Of MimeType))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.Converter.AbstractMessageConverter.AbstractMessageConverter(System.Collections.Generic.ICollection(Of Steeltoe.Common.Util.MimeType))
  name.vb: AbstractMessageConverter(ICollection(Of MimeType))
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes
  commentId: P:Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes
  id: SupportedMimeTypes
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: SupportedMimeTypes
  nameWithType: AbstractMessageConverter.SupportedMimeTypes
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SupportedMimeTypes
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 42
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual ICollection<MimeType> SupportedMimeTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType}
    content.vb: Public Overridable ReadOnly Property SupportedMimeTypes As ICollection(Of MimeType)
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver
  commentId: P:Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver
  id: ContentTypeResolver
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: ContentTypeResolver
  nameWithType: AbstractMessageConverter.ContentTypeResolver
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ContentTypeResolver
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 47
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual IContentTypeResolver ContentTypeResolver { get; set; }
    parameters: []
    return:
      type: Steeltoe.Messaging.Converter.IContentTypeResolver
    content.vb: Public Overridable Property ContentTypeResolver As IContentTypeResolver
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch
  commentId: P:Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch
  id: StrictContentTypeMatch
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: StrictContentTypeMatch
  nameWithType: AbstractMessageConverter.StrictContentTypeMatch
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: StrictContentTypeMatch
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 53
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual bool StrictContentTypeMatch { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property StrictContentTypeMatch As Boolean
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass
  commentId: P:Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass
  id: SerializedPayloadClass
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: SerializedPayloadClass
  nameWithType: AbstractMessageConverter.SerializedPayloadClass
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SerializedPayloadClass
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 79
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual Type SerializedPayloadClass { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Overridable Property SerializedPayloadClass As Type
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName
  commentId: P:Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName
  id: ServiceName
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: AbstractMessageConverter.ServiceName
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 99
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public abstract string ServiceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride Property ServiceName As String
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName*
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  id: FromMessage``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage)
  nameWithType: AbstractMessageConverter.FromMessage<T>(IMessage)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 101
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual T FromMessage<T>(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function FromMessage(Of T)(message As IMessage) As T
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageConverter.FromMessage(Of T)(IMessage)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: FromMessage(Of T)(IMessage)
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  id: FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage, Object)
  nameWithType: AbstractMessageConverter.FromMessage<T>(IMessage, Object)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 106
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual T FromMessage<T>(IMessage message, object conversionHint)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: conversionHint
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function FromMessage(Of T)(message As IMessage, conversionHint As Object) As T
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  nameWithType.vb: AbstractMessageConverter.FromMessage(Of T)(IMessage, Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage, System.Object)
  name.vb: FromMessage(Of T)(IMessage, Object)
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  id: FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage, Type)
  nameWithType: AbstractMessageConverter.FromMessage(IMessage, Type)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 111
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual object FromMessage(IMessage message, Type targetClass)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Overridable Function FromMessage(message As IMessage, targetClass As Type) As Object
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  id: FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage, Type, Object)
  nameWithType: AbstractMessageConverter.FromMessage(IMessage, Type, Object)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 116
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual object FromMessage(IMessage message, Type targetClass, object conversionHint)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    - id: conversionHint
      type: System.Object
    return:
      type: System.Object
    content.vb: Public Overridable Function FromMessage(message As IMessage, targetClass As Type, conversionHint As Object) As Object
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  id: ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: ToMessage(Object, IMessageHeaders)
  nameWithType: AbstractMessageConverter.ToMessage(Object, IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 126
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual IMessage ToMessage(object payload, IMessageHeaders headers)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function ToMessage(payload As Object, headers As IMessageHeaders) As IMessage
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  id: ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: ToMessage(Object, IMessageHeaders, Object)
  nameWithType: AbstractMessageConverter.ToMessage(Object, IMessageHeaders, Object)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 131
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual IMessage ToMessage(object payload, IMessageHeaders headers, object conversionHint)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: conversionHint
      type: System.Object
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function ToMessage(payload As Object, headers As IMessageHeaders, conversionHint As Object) As IMessage
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom(Steeltoe.Messaging.IMessage,System.Type)
  id: CanConvertFrom(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: CanConvertFrom(IMessage, Type)
  nameWithType: AbstractMessageConverter.CanConvertFrom(IMessage, Type)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom(Steeltoe.Messaging.IMessage, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanConvertFrom
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 173
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual bool CanConvertFrom(IMessage message, Type targetClass)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Overridable Function CanConvertFrom(message As IMessage, targetClass As Type) As Boolean
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo(System.Object,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo(System.Object,Steeltoe.Messaging.IMessageHeaders)
  id: CanConvertTo(System.Object,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: CanConvertTo(Object, IMessageHeaders)
  nameWithType: AbstractMessageConverter.CanConvertTo(Object, IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo(System.Object, Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CanConvertTo
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 178
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public virtual bool CanConvertTo(object payload, IMessageHeaders headers = null)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: System.Boolean
    content.vb: Public Overridable Function CanConvertTo(payload As Object, headers As IMessageHeaders = Nothing) As Boolean
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType(System.Object)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType(System.Object)
  id: GetDefaultContentType(System.Object)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: GetDefaultContentType(Object)
  nameWithType: AbstractMessageConverter.GetDefaultContentType(Object)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetDefaultContentType
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 183
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual MimeType GetDefaultContentType(object payload)
    parameters:
    - id: payload
      type: System.Object
    return:
      type: Steeltoe.Common.Util.MimeType
    content.vb: Protected Overridable Function GetDefaultContentType(payload As Object) As MimeType
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType(Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType(Steeltoe.Messaging.IMessageHeaders)
  id: SupportsMimeType(Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: SupportsMimeType(IMessageHeaders)
  nameWithType: AbstractMessageConverter.SupportsMimeType(IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType(Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SupportsMimeType
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 189
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual bool SupportsMimeType(IMessageHeaders headers)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function SupportsMimeType(headers As IMessageHeaders) As Boolean
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType(Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType(Steeltoe.Messaging.IMessageHeaders)
  id: GetMimeType(Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: GetMimeType(IMessageHeaders)
  nameWithType: AbstractMessageConverter.GetMimeType(IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType(Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetMimeType
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 213
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual MimeType GetMimeType(IMessageHeaders headers)
    parameters:
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: Steeltoe.Common.Util.MimeType
    content.vb: Protected Overridable Function GetMimeType(headers As IMessageHeaders) As MimeType
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports(System.Type)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports(System.Type)
  id: Supports(System.Type)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: Supports(Type)
  nameWithType: AbstractMessageConverter.Supports(Type)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports(System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Supports
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 218
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected abstract bool Supports(Type clazz)
    parameters:
    - id: clazz
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function Supports(clazz As Type) As Boolean
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  id: ConvertFromInternal(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: ConvertFromInternal(IMessage, Type, Object)
  nameWithType: AbstractMessageConverter.ConvertFromInternal(IMessage, Type, Object)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal(Steeltoe.Messaging.IMessage, System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertFromInternal
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 220
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual object ConvertFromInternal(IMessage message, Type targetClass, object conversionHint)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    - id: conversionHint
      type: System.Object
    return:
      type: System.Object
    content.vb: Protected Overridable Function ConvertFromInternal(message As IMessage, targetClass As Type, conversionHint As Object) As Object
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  id: ConvertToInternal(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  parent: Steeltoe.Messaging.Converter.AbstractMessageConverter
  langs:
  - csharp
  - vb
  name: ConvertToInternal(Object, IMessageHeaders, Object)
  nameWithType: AbstractMessageConverter.ConvertToInternal(Object, IMessageHeaders, Object)
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertToInternal
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/AbstractMessageConverter.cs
    startLine: 225
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: protected virtual object ConvertToInternal(object payload, IMessageHeaders headers, object conversionHint)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: conversionHint
      type: System.Object
    return:
      type: System.Object
    content.vb: Protected Overridable Function ConvertToInternal(payload As Object, headers As IMessageHeaders, conversionHint As Object) As Object
  overload: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Steeltoe.Messaging.Converter
  commentId: N:Steeltoe.Messaging.Converter
  name: Steeltoe.Messaging.Converter
  nameWithType: Steeltoe.Messaging.Converter
  fullName: Steeltoe.Messaging.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.ISmartMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: ISmartMessageConverter
  nameWithType: ISmartMessageConverter
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter
- uid: Steeltoe.Messaging.Converter.IMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.IMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: IMessageConverter
  nameWithType: IMessageConverter
  fullName: Steeltoe.Messaging.Converter.IMessageConverter
- uid: IServiceNameAware
  isExternal: true
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: IServiceNameAware
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.#ctor
  name: AbstractMessageConverter
  nameWithType: AbstractMessageConverter.AbstractMessageConverter
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.AbstractMessageConverter
- uid: Steeltoe.Common.Util.MimeType
  commentId: T:Steeltoe.Common.Util.MimeType
  parent: Steeltoe.Common.Util
  name: MimeType
  nameWithType: MimeType
  fullName: Steeltoe.Common.Util.MimeType
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType}
  commentId: T:System.Collections.Generic.ICollection{Steeltoe.Common.Util.MimeType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<MimeType>
  nameWithType: ICollection<MimeType>
  fullName: System.Collections.Generic.ICollection<Steeltoe.Common.Util.MimeType>
  nameWithType.vb: ICollection(Of MimeType)
  fullName.vb: System.Collections.Generic.ICollection(Of Steeltoe.Common.Util.MimeType)
  name.vb: ICollection(Of MimeType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Common.Util.MimeType
    name: MimeType
    nameWithType: MimeType
    fullName: Steeltoe.Common.Util.MimeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Common.Util.MimeType
    name: MimeType
    nameWithType: MimeType
    fullName: Steeltoe.Common.Util.MimeType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes
  name: SupportedMimeTypes
  nameWithType: AbstractMessageConverter.SupportedMimeTypes
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportedMimeTypes
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver
  name: ContentTypeResolver
  nameWithType: AbstractMessageConverter.ContentTypeResolver
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ContentTypeResolver
- uid: Steeltoe.Messaging.Converter.IContentTypeResolver
  commentId: T:Steeltoe.Messaging.Converter.IContentTypeResolver
  parent: Steeltoe.Messaging.Converter
  name: IContentTypeResolver
  nameWithType: IContentTypeResolver
  fullName: Steeltoe.Messaging.Converter.IContentTypeResolver
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch
  name: StrictContentTypeMatch
  nameWithType: AbstractMessageConverter.StrictContentTypeMatch
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.StrictContentTypeMatch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass
  name: SerializedPayloadClass
  nameWithType: AbstractMessageConverter.SerializedPayloadClass
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.SerializedPayloadClass
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName
  name: ServiceName
  nameWithType: AbstractMessageConverter.ServiceName
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ServiceName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage
  name: FromMessage
  nameWithType: AbstractMessageConverter.FromMessage
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.FromMessage
- uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  name: FromMessage<T>(IMessage)
  nameWithType: IMessageConverter.FromMessage<T>(IMessage)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageConverter.FromMessage(Of T)(IMessage)
  fullName.vb: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: FromMessage(Of T)(IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
    name: FromMessage<T>
    nameWithType: IMessageConverter.FromMessage<T>
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
    name: FromMessage(Of T)
    nameWithType: IMessageConverter.FromMessage(Of T)
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: FromMessage<T>(IMessage, Object)
  nameWithType: ISmartMessageConverter.FromMessage<T>(IMessage, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage, System.Object)
  nameWithType.vb: ISmartMessageConverter.FromMessage(Of T)(IMessage, Object)
  fullName.vb: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage, System.Object)
  name.vb: FromMessage(Of T)(IMessage, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
    name: FromMessage<T>
    nameWithType: ISmartMessageConverter.FromMessage<T>
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
    name: FromMessage(Of T)
    nameWithType: ISmartMessageConverter.FromMessage(Of T)
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  isExternal: true
  name: FromMessage(IMessage, Type)
  nameWithType: IMessageConverter.FromMessage(IMessage, Type)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
    name: FromMessage
    nameWithType: IMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
    name: FromMessage
    nameWithType: IMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: FromMessage(IMessage, Type, Object)
  nameWithType: ISmartMessageConverter.FromMessage(IMessage, Type, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
    name: FromMessage
    nameWithType: ISmartMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
    name: FromMessage
    nameWithType: ISmartMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage
  name: ToMessage
  nameWithType: AbstractMessageConverter.ToMessage
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ToMessage
- uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  isExternal: true
  name: ToMessage(Object, IMessageHeaders)
  nameWithType: IMessageConverter.ToMessage(Object, IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
    name: ToMessage
    nameWithType: IMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
    name: ToMessage
    nameWithType: IMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: ToMessage(Object, IMessageHeaders, Object)
  nameWithType: ISmartMessageConverter.ToMessage(Object, IMessageHeaders, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
    name: ToMessage
    nameWithType: ISmartMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
    name: ToMessage
    nameWithType: ISmartMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom
  name: CanConvertFrom
  nameWithType: AbstractMessageConverter.CanConvertFrom
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertFrom
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo
  name: CanConvertTo
  nameWithType: AbstractMessageConverter.CanConvertTo
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.CanConvertTo
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType
  name: GetDefaultContentType
  nameWithType: AbstractMessageConverter.GetDefaultContentType
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetDefaultContentType
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType
  name: SupportsMimeType
  nameWithType: AbstractMessageConverter.SupportsMimeType
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.SupportsMimeType
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType
  name: GetMimeType
  nameWithType: AbstractMessageConverter.GetMimeType
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.GetMimeType
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports
  name: Supports
  nameWithType: AbstractMessageConverter.Supports
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.Supports
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal
  name: ConvertFromInternal
  nameWithType: AbstractMessageConverter.ConvertFromInternal
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertFromInternal
- uid: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal*
  commentId: Overload:Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal
  name: ConvertToInternal
  nameWithType: AbstractMessageConverter.ConvertToInternal
  fullName: Steeltoe.Messaging.Converter.AbstractMessageConverter.ConvertToInternal
