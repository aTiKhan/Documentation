### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.IClassifier`2
  commentId: T:Steeltoe.Common.Util.IClassifier`2
  id: IClassifier`2
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.IClassifier`2.Classify(`0)
  langs:
  - csharp
  - vb
  name: IClassifier<C, T>
  nameWithType: IClassifier<C, T>
  fullName: Steeltoe.Common.Util.IClassifier<C, T>
  type: Interface
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IClassifier
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IClassifier.cs
    startLine: 6
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: public interface IClassifier<in C, out T>
    typeParameters:
    - id: C
    - id: T
    content.vb: Public Interface IClassifier(Of In C, Out T)
  nameWithType.vb: IClassifier(Of C, T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of C, T)
  name.vb: IClassifier(Of C, T)
- uid: Steeltoe.Common.Util.IClassifier`2.Classify(`0)
  commentId: M:Steeltoe.Common.Util.IClassifier`2.Classify(`0)
  id: Classify(`0)
  parent: Steeltoe.Common.Util.IClassifier`2
  langs:
  - csharp
  - vb
  name: Classify(C)
  nameWithType: IClassifier<C, T>.Classify(C)
  fullName: Steeltoe.Common.Util.IClassifier<C, T>.Classify(C)
  type: Method
  source:
    remote:
      path: src/Common/src/Abstractions/Util/IClassifier.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Classify
    path: ../Steeltoe/src/Common/src/Abstractions/Util/IClassifier.cs
    startLine: 8
  assemblies:
  - Steeltoe.Common.Abstractions
  namespace: Steeltoe.Common.Util
  syntax:
    content: T Classify(C classifiable)
    parameters:
    - id: classifiable
      type: '{C}'
    return:
      type: '{T}'
    content.vb: Function Classify(classifiable As C) As T
  overload: Steeltoe.Common.Util.IClassifier`2.Classify*
  nameWithType.vb: IClassifier(Of C, T).Classify(C)
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of C, T).Classify(C)
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: Steeltoe.Common.Util.IClassifier`2.Classify*
  commentId: Overload:Steeltoe.Common.Util.IClassifier`2.Classify
  name: Classify
  nameWithType: IClassifier<C, T>.Classify
  fullName: Steeltoe.Common.Util.IClassifier<C, T>.Classify
  nameWithType.vb: IClassifier(Of C, T).Classify
  fullName.vb: Steeltoe.Common.Util.IClassifier(Of C, T).Classify
- uid: '{C}'
  commentId: '!:C'
  definition: C
  name: C
  nameWithType: C
  fullName: C
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: C
  name: C
  nameWithType: C
  fullName: C
- uid: T
  name: T
  nameWithType: T
  fullName: T
