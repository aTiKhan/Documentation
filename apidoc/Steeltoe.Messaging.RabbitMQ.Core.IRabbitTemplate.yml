### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  id: IRabbitTemplate
  parent: Steeltoe.Messaging.RabbitMQ.Core
  children:
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  - Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  langs:
  - csharp
  - vb
  name: IRabbitTemplate
  nameWithType: IRabbitTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  type: Interface
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IRabbitTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 14
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: 'public interface IRabbitTemplate : IServiceNameAware'
    content.vb: >-
      Public Interface IRabbitTemplate

          Inherits IServiceNameAware
  inheritedMembers:
  - Steeltoe.Common.Services.IServiceNameAware.ServiceName
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  commentId: P:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  id: ConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConnectionFactory
  nameWithType: IRabbitTemplate.ConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 16
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: IConnectionFactory ConnectionFactory { get; }
    parameters: []
    return:
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    content.vb: ReadOnly Property ConnectionFactory As IConnectionFactory
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  id: Execute``1(System.Func{RabbitMQ.Client.IModel,``0})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: Execute<T>(Func<IModel, T>)
  nameWithType: IRabbitTemplate.Execute<T>(Func<IModel, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute<T>(System.Func<RabbitMQ.Client.IModel, T>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Execute
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 18
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T Execute<T>(Func<IModel, T> channelCallback)
    parameters:
    - id: channelCallback
      type: System.Func{RabbitMQ.Client.IModel,{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function Execute(Of T)(channelCallback As Func(Of IModel, T)) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute*
  nameWithType.vb: IRabbitTemplate.Execute(Of T)(Func(Of IModel, T))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute(Of T)(System.Func(Of RabbitMQ.Client.IModel, T))
  name.vb: Execute(Of T)(Func(Of IModel, T))
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  id: Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: Invoke<T>(Func<IRabbitTemplate, T>)
  nameWithType: IRabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Invoke
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 20
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: virtual T Invoke<T>(Func<IRabbitTemplate, T> operationsCallback)
    parameters:
    - id: operationsCallback
      type: System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Overridable Function Invoke(Of T)(operationsCallback As Func(Of IRabbitTemplate, T)) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke*
  nameWithType.vb: IRabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T))
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  id: Invoke``1(System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0},System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs},System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  nameWithType: IRabbitTemplate.Invoke<T>(Func<IRabbitTemplate, T>, Action<Object, BasicAckEventArgs>, Action<Object, BasicNackEventArgs>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>, System.Action<System.Object, RabbitMQ.Client.Events.BasicAckEventArgs>, System.Action<System.Object, RabbitMQ.Client.Events.BasicNackEventArgs>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Invoke
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 25
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T Invoke<T>(Func<IRabbitTemplate, T> operationsCallback, Action<object, BasicAckEventArgs> acks, Action<object, BasicNackEventArgs> nacks)
    parameters:
    - id: operationsCallback
      type: System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}}
    - id: acks
      type: System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs}
    - id: nacks
      type: System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function Invoke(Of T)(operationsCallback As Func(Of IRabbitTemplate, T), acks As Action(Of Object, BasicAckEventArgs), nacks As Action(Of Object, BasicNackEventArgs)) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke*
  nameWithType.vb: IRabbitTemplate.Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke(Of T)(System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicAckEventArgs), System.Action(Of System.Object, RabbitMQ.Client.Events.BasicNackEventArgs))
  name.vb: Invoke(Of T)(Func(Of IRabbitTemplate, T), Action(Of Object, BasicAckEventArgs), Action(Of Object, BasicNackEventArgs))
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  id: WaitForConfirms(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: WaitForConfirms(Int32)
  nameWithType: IRabbitTemplate.WaitForConfirms(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WaitForConfirms
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 27
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: bool WaitForConfirms(int timeout)
    parameters:
    - id: timeout
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Function WaitForConfirms(timeout As Integer) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  id: WaitForConfirmsOrDie(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: WaitForConfirmsOrDie(Int32)
  nameWithType: IRabbitTemplate.WaitForConfirmsOrDie(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WaitForConfirmsOrDie
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 29
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void WaitForConfirmsOrDie(int timeout)
    parameters:
    - id: timeout
      type: System.Int32
    content.vb: Sub WaitForConfirmsOrDie(timeout As Integer)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  id: Send(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: Send(String, String, IMessage)
  nameWithType: IRabbitTemplate.Send(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String, System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Send
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 31
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void Send(string exchange, string routingKey, IMessage message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Sub Send(exchange As String, routingKey As String, message As IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: Send(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: Send(String, String, IMessage, CorrelationData)
  nameWithType: IRabbitTemplate.Send(String, String, IMessage, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Send
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 33
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void Send(string exchange, string routingKey, IMessage message, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Sub Send(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAsync(String, String, IMessage, CancellationToken)
  nameWithType: IRabbitTemplate.SendAsync(String, String, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String, System.String, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 35
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: Task SendAsync(string exchange, string routingKey, IMessage message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SendAsync(exchange As String, routingKey As String, message As IMessage, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  id: SendAsync(System.String,System.String,Steeltoe.Messaging.IMessage,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAsync(String, String, IMessage, CorrelationData, CancellationToken)
  nameWithType: IRabbitTemplate.SendAsync(String, String, IMessage, CorrelationData, CancellationToken)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(System.String, System.String, Steeltoe.Messaging.IMessage, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAsync
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 37
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: Task SendAsync(string exchange, string routingKey, IMessage message, CorrelationData correlationData, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SendAsync(exchange As String, routingKey As String, message As IMessage, correlationData As CorrelationData, cancellationToken As CancellationToken = Nothing) As Task
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 39
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void ConvertAndSend(string exchange, string routingKey, object message, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Sub ConvertAndSend(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertAndSend(Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 41
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void ConvertAndSend(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Sub ConvertAndSend(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 43
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void ConvertAndSend(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    content.vb: Sub ConvertAndSend(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object)
  id: ConvertAndSend(System.String,System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 45
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void ConvertAndSend(string exchange, string routingKey, object message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    content.vb: Sub ConvertAndSend(exchange As String, routingKey As String, message As Object)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  id: ConvertAndSend(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertAndSend(String, String, Object, IMessagePostProcessor)
  nameWithType: IRabbitTemplate.ConvertAndSend(String, String, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertAndSend
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 47
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: void ConvertAndSend(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    content.vb: Sub ConvertAndSend(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor)
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(Object, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 49
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T ConvertSendAndReceive<T>(object message, CorrelationData correlationData)
    parameters:
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ConvertSendAndReceive(Of T)(message As Object, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(Object, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(Object, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, String, Object, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(String, String, Object, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 51
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T ConvertSendAndReceive<T>(string exchange, string routingKey, object message, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ConvertSendAndReceive(Of T)(exchange As String, routingKey As String, message As Object, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 53
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T ConvertSendAndReceive<T>(object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ConvertSendAndReceive(Of T)(message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  id: ConvertSendAndReceive``1(System.String,System.String,System.Object,Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor,Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor, CorrelationData)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 55
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T ConvertSendAndReceive<T>(string exchange, string routingKey, object message, IMessagePostProcessor messagePostProcessor, CorrelationData correlationData)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    - id: messagePostProcessor
      type: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
    - id: correlationData
      type: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ConvertSendAndReceive(Of T)(exchange As String, routingKey As String, message As Object, messagePostProcessor As IMessagePostProcessor, correlationData As CorrelationData) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object, IMessagePostProcessor, CorrelationData)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive``1(System.String,System.String,System.Object)
  id: ConvertSendAndReceive``1(System.String,System.String,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(String, String, Object)
  nameWithType: IRabbitTemplate.ConvertSendAndReceive<T>(String, String, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 57
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T ConvertSendAndReceive<T>(string exchange, string routingKey, object message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ConvertSendAndReceive(Of T)(exchange As String, routingKey As String, message As Object) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive*
  nameWithType.vb: IRabbitTemplate.ConvertSendAndReceive(Of T)(String, String, Object)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive(Of T)(System.String, System.String, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(String, String, Object)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  id: Receive(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: Receive(Int32)
  nameWithType: IRabbitTemplate.Receive(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Receive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 59
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: IMessage Receive(int timeoutMillis)
    parameters:
    - id: timeoutMillis
      type: System.Int32
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Function Receive(timeoutMillis As Integer) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String,System.Int32)
  id: Receive(System.String,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: Receive(String, Int32)
  nameWithType: IRabbitTemplate.Receive(String, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Receive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 61
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: IMessage Receive(string queueName, int timeoutMillis)
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Function Receive(queueName As String, timeoutMillis As Integer) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive*
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.Int32)
  id: ReceiveAndConvert``1(System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert<T>(Int32)
  nameWithType: IRabbitTemplate.ReceiveAndConvert<T>(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 63
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T ReceiveAndConvert<T>(int timeoutMillis)
    parameters:
    - id: timeoutMillis
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ReceiveAndConvert(Of T)(timeoutMillis As Integer) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert*
  nameWithType.vb: IRabbitTemplate.ReceiveAndConvert(Of T)(Int32)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert(Of T)(System.Int32)
  name.vb: ReceiveAndConvert(Of T)(Int32)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert``1(System.String,System.Int32)
  id: ReceiveAndConvert``1(System.String,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndConvert<T>(String, Int32)
  nameWithType: IRabbitTemplate.ReceiveAndConvert<T>(String, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndConvert
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 65
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: T ReceiveAndConvert<T>(string queueName, int timeoutMillis)
    parameters:
    - id: queueName
      type: System.String
    - id: timeoutMillis
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ReceiveAndConvert(Of T)(queueName As String, timeoutMillis As Integer) As T
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert*
  nameWithType.vb: IRabbitTemplate.ReceiveAndConvert(Of T)(String, Int32)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert(Of T)(System.String, System.Int32)
  name.vb: ReceiveAndConvert(Of T)(String, Int32)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1})
  id: ReceiveAndReply``2(System.Func{``0,``1})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(Func<R, S>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 67
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: bool ReceiveAndReply<R, S>(Func<R, S> callback)
    parameters:
    - id: callback
      type: System.Func{{R},{S}}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Function ReceiveAndReply(Of R, S)(callback As Func(Of R, S)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply*
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S))
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1})
  id: ReceiveAndReply``2(System.String,System.Func{``0,``1})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(String, Func<R, S>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 69
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: bool ReceiveAndReply<R, S>(string queueName, Func<R, S> callback)
    parameters:
    - id: queueName
      type: System.String
    - id: callback
      type: System.Func{{R},{S}}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Function ReceiveAndReply(Of R, S)(queueName As String, callback As Func(Of R, S)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply*
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S))
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  id: ReceiveAndReply``2(System.Func{``0,``1},System.String,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(Func<R, S>, String, String)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 71
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: bool ReceiveAndReply<R, S>(Func<R, S> callback, string replyExchange, string replyRoutingKey)
    parameters:
    - id: callback
      type: System.Func{{R},{S}}
    - id: replyExchange
      type: System.String
    - id: replyRoutingKey
      type: System.String
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Function ReceiveAndReply(Of R, S)(callback As Func(Of R, S), replyExchange As String, replyRoutingKey As String) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply*
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), String, String)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  id: ReceiveAndReply``2(System.String,System.Func{``0,``1},System.String,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, String, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 73
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: bool ReceiveAndReply<R, S>(string queueName, Func<R, S> callback, string replyExchange, string replyRoutingKey)
    parameters:
    - id: queueName
      type: System.String
    - id: callback
      type: System.Func{{R},{S}}
    - id: replyExchange
      type: System.String
    - id: replyRoutingKey
      type: System.String
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Function ReceiveAndReply(Of R, S)(queueName As String, callback As Func(Of R, S), replyExchange As String, replyRoutingKey As String) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply*
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.String, System.String)
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), String, String)
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  id: ReceiveAndReply``2(System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 75
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: bool ReceiveAndReply<R, S>(Func<R, S> callback, Func<IMessage, S, Address> replyToAddressCallback)
    parameters:
    - id: callback
      type: System.Func{{R},{S}}
    - id: replyToAddressCallback
      type: System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Function ReceiveAndReply(Of R, S)(callback As Func(Of R, S), replyToAddressCallback As Func(Of IMessage, S, Address)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply*
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(Func(Of R, S), Func(Of IMessage, S, Address))
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  id: ReceiveAndReply``2(System.String,System.Func{``0,``1},System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address})
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  nameWithType: IRabbitTemplate.ReceiveAndReply<R, S>(String, Func<R, S>, Func<IMessage, S, Address>)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.String, System.Func<R, S>, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ReceiveAndReply
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 77
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: bool ReceiveAndReply<R, S>(string queueName, Func<R, S> callback, Func<IMessage, S, Address> replyToAddressCallback)
    parameters:
    - id: queueName
      type: System.String
    - id: callback
      type: System.Func{{R},{S}}
    - id: replyToAddressCallback
      type: System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address}
    typeParameters:
    - id: R
    - id: S
    return:
      type: System.Boolean
    content.vb: Function ReceiveAndReply(Of R, S)(queueName As String, callback As Func(Of R, S), replyToAddressCallback As Func(Of IMessage, S, Address)) As Boolean
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply*
  nameWithType.vb: IRabbitTemplate.ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply(Of R, S)(System.String, System.Func(Of R, S), System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address))
  name.vb: ReceiveAndReply(Of R, S)(String, Func(Of R, S), Func(Of IMessage, S, Address))
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  id: SendAndReceive(System.String,System.String,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  langs:
  - csharp
  - vb
  name: SendAndReceive(String, String, IMessage)
  nameWithType: IRabbitTemplate.SendAndReceive(String, String, IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(System.String, System.String, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Core/IRabbitTemplate.cs
    startLine: 79
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Core
  syntax:
    content: IMessage SendAndReceive(string exchange, string routingKey, IMessage message)
    parameters:
    - id: exchange
      type: System.String
    - id: routingKey
      type: System.String
    - id: message
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Function SendAndReceive(exchange As String, routingKey As String, message As IMessage) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive*
references:
- uid: Steeltoe.Messaging.RabbitMQ.Core
  commentId: N:Steeltoe.Messaging.RabbitMQ.Core
  name: Steeltoe.Messaging.RabbitMQ.Core
  nameWithType: Steeltoe.Messaging.RabbitMQ.Core
  fullName: Steeltoe.Messaging.RabbitMQ.Core
- uid: Steeltoe.Common.Services.IServiceNameAware.ServiceName
  commentId: P:Steeltoe.Common.Services.IServiceNameAware.ServiceName
  parent: Steeltoe.Common.Services.IServiceNameAware
  name: ServiceName
  nameWithType: IServiceNameAware.ServiceName
  fullName: Steeltoe.Common.Services.IServiceNameAware.ServiceName
- uid: Steeltoe.Common.Services.IServiceNameAware
  commentId: T:Steeltoe.Common.Services.IServiceNameAware
  parent: Steeltoe.Common.Services
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: Steeltoe.Common.Services.IServiceNameAware
- uid: Steeltoe.Common.Services
  commentId: N:Steeltoe.Common.Services
  name: Steeltoe.Common.Services
  nameWithType: Steeltoe.Common.Services
  fullName: Steeltoe.Common.Services
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
  name: ConnectionFactory
  nameWithType: IRabbitTemplate.ConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: IConnectionFactory
  nameWithType: IConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Connection
  commentId: N:Steeltoe.Messaging.RabbitMQ.Connection
  name: Steeltoe.Messaging.RabbitMQ.Connection
  nameWithType: Steeltoe.Messaging.RabbitMQ.Connection
  fullName: Steeltoe.Messaging.RabbitMQ.Connection
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute
  name: Execute
  nameWithType: IRabbitTemplate.Execute
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute
- uid: System.Func{RabbitMQ.Client.IModel,{T}}
  commentId: T:System.Func{RabbitMQ.Client.IModel,``0}
  parent: System
  definition: System.Func`2
  name: Func<IModel, T>
  nameWithType: Func<IModel, T>
  fullName: System.Func<RabbitMQ.Client.IModel, T>
  nameWithType.vb: Func(Of IModel, T)
  fullName.vb: System.Func(Of RabbitMQ.Client.IModel, T)
  name.vb: Func(Of IModel, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RabbitMQ.Client.IModel
    name: IModel
    nameWithType: IModel
    fullName: RabbitMQ.Client.IModel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke
  name: Invoke
  nameWithType: IRabbitTemplate.Invoke
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke
- uid: System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,{T}}
  commentId: T:System.Func{Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate,``0}
  parent: System
  definition: System.Func`2
  name: Func<IRabbitTemplate, T>
  nameWithType: Func<IRabbitTemplate, T>
  fullName: System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T>
  nameWithType.vb: Func(Of IRabbitTemplate, T)
  fullName.vb: System.Func(Of Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T)
  name.vb: Func(Of IRabbitTemplate, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
    name: IRabbitTemplate
    nameWithType: IRabbitTemplate
    fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs}
  commentId: T:System.Action{System.Object,RabbitMQ.Client.Events.BasicAckEventArgs}
  parent: System
  definition: System.Action`2
  name: Action<Object, BasicAckEventArgs>
  nameWithType: Action<Object, BasicAckEventArgs>
  fullName: System.Action<System.Object, RabbitMQ.Client.Events.BasicAckEventArgs>
  nameWithType.vb: Action(Of Object, BasicAckEventArgs)
  fullName.vb: System.Action(Of System.Object, RabbitMQ.Client.Events.BasicAckEventArgs)
  name.vb: Action(Of Object, BasicAckEventArgs)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicAckEventArgs
    name: BasicAckEventArgs
    nameWithType: BasicAckEventArgs
    fullName: RabbitMQ.Client.Events.BasicAckEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs}
  commentId: T:System.Action{System.Object,RabbitMQ.Client.Events.BasicNackEventArgs}
  parent: System
  definition: System.Action`2
  name: Action<Object, BasicNackEventArgs>
  nameWithType: Action<Object, BasicNackEventArgs>
  fullName: System.Action<System.Object, RabbitMQ.Client.Events.BasicNackEventArgs>
  nameWithType.vb: Action(Of Object, BasicNackEventArgs)
  fullName.vb: System.Action(Of System.Object, RabbitMQ.Client.Events.BasicNackEventArgs)
  name.vb: Action(Of Object, BasicNackEventArgs)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RabbitMQ.Client.Events.BasicNackEventArgs
    name: BasicNackEventArgs
    nameWithType: BasicNackEventArgs
    fullName: RabbitMQ.Client.Events.BasicNackEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms
  name: WaitForConfirms
  nameWithType: IRabbitTemplate.WaitForConfirms
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie
  name: WaitForConfirmsOrDie
  nameWithType: IRabbitTemplate.WaitForConfirmsOrDie
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send
  name: Send
  nameWithType: IRabbitTemplate.Send
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: CorrelationData
  nameWithType: CorrelationData
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync
  name: SendAsync
  nameWithType: IRabbitTemplate.SendAsync
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
  name: ConvertAndSend
  nameWithType: IRabbitTemplate.ConvertAndSend
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: IMessagePostProcessor
  nameWithType: IMessagePostProcessor
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive
  name: ConvertSendAndReceive
  nameWithType: IRabbitTemplate.ConvertSendAndReceive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive
  name: Receive
  nameWithType: IRabbitTemplate.Receive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert
  name: ReceiveAndConvert
  nameWithType: IRabbitTemplate.ReceiveAndConvert
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply
  name: ReceiveAndReply
  nameWithType: IRabbitTemplate.ReceiveAndReply
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply
- uid: System.Func{{R},{S}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<R, S>
  nameWithType: Func<R, S>
  fullName: System.Func<R, S>
  nameWithType.vb: Func(Of R, S)
  fullName.vb: System.Func(Of R, S)
  name.vb: Func(Of R, S)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Steeltoe.Messaging.IMessage,{S},Steeltoe.Messaging.RabbitMQ.Core.Address}
  commentId: T:System.Func{Steeltoe.Messaging.IMessage,``1,Steeltoe.Messaging.RabbitMQ.Core.Address}
  parent: System
  definition: System.Func`3
  name: Func<IMessage, S, Address>
  nameWithType: Func<IMessage, S, Address>
  fullName: System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address>
  nameWithType.vb: Func(Of IMessage, S, Address)
  fullName.vb: System.Func(Of Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address)
  name.vb: Func(Of IMessage, S, Address)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: S
    nameWithType: S
    fullName: S
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive
  name: SendAndReceive
  nameWithType: IRabbitTemplate.SendAndReceive
  fullName: Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive
