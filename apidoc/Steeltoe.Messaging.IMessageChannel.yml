### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.IMessageChannel
  commentId: T:Steeltoe.Messaging.IMessageChannel
  id: IMessageChannel
  parent: Steeltoe.Messaging
  children:
  - Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage,System.Int32)
  - Steeltoe.Messaging.IMessageChannel.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Steeltoe.Messaging.IMessageChannel
  type: Interface
  source:
    remote:
      path: src/Messaging/src/Abstractions/IMessageChannel.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IMessageChannel
    path: ../Steeltoe/src/Messaging/src/Abstractions/IMessageChannel.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging
  summary: "\nAn abstraction that defines methods for sending messages;\n"
  example: []
  syntax:
    content: 'public interface IMessageChannel : IServiceNameAware'
    content.vb: >-
      Public Interface IMessageChannel

          Inherits IServiceNameAware
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Messaging.IMessageChannel.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.IMessageChannel.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.IMessageChannel
  langs:
  - csharp
  - vb
  name: SendAsync(IMessage, CancellationToken)
  nameWithType: IMessageChannel.SendAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.IMessageChannel.SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/IMessageChannel.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAsync
    path: ../Steeltoe/src/Messaging/src/Abstractions/IMessageChannel.cs
    startLine: 21
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging
  summary: "\nSend a message to this channel.\n"
  example: []
  syntax:
    content: ValueTask<bool> SendAsync(IMessage message, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
      description: the message to send
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: token used to signal cancellation
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
      description: a task to signal completion
    content.vb: Function SendAsync(message As IMessage, cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Steeltoe.Messaging.IMessageChannel.SendAsync*
- uid: Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage)
  id: Send(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.IMessageChannel
  langs:
  - csharp
  - vb
  name: Send(IMessage)
  nameWithType: IMessageChannel.Send(IMessage)
  fullName: Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/IMessageChannel.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Send
    path: ../Steeltoe/src/Messaging/src/Abstractions/IMessageChannel.cs
    startLine: 32
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging
  summary: "\nSend a message to this channel. If the message is sent successfuly,\nthe method returns true. If the message cannot be sent due to a\nnon-fatal reason, the method returns false. The method may also\nthrow a Exception in case of non-recoverable errors.\nThis method may block indefinitely, depending on the implementation.\n"
  example: []
  syntax:
    content: bool Send(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
      description: the message to send
    return:
      type: System.Boolean
      description: true if the message is sent
    content.vb: Function Send(message As IMessage) As Boolean
  overload: Steeltoe.Messaging.IMessageChannel.Send*
- uid: Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage,System.Int32)
  commentId: M:Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage,System.Int32)
  id: Send(Steeltoe.Messaging.IMessage,System.Int32)
  parent: Steeltoe.Messaging.IMessageChannel
  langs:
  - csharp
  - vb
  name: Send(IMessage, Int32)
  nameWithType: IMessageChannel.Send(IMessage, Int32)
  fullName: Steeltoe.Messaging.IMessageChannel.Send(Steeltoe.Messaging.IMessage, System.Int32)
  type: Method
  source:
    remote:
      path: src/Messaging/src/Abstractions/IMessageChannel.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Send
    path: ../Steeltoe/src/Messaging/src/Abstractions/IMessageChannel.cs
    startLine: 40
  assemblies:
  - Steeltoe.Messaging.Abstractions
  namespace: Steeltoe.Messaging
  summary: "\nSend a message, blocking until either the message is accepted or the specified timeout period elapses.\n"
  example: []
  syntax:
    content: bool Send(IMessage message, int timeout)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
      description: the message to send
    - id: timeout
      type: System.Int32
      description: the timeout in milliseconds; -1 for no timeout
    return:
      type: System.Boolean
      description: true if the message is sent
    content.vb: Function Send(message As IMessage, timeout As Integer) As Boolean
  overload: Steeltoe.Messaging.IMessageChannel.Send*
references:
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.IMessageChannel.SendAsync*
  commentId: Overload:Steeltoe.Messaging.IMessageChannel.SendAsync
  name: SendAsync
  nameWithType: IMessageChannel.SendAsync
  fullName: Steeltoe.Messaging.IMessageChannel.SendAsync
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.ValueTask{System.Boolean}
  commentId: T:System.Threading.Tasks.ValueTask{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  name: ValueTask<Boolean>
  nameWithType: ValueTask<Boolean>
  fullName: System.Threading.Tasks.ValueTask<System.Boolean>
  nameWithType.vb: ValueTask(Of Boolean)
  fullName.vb: System.Threading.Tasks.ValueTask(Of System.Boolean)
  name.vb: ValueTask(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.ValueTask`1
  commentId: T:System.Threading.Tasks.ValueTask`1
  isExternal: true
  name: ValueTask<TResult>
  nameWithType: ValueTask<TResult>
  fullName: System.Threading.Tasks.ValueTask<TResult>
  nameWithType.vb: ValueTask(Of TResult)
  fullName.vb: System.Threading.Tasks.ValueTask(Of TResult)
  name.vb: ValueTask(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Messaging.IMessageChannel.Send*
  commentId: Overload:Steeltoe.Messaging.IMessageChannel.Send
  name: Send
  nameWithType: IMessageChannel.Send
  fullName: Steeltoe.Messaging.IMessageChannel.Send
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
