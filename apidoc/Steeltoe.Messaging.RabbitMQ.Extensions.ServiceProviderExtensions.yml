### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  commentId: T:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  id: ServiceProviderExtensions
  parent: Steeltoe.Messaging.RabbitMQ.Extensions
  children:
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext(System.IServiceProvider)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin(System.IServiceProvider,System.String)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding(System.IServiceProvider,System.String)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings(System.IServiceProvider)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory(System.IServiceProvider,System.String)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange(System.IServiceProvider,System.String)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges(System.IServiceProvider)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue(System.IServiceProvider,System.String)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues(System.IServiceProvider)
  - Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate(System.IServiceProvider,System.String)
  langs:
  - csharp
  - vb
  name: ServiceProviderExtensions
  nameWithType: ServiceProviderExtensions
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceProviderExtensions
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 15
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static class ServiceProviderExtensions
    content.vb: Public Module ServiceProviderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate(System.IServiceProvider,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate(System.IServiceProvider,System.String)
  id: GetRabbitTemplate(System.IServiceProvider,System.String)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitTemplate(IServiceProvider, String)
  nameWithType: ServiceProviderExtensions.GetRabbitTemplate(IServiceProvider, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate(System.IServiceProvider, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitTemplate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 17
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static RabbitTemplate GetRabbitTemplate(this IServiceProvider provider, string name = null)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: name
      type: System.String
    return:
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitTemplate(provider As IServiceProvider, name As String = Nothing) As RabbitTemplate
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin(System.IServiceProvider,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin(System.IServiceProvider,System.String)
  id: GetRabbitAdmin(System.IServiceProvider,System.String)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitAdmin(IServiceProvider, String)
  nameWithType: ServiceProviderExtensions.GetRabbitAdmin(IServiceProvider, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin(System.IServiceProvider, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitAdmin
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 23
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static RabbitAdmin GetRabbitAdmin(this IServiceProvider provider, string name = null)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: name
      type: System.String
    return:
      type: Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitAdmin(provider As IServiceProvider, name As String = Nothing) As RabbitAdmin
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue(System.IServiceProvider,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue(System.IServiceProvider,System.String)
  id: GetRabbitQueue(System.IServiceProvider,System.String)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitQueue(IServiceProvider, String)
  nameWithType: ServiceProviderExtensions.GetRabbitQueue(IServiceProvider, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue(System.IServiceProvider, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitQueue
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 29
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IQueue GetRabbitQueue(this IServiceProvider provider, string name)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: name
      type: System.String
    return:
      type: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitQueue(provider As IServiceProvider, name As String) As IQueue
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange(System.IServiceProvider,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange(System.IServiceProvider,System.String)
  id: GetRabbitExchange(System.IServiceProvider,System.String)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitExchange(IServiceProvider, String)
  nameWithType: ServiceProviderExtensions.GetRabbitExchange(IServiceProvider, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange(System.IServiceProvider, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitExchange
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 34
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IExchange GetRabbitExchange(this IServiceProvider provider, string name)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: name
      type: System.String
    return:
      type: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitExchange(provider As IServiceProvider, name As String) As IExchange
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding(System.IServiceProvider,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding(System.IServiceProvider,System.String)
  id: GetRabbitBinding(System.IServiceProvider,System.String)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitBinding(IServiceProvider, String)
  nameWithType: ServiceProviderExtensions.GetRabbitBinding(IServiceProvider, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding(System.IServiceProvider, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitBinding
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 39
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IBinding GetRabbitBinding(this IServiceProvider provider, string name)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: name
      type: System.String
    return:
      type: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitBinding(provider As IServiceProvider, name As String) As IBinding
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues(System.IServiceProvider)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues(System.IServiceProvider)
  id: GetRabbitQueues(System.IServiceProvider)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitQueues(IServiceProvider)
  nameWithType: ServiceProviderExtensions.GetRabbitQueues(IServiceProvider)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitQueues
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 44
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IEnumerable<IQueue> GetRabbitQueues(this IServiceProvider provider)
    parameters:
    - id: provider
      type: System.IServiceProvider
    return:
      type: System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IQueue}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitQueues(provider As IServiceProvider) As IEnumerable(Of IQueue)
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges(System.IServiceProvider)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges(System.IServiceProvider)
  id: GetRabbitExchanges(System.IServiceProvider)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitExchanges(IServiceProvider)
  nameWithType: ServiceProviderExtensions.GetRabbitExchanges(IServiceProvider)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitExchanges
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 49
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IEnumerable<IExchange> GetRabbitExchanges(this IServiceProvider provider)
    parameters:
    - id: provider
      type: System.IServiceProvider
    return:
      type: System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IExchange}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitExchanges(provider As IServiceProvider) As IEnumerable(Of IExchange)
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings(System.IServiceProvider)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings(System.IServiceProvider)
  id: GetRabbitBindings(System.IServiceProvider)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitBindings(IServiceProvider)
  nameWithType: ServiceProviderExtensions.GetRabbitBindings(IServiceProvider)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitBindings
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 54
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IEnumerable<IBinding> GetRabbitBindings(this IServiceProvider provider)
    parameters:
    - id: provider
      type: System.IServiceProvider
    return:
      type: System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IBinding}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitBindings(provider As IServiceProvider) As IEnumerable(Of IBinding)
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext(System.IServiceProvider)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext(System.IServiceProvider)
  id: GetApplicationContext(System.IServiceProvider)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetApplicationContext(IServiceProvider)
  nameWithType: ServiceProviderExtensions.GetApplicationContext(IServiceProvider)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetApplicationContext
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 59
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IApplicationContext GetApplicationContext(this IServiceProvider provider)
    parameters:
    - id: provider
      type: System.IServiceProvider
    return:
      type: Steeltoe.Common.Contexts.IApplicationContext
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetApplicationContext(provider As IServiceProvider) As IApplicationContext
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory(System.IServiceProvider,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory(System.IServiceProvider,System.String)
  id: GetRabbitConnectionFactory(System.IServiceProvider,System.String)
  isExtensionMethod: true
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
  langs:
  - csharp
  - vb
  name: GetRabbitConnectionFactory(IServiceProvider, String)
  nameWithType: ServiceProviderExtensions.GetRabbitConnectionFactory(IServiceProvider, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory(System.IServiceProvider, System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetRabbitConnectionFactory
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Extensions/ServiceProviderExtensions.cs
    startLine: 64
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Extensions
  syntax:
    content: public static IConnectionFactory GetRabbitConnectionFactory(this IServiceProvider provider, string factoryName = null)
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: factoryName
      type: System.String
    return:
      type: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRabbitConnectionFactory(provider As IServiceProvider, factoryName As String = Nothing) As IConnectionFactory
  overload: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Messaging.RabbitMQ.Extensions
  commentId: N:Steeltoe.Messaging.RabbitMQ.Extensions
  name: Steeltoe.Messaging.RabbitMQ.Extensions
  nameWithType: Steeltoe.Messaging.RabbitMQ.Extensions
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate
  name: GetRabbitTemplate
  nameWithType: ServiceProviderExtensions.GetRabbitTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: RabbitTemplate
  nameWithType: RabbitTemplate
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
- uid: Steeltoe.Messaging.RabbitMQ.Core
  commentId: N:Steeltoe.Messaging.RabbitMQ.Core
  name: Steeltoe.Messaging.RabbitMQ.Core
  nameWithType: Steeltoe.Messaging.RabbitMQ.Core
  fullName: Steeltoe.Messaging.RabbitMQ.Core
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin
  name: GetRabbitAdmin
  nameWithType: ServiceProviderExtensions.GetRabbitAdmin
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin
- uid: Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
  commentId: T:Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
  parent: Steeltoe.Messaging.RabbitMQ.Core
  name: RabbitAdmin
  nameWithType: RabbitAdmin
  fullName: Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue
  name: GetRabbitQueue
  nameWithType: ServiceProviderExtensions.GetRabbitQueue
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue
- uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.IQueue
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: IQueue
  nameWithType: IQueue
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
- uid: Steeltoe.Messaging.RabbitMQ.Config
  commentId: N:Steeltoe.Messaging.RabbitMQ.Config
  name: Steeltoe.Messaging.RabbitMQ.Config
  nameWithType: Steeltoe.Messaging.RabbitMQ.Config
  fullName: Steeltoe.Messaging.RabbitMQ.Config
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange
  name: GetRabbitExchange
  nameWithType: ServiceProviderExtensions.GetRabbitExchange
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange
- uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.IExchange
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: IExchange
  nameWithType: IExchange
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding
  name: GetRabbitBinding
  nameWithType: ServiceProviderExtensions.GetRabbitBinding
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding
- uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  commentId: T:Steeltoe.Messaging.RabbitMQ.Config.IBinding
  parent: Steeltoe.Messaging.RabbitMQ.Config
  name: IBinding
  nameWithType: IBinding
  fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues
  name: GetRabbitQueues
  nameWithType: ServiceProviderExtensions.GetRabbitQueues
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues
- uid: System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IQueue}
  commentId: T:System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IQueue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IQueue>
  nameWithType: IEnumerable<IQueue>
  fullName: System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IQueue>
  nameWithType.vb: IEnumerable(Of IQueue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Steeltoe.Messaging.RabbitMQ.Config.IQueue)
  name.vb: IEnumerable(Of IQueue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    name: IQueue
    nameWithType: IQueue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IQueue
    name: IQueue
    nameWithType: IQueue
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IQueue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges
  name: GetRabbitExchanges
  nameWithType: ServiceProviderExtensions.GetRabbitExchanges
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges
- uid: System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IExchange}
  commentId: T:System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IExchange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IExchange>
  nameWithType: IEnumerable<IExchange>
  fullName: System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IExchange>
  nameWithType.vb: IEnumerable(Of IExchange)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Steeltoe.Messaging.RabbitMQ.Config.IExchange)
  name.vb: IEnumerable(Of IExchange)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IExchange
    name: IExchange
    nameWithType: IExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IExchange
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings
  name: GetRabbitBindings
  nameWithType: ServiceProviderExtensions.GetRabbitBindings
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings
- uid: System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IBinding}
  commentId: T:System.Collections.Generic.IEnumerable{Steeltoe.Messaging.RabbitMQ.Config.IBinding}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IBinding>
  nameWithType: IEnumerable<IBinding>
  fullName: System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IBinding>
  nameWithType.vb: IEnumerable(Of IBinding)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Steeltoe.Messaging.RabbitMQ.Config.IBinding)
  name.vb: IEnumerable(Of IBinding)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.RabbitMQ.Config.IBinding
    name: IBinding
    nameWithType: IBinding
    fullName: Steeltoe.Messaging.RabbitMQ.Config.IBinding
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext
  name: GetApplicationContext
  nameWithType: ServiceProviderExtensions.GetApplicationContext
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext
- uid: Steeltoe.Common.Contexts.IApplicationContext
  commentId: T:Steeltoe.Common.Contexts.IApplicationContext
  parent: Steeltoe.Common.Contexts
  name: IApplicationContext
  nameWithType: IApplicationContext
  fullName: Steeltoe.Common.Contexts.IApplicationContext
- uid: Steeltoe.Common.Contexts
  commentId: N:Steeltoe.Common.Contexts
  name: Steeltoe.Common.Contexts
  nameWithType: Steeltoe.Common.Contexts
  fullName: Steeltoe.Common.Contexts
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory
  name: GetRabbitConnectionFactory
  nameWithType: ServiceProviderExtensions.GetRabbitConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  commentId: T:Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
  parent: Steeltoe.Messaging.RabbitMQ.Connection
  name: IConnectionFactory
  nameWithType: IConnectionFactory
  fullName: Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
- uid: Steeltoe.Messaging.RabbitMQ.Connection
  commentId: N:Steeltoe.Messaging.RabbitMQ.Connection
  name: Steeltoe.Messaging.RabbitMQ.Connection
  nameWithType: Steeltoe.Messaging.RabbitMQ.Connection
  fullName: Steeltoe.Messaging.RabbitMQ.Connection
