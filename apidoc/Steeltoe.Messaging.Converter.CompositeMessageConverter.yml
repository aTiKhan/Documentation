### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.CompositeMessageConverter
  id: CompositeMessageConverter
  parent: Steeltoe.Messaging.Converter
  children:
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.#ctor(System.Collections.Generic.ICollection{Steeltoe.Messaging.Converter.IMessageConverter})
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.DEFAULT_SERVICE_NAME
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  - Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString
  langs:
  - csharp
  - vb
  name: CompositeMessageConverter
  nameWithType: CompositeMessageConverter
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CompositeMessageConverter
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 9
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: 'public class CompositeMessageConverter : ISmartMessageConverter, IMessageConverter, IServiceNameAware'
    content.vb: >-
      Public Class CompositeMessageConverter

          Implements ISmartMessageConverter, IMessageConverter, IServiceNameAware
  inheritance:
  - System.Object
  derivedClasses:
  - Steeltoe.Integration.Support.Converter.ConfigurableCompositeMessageConverter
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter
  - Steeltoe.Messaging.Converter.IMessageConverter
  - IServiceNameAware
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.DEFAULT_SERVICE_NAME
  commentId: F:Steeltoe.Messaging.Converter.CompositeMessageConverter.DEFAULT_SERVICE_NAME
  id: DEFAULT_SERVICE_NAME
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: DEFAULT_SERVICE_NAME
  nameWithType: CompositeMessageConverter.DEFAULT_SERVICE_NAME
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.DEFAULT_SERVICE_NAME
  type: Field
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DEFAULT_SERVICE_NAME
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 11
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public const string DEFAULT_SERVICE_NAME = "CompositeMessageConverter"
    return:
      type: System.String
    content.vb: Public Const DEFAULT_SERVICE_NAME As String = "CompositeMessageConverter"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.#ctor(System.Collections.Generic.ICollection{Steeltoe.Messaging.Converter.IMessageConverter})
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.#ctor(System.Collections.Generic.ICollection{Steeltoe.Messaging.Converter.IMessageConverter})
  id: '#ctor(System.Collections.Generic.ICollection{Steeltoe.Messaging.Converter.IMessageConverter})'
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: CompositeMessageConverter(ICollection<IMessageConverter>)
  nameWithType: CompositeMessageConverter.CompositeMessageConverter(ICollection<IMessageConverter>)
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.CompositeMessageConverter(System.Collections.Generic.ICollection<Steeltoe.Messaging.Converter.IMessageConverter>)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public CompositeMessageConverter(ICollection<IMessageConverter> converters)
    parameters:
    - id: converters
      type: System.Collections.Generic.ICollection{Steeltoe.Messaging.Converter.IMessageConverter}
    content.vb: Public Sub New(converters As ICollection(Of IMessageConverter))
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.#ctor*
  nameWithType.vb: CompositeMessageConverter.CompositeMessageConverter(ICollection(Of IMessageConverter))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Converter.CompositeMessageConverter.CompositeMessageConverter(System.Collections.Generic.ICollection(Of Steeltoe.Messaging.Converter.IMessageConverter))
  name.vb: CompositeMessageConverter(ICollection(Of IMessageConverter))
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName
  commentId: P:Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName
  id: ServiceName
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: CompositeMessageConverter.ServiceName
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceName
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 23
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public string ServiceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ServiceName As String
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  id: FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage, Type)
  nameWithType: CompositeMessageConverter.FromMessage(IMessage, Type)
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 25
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public object FromMessage(IMessage message, Type targetClass)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Function FromMessage(message As IMessage, targetClass As Type) As Object
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  id: FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage, Type, Object)
  nameWithType: CompositeMessageConverter.FromMessage(IMessage, Type, Object)
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 39
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public object FromMessage(IMessage message, Type targetClass, object conversionHint)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    - id: conversionHint
      type: System.Object
    return:
      type: System.Object
    content.vb: Public Function FromMessage(message As IMessage, targetClass As Type, conversionHint As Object) As Object
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  id: FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage, Object)
  nameWithType: CompositeMessageConverter.FromMessage<T>(IMessage, Object)
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 55
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public T FromMessage<T>(IMessage message, object conversionHint)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: conversionHint
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function FromMessage(Of T)(message As IMessage, conversionHint As Object) As T
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  nameWithType.vb: CompositeMessageConverter.FromMessage(Of T)(IMessage, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage, System.Object)
  name.vb: FromMessage(Of T)(IMessage, Object)
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  id: FromMessage``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage)
  nameWithType: CompositeMessageConverter.FromMessage<T>(IMessage)
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 60
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public T FromMessage<T>(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function FromMessage(Of T)(message As IMessage) As T
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  nameWithType.vb: CompositeMessageConverter.FromMessage(Of T)(IMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: FromMessage(Of T)(IMessage)
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  id: ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: ToMessage(Object, IMessageHeaders)
  nameWithType: CompositeMessageConverter.ToMessage(Object, IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 65
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public IMessage ToMessage(object payload, IMessageHeaders headers)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Function ToMessage(payload As Object, headers As IMessageHeaders) As IMessage
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  id: ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: ToMessage(Object, IMessageHeaders, Object)
  nameWithType: CompositeMessageConverter.ToMessage(Object, IMessageHeaders, Object)
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToMessage
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 79
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public IMessage ToMessage(object payload, IMessageHeaders headers, object conversionHint)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: conversionHint
      type: System.Object
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Function ToMessage(payload As Object, headers As IMessageHeaders, conversionHint As Object) As IMessage
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters
  commentId: P:Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters
  id: Converters
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: Converters
  nameWithType: CompositeMessageConverter.Converters
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters
  type: Property
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Converters
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 95
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public List<IMessageConverter> Converters { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Steeltoe.Messaging.Converter.IMessageConverter}
    content.vb: Public ReadOnly Property Converters As List(Of IMessageConverter)
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString
  commentId: M:Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString
  id: ToString
  parent: Steeltoe.Messaging.Converter.CompositeMessageConverter
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CompositeMessageConverter.ToString()
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString()
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToString
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Converter/CompositeMessageConverter.cs
    startLine: 97
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Converter
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Steeltoe.Messaging.Converter
  commentId: N:Steeltoe.Messaging.Converter
  name: Steeltoe.Messaging.Converter
  nameWithType: Steeltoe.Messaging.Converter
  fullName: Steeltoe.Messaging.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.ISmartMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: ISmartMessageConverter
  nameWithType: ISmartMessageConverter
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter
- uid: Steeltoe.Messaging.Converter.IMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.IMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: IMessageConverter
  nameWithType: IMessageConverter
  fullName: Steeltoe.Messaging.Converter.IMessageConverter
- uid: IServiceNameAware
  isExternal: true
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: IServiceNameAware
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.#ctor*
  commentId: Overload:Steeltoe.Messaging.Converter.CompositeMessageConverter.#ctor
  name: CompositeMessageConverter
  nameWithType: CompositeMessageConverter.CompositeMessageConverter
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.CompositeMessageConverter
- uid: System.Collections.Generic.ICollection{Steeltoe.Messaging.Converter.IMessageConverter}
  commentId: T:System.Collections.Generic.ICollection{Steeltoe.Messaging.Converter.IMessageConverter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IMessageConverter>
  nameWithType: ICollection<IMessageConverter>
  fullName: System.Collections.Generic.ICollection<Steeltoe.Messaging.Converter.IMessageConverter>
  nameWithType.vb: ICollection(Of IMessageConverter)
  fullName.vb: System.Collections.Generic.ICollection(Of Steeltoe.Messaging.Converter.IMessageConverter)
  name.vb: ICollection(Of IMessageConverter)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Converter.IMessageConverter
    name: IMessageConverter
    nameWithType: IMessageConverter
    fullName: Steeltoe.Messaging.Converter.IMessageConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Converter.IMessageConverter
    name: IMessageConverter
    nameWithType: IMessageConverter
    fullName: Steeltoe.Messaging.Converter.IMessageConverter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName*
  commentId: Overload:Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName
  name: ServiceName
  nameWithType: CompositeMessageConverter.ServiceName
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.ServiceName
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage*
  commentId: Overload:Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage
  name: FromMessage
  nameWithType: CompositeMessageConverter.FromMessage
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.FromMessage
- uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  isExternal: true
  name: FromMessage(IMessage, Type)
  nameWithType: IMessageConverter.FromMessage(IMessage, Type)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
    name: FromMessage
    nameWithType: IMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
    name: FromMessage
    nameWithType: IMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: FromMessage(IMessage, Type, Object)
  nameWithType: ISmartMessageConverter.FromMessage(IMessage, Type, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
    name: FromMessage
    nameWithType: ISmartMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
    name: FromMessage
    nameWithType: ISmartMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: FromMessage<T>(IMessage, Object)
  nameWithType: ISmartMessageConverter.FromMessage<T>(IMessage, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage, System.Object)
  nameWithType.vb: ISmartMessageConverter.FromMessage(Of T)(IMessage, Object)
  fullName.vb: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage, System.Object)
  name.vb: FromMessage(Of T)(IMessage, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
    name: FromMessage<T>
    nameWithType: ISmartMessageConverter.FromMessage<T>
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
    name: FromMessage(Of T)
    nameWithType: ISmartMessageConverter.FromMessage(Of T)
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  name: FromMessage<T>(IMessage)
  nameWithType: IMessageConverter.FromMessage<T>(IMessage)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageConverter.FromMessage(Of T)(IMessage)
  fullName.vb: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: FromMessage(Of T)(IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
    name: FromMessage<T>
    nameWithType: IMessageConverter.FromMessage<T>
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
    name: FromMessage(Of T)
    nameWithType: IMessageConverter.FromMessage(Of T)
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage*
  commentId: Overload:Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage
  name: ToMessage
  nameWithType: CompositeMessageConverter.ToMessage
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToMessage
- uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  isExternal: true
  name: ToMessage(Object, IMessageHeaders)
  nameWithType: IMessageConverter.ToMessage(Object, IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
    name: ToMessage
    nameWithType: IMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
    name: ToMessage
    nameWithType: IMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: ToMessage(Object, IMessageHeaders, Object)
  nameWithType: ISmartMessageConverter.ToMessage(Object, IMessageHeaders, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
    name: ToMessage
    nameWithType: ISmartMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
    name: ToMessage
    nameWithType: ISmartMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters*
  commentId: Overload:Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters
  name: Converters
  nameWithType: CompositeMessageConverter.Converters
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.Converters
- uid: System.Collections.Generic.List{Steeltoe.Messaging.Converter.IMessageConverter}
  commentId: T:System.Collections.Generic.List{Steeltoe.Messaging.Converter.IMessageConverter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IMessageConverter>
  nameWithType: List<IMessageConverter>
  fullName: System.Collections.Generic.List<Steeltoe.Messaging.Converter.IMessageConverter>
  nameWithType.vb: List(Of IMessageConverter)
  fullName.vb: System.Collections.Generic.List(Of Steeltoe.Messaging.Converter.IMessageConverter)
  name.vb: List(Of IMessageConverter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.Converter.IMessageConverter
    name: IMessageConverter
    nameWithType: IMessageConverter
    fullName: Steeltoe.Messaging.Converter.IMessageConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.Converter.IMessageConverter
    name: IMessageConverter
    nameWithType: IMessageConverter
    fullName: Steeltoe.Messaging.Converter.IMessageConverter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString*
  commentId: Overload:Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString
  name: ToString
  nameWithType: CompositeMessageConverter.ToString
  fullName: Steeltoe.Messaging.Converter.CompositeMessageConverter.ToString
