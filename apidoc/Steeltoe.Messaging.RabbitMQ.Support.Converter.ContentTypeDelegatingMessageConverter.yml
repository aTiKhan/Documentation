### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  commentId: T:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  id: ContentTypeDelegatingMessageConverter
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter
  children:
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor(Steeltoe.Messaging.Converter.ISmartMessageConverter)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor(System.Collections.Generic.Dictionary{System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter},Steeltoe.Messaging.Converter.ISmartMessageConverter)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate(System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.DEFAULT_SERVICE_NAME
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType(System.String)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate(System.String)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  - Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  langs:
  - csharp
  - vb
  name: ContentTypeDelegatingMessageConverter
  nameWithType: ContentTypeDelegatingMessageConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ContentTypeDelegatingMessageConverter
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 11
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: 'public class ContentTypeDelegatingMessageConverter : ISmartMessageConverter, IMessageConverter, IServiceNameAware'
    content.vb: >-
      Public Class ContentTypeDelegatingMessageConverter

          Implements ISmartMessageConverter, IMessageConverter, IServiceNameAware
  inheritance:
  - System.Object
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter
  - Steeltoe.Messaging.Converter.IMessageConverter
  - IServiceNameAware
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.DEFAULT_SERVICE_NAME
  commentId: F:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.DEFAULT_SERVICE_NAME
  id: DEFAULT_SERVICE_NAME
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: DEFAULT_SERVICE_NAME
  nameWithType: ContentTypeDelegatingMessageConverter.DEFAULT_SERVICE_NAME
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.DEFAULT_SERVICE_NAME
  type: Field
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DEFAULT_SERVICE_NAME
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public const string DEFAULT_SERVICE_NAME = "ContentTypeDelegatingMessageConverter"
    return:
      type: System.String
    content.vb: Public Const DEFAULT_SERVICE_NAME As String = "ContentTypeDelegatingMessageConverter"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName
  commentId: P:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName
  id: ServiceName
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: ContentTypeDelegatingMessageConverter.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName
  type: Property
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ServiceName
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 19
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public string ServiceName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ServiceName As String
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor
  id: '#ctor'
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: ContentTypeDelegatingMessageConverter()
  nameWithType: ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter()
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter()
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 21
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public ContentTypeDelegatingMessageConverter()
    content.vb: Public Sub New
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor(Steeltoe.Messaging.Converter.ISmartMessageConverter)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor(Steeltoe.Messaging.Converter.ISmartMessageConverter)
  id: '#ctor(Steeltoe.Messaging.Converter.ISmartMessageConverter)'
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: ContentTypeDelegatingMessageConverter(ISmartMessageConverter)
  nameWithType: ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(ISmartMessageConverter)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(Steeltoe.Messaging.Converter.ISmartMessageConverter)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 26
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public ContentTypeDelegatingMessageConverter(ISmartMessageConverter defaultConverter)
    parameters:
    - id: defaultConverter
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    content.vb: Public Sub New(defaultConverter As ISmartMessageConverter)
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor(System.Collections.Generic.Dictionary{System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter},Steeltoe.Messaging.Converter.ISmartMessageConverter)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor(System.Collections.Generic.Dictionary{System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter},Steeltoe.Messaging.Converter.ISmartMessageConverter)
  id: '#ctor(System.Collections.Generic.Dictionary{System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter},Steeltoe.Messaging.Converter.ISmartMessageConverter)'
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: ContentTypeDelegatingMessageConverter(Dictionary<String, ISmartMessageConverter>, ISmartMessageConverter)
  nameWithType: ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(Dictionary<String, ISmartMessageConverter>, ISmartMessageConverter)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(System.Collections.Generic.Dictionary<System.String, Steeltoe.Messaging.Converter.ISmartMessageConverter>, Steeltoe.Messaging.Converter.ISmartMessageConverter)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 31
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public ContentTypeDelegatingMessageConverter(Dictionary<string, ISmartMessageConverter> delegates, ISmartMessageConverter defaultConverter)
    parameters:
    - id: delegates
      type: System.Collections.Generic.Dictionary{System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter}
    - id: defaultConverter
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    content.vb: Public Sub New(delegates As Dictionary(Of String, ISmartMessageConverter), defaultConverter As ISmartMessageConverter)
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor*
  nameWithType.vb: ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(Dictionary(Of String, ISmartMessageConverter), ISmartMessageConverter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(System.Collections.Generic.Dictionary(Of System.String, Steeltoe.Messaging.Converter.ISmartMessageConverter), Steeltoe.Messaging.Converter.ISmartMessageConverter)
  name.vb: ContentTypeDelegatingMessageConverter(Dictionary(Of String, ISmartMessageConverter), ISmartMessageConverter)
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate(System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate(System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter)
  id: AddDelegate(System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: AddDelegate(String, ISmartMessageConverter)
  nameWithType: ContentTypeDelegatingMessageConverter.AddDelegate(String, ISmartMessageConverter)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate(System.String, Steeltoe.Messaging.Converter.ISmartMessageConverter)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AddDelegate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 37
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public void AddDelegate(string contentType, ISmartMessageConverter messageConverter)
    parameters:
    - id: contentType
      type: System.String
    - id: messageConverter
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    content.vb: Public Sub AddDelegate(contentType As String, messageConverter As ISmartMessageConverter)
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate(System.String)
  id: RemoveDelegate(System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: RemoveDelegate(String)
  nameWithType: ContentTypeDelegatingMessageConverter.RemoveDelegate(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RemoveDelegate
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 42
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public ISmartMessageConverter RemoveDelegate(string contentType)
    parameters:
    - id: contentType
      type: System.String
    return:
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    content.vb: Public Function RemoveDelegate(contentType As String) As ISmartMessageConverter
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  id: FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage, Type, Object)
  nameWithType: ContentTypeDelegatingMessageConverter.FromMessage(IMessage, Type, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 48
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public object FromMessage(IMessage message, Type targetClass, object conversionHint)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    - id: conversionHint
      type: System.Object
    return:
      type: System.Object
    content.vb: Public Function FromMessage(message As IMessage, targetClass As Type, conversionHint As Object) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  id: FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage, Object)
  nameWithType: ContentTypeDelegatingMessageConverter.FromMessage<T>(IMessage, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 54
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public T FromMessage<T>(IMessage message, object conversionHint)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: conversionHint
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function FromMessage(Of T)(message As IMessage, conversionHint As Object) As T
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  nameWithType.vb: ContentTypeDelegatingMessageConverter.FromMessage(Of T)(IMessage, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage, System.Object)
  name.vb: FromMessage(Of T)(IMessage, Object)
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  id: FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage, Type)
  nameWithType: ContentTypeDelegatingMessageConverter.FromMessage(IMessage, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 59
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public object FromMessage(IMessage message, Type targetClass)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: targetClass
      type: System.Type
    return:
      type: System.Object
    content.vb: Public Function FromMessage(message As IMessage, targetClass As Type) As Object
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  id: FromMessage``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: FromMessage<T>(IMessage)
  nameWithType: ContentTypeDelegatingMessageConverter.FromMessage<T>(IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 64
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public T FromMessage<T>(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function FromMessage(Of T)(message As IMessage) As T
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  nameWithType.vb: ContentTypeDelegatingMessageConverter.FromMessage(Of T)(IMessage)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: FromMessage(Of T)(IMessage)
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  id: ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: ToMessage(Object, IMessageHeaders, Object)
  nameWithType: ContentTypeDelegatingMessageConverter.ToMessage(Object, IMessageHeaders, Object)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 69
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public IMessage ToMessage(object payload, IMessageHeaders headers, object conversionHint)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    - id: conversionHint
      type: System.Object
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Function ToMessage(payload As Object, headers As IMessageHeaders, conversionHint As Object) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage*
  implements:
  - Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  id: ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: ToMessage(Object, IMessageHeaders)
  nameWithType: ContentTypeDelegatingMessageConverter.ToMessage(Object, IMessageHeaders)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 75
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: public IMessage ToMessage(object payload, IMessageHeaders headers)
    parameters:
    - id: payload
      type: System.Object
    - id: headers
      type: Steeltoe.Messaging.IMessageHeaders
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Function ToMessage(payload As Object, headers As IMessageHeaders) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage*
  implements:
  - Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType(System.String)
  id: GetConverterForContentType(System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
  langs:
  - csharp
  - vb
  name: GetConverterForContentType(String)
  nameWithType: ContentTypeDelegatingMessageConverter.GetConverterForContentType(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType(System.String)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetConverterForContentType
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/Converter/ContentTypeDelegatingMessageConverter.cs
    startLine: 80
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support.Converter
  syntax:
    content: protected virtual ISmartMessageConverter GetConverterForContentType(string contentType)
    parameters:
    - id: contentType
      type: System.String
    return:
      type: Steeltoe.Messaging.Converter.ISmartMessageConverter
    content.vb: Protected Overridable Function GetConverterForContentType(contentType As String) As ISmartMessageConverter
  overload: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter
  commentId: N:Steeltoe.Messaging.RabbitMQ.Support.Converter
  name: Steeltoe.Messaging.RabbitMQ.Support.Converter
  nameWithType: Steeltoe.Messaging.RabbitMQ.Support.Converter
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.ISmartMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: ISmartMessageConverter
  nameWithType: ISmartMessageConverter
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter
- uid: Steeltoe.Messaging.Converter.IMessageConverter
  commentId: T:Steeltoe.Messaging.Converter.IMessageConverter
  parent: Steeltoe.Messaging.Converter
  name: IMessageConverter
  nameWithType: IMessageConverter
  fullName: Steeltoe.Messaging.Converter.IMessageConverter
- uid: IServiceNameAware
  isExternal: true
  name: IServiceNameAware
  nameWithType: IServiceNameAware
  fullName: IServiceNameAware
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Converter
  commentId: N:Steeltoe.Messaging.Converter
  name: Steeltoe.Messaging.Converter
  nameWithType: Steeltoe.Messaging.Converter
  fullName: Steeltoe.Messaging.Converter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName
  name: ServiceName
  nameWithType: ContentTypeDelegatingMessageConverter.ServiceName
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.#ctor
  name: ContentTypeDelegatingMessageConverter
  nameWithType: ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter
- uid: System.Collections.Generic.Dictionary{System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Steeltoe.Messaging.Converter.ISmartMessageConverter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ISmartMessageConverter>
  nameWithType: Dictionary<String, ISmartMessageConverter>
  fullName: System.Collections.Generic.Dictionary<System.String, Steeltoe.Messaging.Converter.ISmartMessageConverter>
  nameWithType.vb: Dictionary(Of String, ISmartMessageConverter)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Steeltoe.Messaging.Converter.ISmartMessageConverter)
  name.vb: Dictionary(Of String, ISmartMessageConverter)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter
    name: ISmartMessageConverter
    nameWithType: ISmartMessageConverter
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter
    name: ISmartMessageConverter
    nameWithType: ISmartMessageConverter
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate
  name: AddDelegate
  nameWithType: ContentTypeDelegatingMessageConverter.AddDelegate
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate
  name: RemoveDelegate
  nameWithType: ContentTypeDelegatingMessageConverter.RemoveDelegate
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage
  name: FromMessage
  nameWithType: ContentTypeDelegatingMessageConverter.FromMessage
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: FromMessage(IMessage, Type, Object)
  nameWithType: ISmartMessageConverter.FromMessage(IMessage, Type, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
    name: FromMessage
    nameWithType: ISmartMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type,System.Object)
    name: FromMessage
    nameWithType: ISmartMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: FromMessage<T>(IMessage, Object)
  nameWithType: ISmartMessageConverter.FromMessage<T>(IMessage, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage, System.Object)
  nameWithType.vb: ISmartMessageConverter.FromMessage(Of T)(IMessage, Object)
  fullName.vb: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage, System.Object)
  name.vb: FromMessage(Of T)(IMessage, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
    name: FromMessage<T>
    nameWithType: ISmartMessageConverter.FromMessage<T>
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage,System.Object)
    name: FromMessage(Of T)
    nameWithType: ISmartMessageConverter.FromMessage(Of T)
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  isExternal: true
  name: FromMessage(IMessage, Type)
  nameWithType: IMessageConverter.FromMessage(IMessage, Type)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage, System.Type)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
    name: FromMessage
    nameWithType: IMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
    name: FromMessage
    nameWithType: IMessageConverter.FromMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  name: FromMessage<T>(IMessage)
  nameWithType: IMessageConverter.FromMessage<T>(IMessage)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageConverter.FromMessage(Of T)(IMessage)
  fullName.vb: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: FromMessage(Of T)(IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
    name: FromMessage<T>
    nameWithType: IMessageConverter.FromMessage<T>
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage``1(Steeltoe.Messaging.IMessage)
    name: FromMessage(Of T)
    nameWithType: IMessageConverter.FromMessage(Of T)
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.FromMessage(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage
  name: ToMessage
  nameWithType: ContentTypeDelegatingMessageConverter.ToMessage
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage
- uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  commentId: M:Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
  parent: Steeltoe.Messaging.Converter.ISmartMessageConverter
  isExternal: true
  name: ToMessage(Object, IMessageHeaders, Object)
  nameWithType: ISmartMessageConverter.ToMessage(Object, IMessageHeaders, Object)
  fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
    name: ToMessage
    nameWithType: ISmartMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Object)
    name: ToMessage
    nameWithType: ISmartMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.ISmartMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
- uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  commentId: M:Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
  parent: Steeltoe.Messaging.Converter.IMessageConverter
  isExternal: true
  name: ToMessage(Object, IMessageHeaders)
  nameWithType: IMessageConverter.ToMessage(Object, IMessageHeaders)
  fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object, Steeltoe.Messaging.IMessageHeaders)
  spec.csharp:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
    name: ToMessage
    nameWithType: IMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage(System.Object,Steeltoe.Messaging.IMessageHeaders)
    name: ToMessage
    nameWithType: IMessageConverter.ToMessage
    fullName: Steeltoe.Messaging.Converter.IMessageConverter.ToMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessageHeaders
    name: IMessageHeaders
    nameWithType: IMessageHeaders
    fullName: Steeltoe.Messaging.IMessageHeaders
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType
  name: GetConverterForContentType
  nameWithType: ContentTypeDelegatingMessageConverter.GetConverterForContentType
  fullName: Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType
