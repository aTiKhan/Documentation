### YamlMime:ManagedReference
items:
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry
  commentId: T:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry
  id: IConsulServiceRegistry
  parent: Steeltoe.Discovery.Consul.Registry
  children:
  - Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  - Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  - Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  - Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration,System.String)
  langs:
  - csharp
  - vb
  name: IConsulServiceRegistry
  nameWithType: IConsulServiceRegistry
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry
  type: Interface
  source:
    remote:
      path: src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IConsulServiceRegistry
    path: ../Steeltoe/src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
    startLine: 12
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Registry
  summary: "\nA Consul service registry\n"
  example: []
  syntax:
    content: 'public interface IConsulServiceRegistry : IServiceRegistry<IConsulRegistration>'
    content.vb: >-
      Public Interface IConsulServiceRegistry

          Inherits IServiceRegistry(Of IConsulRegistration)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  commentId: M:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  id: RegisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  parent: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry
  langs:
  - csharp
  - vb
  name: RegisterAsync(IConsulRegistration)
  nameWithType: IConsulServiceRegistry.RegisterAsync(IConsulRegistration)
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RegisterAsync
    path: ../Steeltoe/src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
    startLine: 19
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Registry
  summary: "\nRegister the provided registration in Consul\n"
  example: []
  syntax:
    content: Task RegisterAsync(IConsulRegistration registration)
    parameters:
    - id: registration
      type: Steeltoe.Discovery.Consul.Registry.IConsulRegistration
      description: the registration to register
    return:
      type: System.Threading.Tasks.Task
      description: the task
    content.vb: Function RegisterAsync(registration As IConsulRegistration) As Task
  overload: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync*
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  commentId: M:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  id: DeregisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  parent: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry
  langs:
  - csharp
  - vb
  name: DeregisterAsync(IConsulRegistration)
  nameWithType: IConsulServiceRegistry.DeregisterAsync(IConsulRegistration)
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DeregisterAsync
    path: ../Steeltoe/src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
    startLine: 26
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Registry
  summary: "\nDeregister the provided registration in Consul\n"
  example: []
  syntax:
    content: Task DeregisterAsync(IConsulRegistration registration)
    parameters:
    - id: registration
      type: Steeltoe.Discovery.Consul.Registry.IConsulRegistration
      description: the registration to register
    return:
      type: System.Threading.Tasks.Task
      description: the task
    content.vb: Function DeregisterAsync(registration As IConsulRegistration) As Task
  overload: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync*
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration,System.String)
  commentId: M:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration,System.String)
  id: SetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration,System.String)
  parent: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry
  langs:
  - csharp
  - vb
  name: SetStatusAsync(IConsulRegistration, String)
  nameWithType: IConsulServiceRegistry.SetStatusAsync(IConsulRegistration, String)
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration, System.String)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetStatusAsync
    path: ../Steeltoe/src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
    startLine: 34
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Registry
  summary: "\nSet the status of the registration in Consul\n"
  example: []
  syntax:
    content: Task SetStatusAsync(IConsulRegistration registration, string status)
    parameters:
    - id: registration
      type: Steeltoe.Discovery.Consul.Registry.IConsulRegistration
      description: the registration to register
    - id: status
      type: System.String
      description: the status value to set
    return:
      type: System.Threading.Tasks.Task
      description: the task
    content.vb: Function SetStatusAsync(registration As IConsulRegistration, status As String) As Task
  overload: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync*
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  commentId: M:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  id: GetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  parent: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry
  langs:
  - csharp
  - vb
  name: GetStatusAsync(IConsulRegistration)
  nameWithType: IConsulServiceRegistry.GetStatusAsync(IConsulRegistration)
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync(Steeltoe.Discovery.Consul.Registry.IConsulRegistration)
  type: Method
  source:
    remote:
      path: src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetStatusAsync
    path: ../Steeltoe/src/Discovery/src/Consul/Registry/IConsulServiceRegistry.cs
    startLine: 41
  assemblies:
  - Steeltoe.Discovery.Consul
  namespace: Steeltoe.Discovery.Consul.Registry
  summary: "\nGet the status of the registration in Consul\n"
  example: []
  syntax:
    content: Task<object> GetStatusAsync(IConsulRegistration registration)
    parameters:
    - id: registration
      type: Steeltoe.Discovery.Consul.Registry.IConsulRegistration
      description: the registration to register
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: the status value
    content.vb: Function GetStatusAsync(registration As IConsulRegistration) As Task(Of Object)
  overload: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync*
references:
- uid: Steeltoe.Discovery.Consul.Registry
  commentId: N:Steeltoe.Discovery.Consul.Registry
  name: Steeltoe.Discovery.Consul.Registry
  nameWithType: Steeltoe.Discovery.Consul.Registry
  fullName: Steeltoe.Discovery.Consul.Registry
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync*
  commentId: Overload:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync
  name: RegisterAsync
  nameWithType: IConsulServiceRegistry.RegisterAsync
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.RegisterAsync
- uid: Steeltoe.Discovery.Consul.Registry.IConsulRegistration
  commentId: T:Steeltoe.Discovery.Consul.Registry.IConsulRegistration
  parent: Steeltoe.Discovery.Consul.Registry
  name: IConsulRegistration
  nameWithType: IConsulRegistration
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulRegistration
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync*
  commentId: Overload:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync
  name: DeregisterAsync
  nameWithType: IConsulServiceRegistry.DeregisterAsync
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.DeregisterAsync
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync*
  commentId: Overload:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync
  name: SetStatusAsync
  nameWithType: IConsulServiceRegistry.SetStatusAsync
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.SetStatusAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync*
  commentId: Overload:Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync
  name: GetStatusAsync
  nameWithType: IConsulServiceRegistry.GetStatusAsync
  fullName: Steeltoe.Discovery.Consul.Registry.IConsulServiceRegistry.GetStatusAsync
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
