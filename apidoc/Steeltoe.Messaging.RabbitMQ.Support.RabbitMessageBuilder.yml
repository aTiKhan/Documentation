### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  commentId: T:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  id: RabbitMessageBuilder
  parent: Steeltoe.Messaging.RabbitMQ.Support
  children:
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload(System.Object,System.Type)
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload``1(``0)
  langs:
  - csharp
  - vb
  name: RabbitMessageBuilder
  nameWithType: RabbitMessageBuilder
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RabbitMessageBuilder
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 13
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: public static class RabbitMessageBuilder
    content.vb: Public Module RabbitMessageBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  id: FromMessage``1(Steeltoe.Messaging.IMessage{``0})
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  langs:
  - csharp
  - vb
  name: FromMessage<P>(IMessage<P>)
  nameWithType: RabbitMessageBuilder.FromMessage<P>(IMessage<P>)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage<P>(Steeltoe.Messaging.IMessage<P>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 15
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: public static AbstractMessageBuilder FromMessage<P>(IMessage<P> message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage{{P}}
    typeParameters:
    - id: P
    return:
      type: Steeltoe.Messaging.Support.AbstractMessageBuilder
    content.vb: Public Shared Function FromMessage(Of P)(message As IMessage(Of P)) As AbstractMessageBuilder
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage*
  nameWithType.vb: RabbitMessageBuilder.FromMessage(Of P)(IMessage(Of P))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage(Of P)(Steeltoe.Messaging.IMessage(Of P))
  name.vb: FromMessage(Of P)(IMessage(Of P))
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  id: FromMessage(Steeltoe.Messaging.IMessage,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  langs:
  - csharp
  - vb
  name: FromMessage(IMessage, Type)
  nameWithType: RabbitMessageBuilder.FromMessage(IMessage, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage(Steeltoe.Messaging.IMessage, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: FromMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 20
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: public static AbstractMessageBuilder FromMessage(IMessage message, Type payloadType = null)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    - id: payloadType
      type: System.Type
    return:
      type: Steeltoe.Messaging.Support.AbstractMessageBuilder
    content.vb: Public Shared Function FromMessage(message As IMessage, payloadType As Type = Nothing) As AbstractMessageBuilder
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload``1(``0)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload``1(``0)
  id: WithPayload``1(``0)
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  langs:
  - csharp
  - vb
  name: WithPayload<P>(P)
  nameWithType: RabbitMessageBuilder.WithPayload<P>(P)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload<P>(P)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithPayload
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 34
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: public static AbstractMessageBuilder WithPayload<P>(P payload)
    parameters:
    - id: payload
      type: '{P}'
    typeParameters:
    - id: P
    return:
      type: Steeltoe.Messaging.Support.AbstractMessageBuilder
    content.vb: Public Shared Function WithPayload(Of P)(payload As P) As AbstractMessageBuilder
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload*
  nameWithType.vb: RabbitMessageBuilder.WithPayload(Of P)(P)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload(Of P)(P)
  name.vb: WithPayload(Of P)(P)
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload(System.Object,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload(System.Object,System.Type)
  id: WithPayload(System.Object,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  langs:
  - csharp
  - vb
  name: WithPayload(Object, Type)
  nameWithType: RabbitMessageBuilder.WithPayload(Object, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WithPayload
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 39
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: public static AbstractMessageBuilder WithPayload(object payload, Type payloadType = null)
    parameters:
    - id: payload
      type: System.Object
    - id: payloadType
      type: System.Type
    return:
      type: Steeltoe.Messaging.Support.AbstractMessageBuilder
    content.vb: Public Shared Function WithPayload(payload As Object, payloadType As Type = Nothing) As AbstractMessageBuilder
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  id: CreateMessage(System.Object,Steeltoe.Messaging.IMessageHeaders,System.Type)
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
  langs:
  - csharp
  - vb
  name: CreateMessage(Object, IMessageHeaders, Type)
  nameWithType: RabbitMessageBuilder.CreateMessage(Object, IMessageHeaders, Type)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage(System.Object, Steeltoe.Messaging.IMessageHeaders, System.Type)
  type: Method
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CreateMessage
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 53
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: public static IMessage CreateMessage(object payload, IMessageHeaders messageHeaders, Type payloadType = null)
    parameters:
    - id: payload
      type: System.Object
    - id: messageHeaders
      type: Steeltoe.Messaging.IMessageHeaders
    - id: payloadType
      type: System.Type
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Shared Function CreateMessage(payload As Object, messageHeaders As IMessageHeaders, payloadType As Type = Nothing) As IMessage
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Steeltoe.Messaging.RabbitMQ.Support
  commentId: N:Steeltoe.Messaging.RabbitMQ.Support
  name: Steeltoe.Messaging.RabbitMQ.Support
  nameWithType: Steeltoe.Messaging.RabbitMQ.Support
  fullName: Steeltoe.Messaging.RabbitMQ.Support
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage
  name: FromMessage
  nameWithType: RabbitMessageBuilder.FromMessage
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage
- uid: Steeltoe.Messaging.IMessage{{P}}
  commentId: T:Steeltoe.Messaging.IMessage{`0}
  parent: Steeltoe.Messaging
  definition: Steeltoe.Messaging.IMessage`1
  name: IMessage<P>
  nameWithType: IMessage<P>
  fullName: Steeltoe.Messaging.IMessage<P>
  nameWithType.vb: IMessage(Of P)
  fullName.vb: Steeltoe.Messaging.IMessage(Of P)
  name.vb: IMessage(Of P)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: P
    nameWithType: P
    fullName: P
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: P
    nameWithType: P
    fullName: P
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
  commentId: T:Steeltoe.Messaging.Support.AbstractMessageBuilder
  parent: Steeltoe.Messaging.Support
  name: AbstractMessageBuilder
  nameWithType: AbstractMessageBuilder
  fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
- uid: Steeltoe.Messaging.IMessage`1
  commentId: T:Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.Support
  commentId: N:Steeltoe.Messaging.Support
  name: Steeltoe.Messaging.Support
  nameWithType: Steeltoe.Messaging.Support
  fullName: Steeltoe.Messaging.Support
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload
  name: WithPayload
  nameWithType: RabbitMessageBuilder.WithPayload
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload
- uid: '{P}'
  commentId: '!:P'
  definition: P
  name: P
  nameWithType: P
  fullName: P
- uid: P
  name: P
  nameWithType: P
  fullName: P
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage
  name: CreateMessage
  nameWithType: RabbitMessageBuilder.CreateMessage
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage
- uid: Steeltoe.Messaging.IMessageHeaders
  commentId: T:Steeltoe.Messaging.IMessageHeaders
  parent: Steeltoe.Messaging
  name: IMessageHeaders
  nameWithType: IMessageHeaders
  fullName: Steeltoe.Messaging.IMessageHeaders
