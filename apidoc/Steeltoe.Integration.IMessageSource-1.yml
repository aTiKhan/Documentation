### YamlMime:ManagedReference
items:
- uid: Steeltoe.Integration.IMessageSource`1
  commentId: T:Steeltoe.Integration.IMessageSource`1
  id: IMessageSource`1
  parent: Steeltoe.Integration
  children:
  - Steeltoe.Integration.IMessageSource`1.Receive
  langs:
  - csharp
  - vb
  name: IMessageSource<T>
  nameWithType: IMessageSource<T>
  fullName: Steeltoe.Integration.IMessageSource<T>
  type: Interface
  source:
    remote:
      path: src/Integration/src/Abstractions/IMessageSource.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IMessageSource
    path: ../Steeltoe/src/Integration/src/Abstractions/IMessageSource.cs
    startLine: 24
  assemblies:
  - Steeltoe.Integration.Abstractions
  namespace: Steeltoe.Integration
  summary: "\nA typed interface for any source of Messages that can be polled.\n"
  example: []
  syntax:
    content: 'public interface IMessageSource<out T> : IMessageSource'
    typeParameters:
    - id: T
      description: the type of payload in the message
    content.vb: >-
      Public Interface IMessageSource(Of Out T)

          Inherits IMessageSource
  nameWithType.vb: IMessageSource(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Steeltoe.Integration.IMessageSource(Of T)
  name.vb: IMessageSource(Of T)
- uid: Steeltoe.Integration.IMessageSource`1.Receive
  commentId: M:Steeltoe.Integration.IMessageSource`1.Receive
  id: Receive
  parent: Steeltoe.Integration.IMessageSource`1
  langs:
  - csharp
  - vb
  name: Receive()
  nameWithType: IMessageSource<T>.Receive()
  fullName: Steeltoe.Integration.IMessageSource<T>.Receive()
  type: Method
  source:
    remote:
      path: src/Integration/src/Abstractions/IMessageSource.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Receive
    path: ../Steeltoe/src/Integration/src/Abstractions/IMessageSource.cs
    startLine: 30
  assemblies:
  - Steeltoe.Integration.Abstractions
  namespace: Steeltoe.Integration
  summary: "\nPoll for a message from the source\n"
  example: []
  syntax:
    content: IMessage<T> Receive()
    return:
      type: Steeltoe.Messaging.IMessage{{T}}
      description: the message
    content.vb: Function Receive As IMessage(Of T)
  overload: Steeltoe.Integration.IMessageSource`1.Receive*
  nameWithType.vb: IMessageSource(Of T).Receive()
  fullName.vb: Steeltoe.Integration.IMessageSource(Of T).Receive()
references:
- uid: Steeltoe.Integration
  commentId: N:Steeltoe.Integration
  name: Steeltoe.Integration
  nameWithType: Steeltoe.Integration
  fullName: Steeltoe.Integration
- uid: Steeltoe.Integration.IMessageSource`1.Receive*
  commentId: Overload:Steeltoe.Integration.IMessageSource`1.Receive
  name: Receive
  nameWithType: IMessageSource<T>.Receive
  fullName: Steeltoe.Integration.IMessageSource<T>.Receive
  nameWithType.vb: IMessageSource(Of T).Receive
  fullName.vb: Steeltoe.Integration.IMessageSource(Of T).Receive
- uid: Steeltoe.Messaging.IMessage{{T}}
  commentId: T:Steeltoe.Messaging.IMessage{``0}
  parent: Steeltoe.Messaging
  definition: Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage`1
  commentId: T:Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
