### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  commentId: T:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  id: AbstractMessagingTemplate`1
  parent: Steeltoe.Messaging.Core
  children:
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: AbstractMessagingTemplate<D>
  nameWithType: AbstractMessagingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>
  type: Class
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: AbstractMessagingTemplate
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 10
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: 'public abstract class AbstractMessagingTemplate<D> : AbstractMessageReceivingTemplate<D>, IMessageSendingOperations<D>, IMessageReceivingOperations<D>, IMessageRequestReplyOperations<D>'
    typeParameters:
    - id: D
    content.vb: >-
      Public MustInherit Class AbstractMessagingTemplate(Of D)

          Inherits AbstractMessageReceivingTemplate(Of D)

          Implements IMessageSendingOperations(Of D), IMessageReceivingOperations(Of D), IMessageRequestReplyOperations(Of D)
  inheritance:
  - System.Object
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  derivedClasses:
  - Steeltoe.Messaging.Core.AbstractDestinationResolvingMessagingTemplate`1
  - Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
  implements:
  - Steeltoe.Messaging.Core.IMessageSendingOperations{{D}}
  - Steeltoe.Messaging.Core.IMessageReceivingOperations{{D}}
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  inheritedMembers:
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DefaultReceiveDestination
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ThrowReceivedExceptions
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAsync(System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAsync({D},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvertAsync``1({D},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.Receive
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.Receive({D})
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvert``1
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvert``1({D})
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.RequiredDefaultReceiveDestination
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DoReceiveAsync({D},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DoReceive({D})
  - Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DoConvert``1(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.CONVERSION_HINT_HEADER
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DefaultSendDestination
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.MessageConverter
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.SendAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend(System.Object)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.Send(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.Send({D},Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DoSendAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DoSend({D},Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.RequiredDefaultSendDestination
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  - Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: AbstractMessagingTemplate(Of D)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D)
  name.vb: AbstractMessagingTemplate(Of D)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 14
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(object request, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(request As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 19
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(D destination, object request, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(destination As D, request As Object, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 24
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(D destination, object request, IDictionary<string, object> headers, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(destination As D, request As Object, headers As IDictionary(Of String, Object), cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 29
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(object request, IMessagePostProcessor requestPostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: System.Object
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(request As Object, requestPostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 34
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(D destination, object request, IMessagePostProcessor requestPostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(destination As D, request As Object, requestPostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  id: ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 39
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<T> ConvertSendAndReceiveAsync<T>(D destination, object request, IDictionary<string, object> headers, IMessagePostProcessor requestPostProcessor, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Overridable Function ConvertSendAndReceiveAsync(Of T)(destination As D, request As Object, headers As IDictionary(Of String, Object), requestPostProcessor As IMessagePostProcessor, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceiveAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 51
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<IMessage> SendAndReceiveAsync(IMessage requestMessage, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function SendAndReceiveAsync(requestMessage As IMessage, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceiveAsync(IMessage, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: SendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 56
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual Task<IMessage> SendAndReceiveAsync(D destination, IMessage requestMessage, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destination
      type: '{D}'
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Public Overridable Function SendAndReceiveAsync(destination As D, requestMessage As IMessage, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceiveAsync(D, IMessage, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object)
  id: ConvertSendAndReceive``1(System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(Object)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 61
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(object request)
    parameters:
    - id: request
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(request As Object) As T
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(System.Object)
  name.vb: ConvertSendAndReceive(Of T)(Object)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object)
  id: ConvertSendAndReceive``1(`0,System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(D, Object)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 66
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(D destination, object request)
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(destination As D, request As Object) As T
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(D, Object)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 71
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(D destination, object request, IDictionary<string, object> headers)
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(destination As D, request As Object, headers As IDictionary(Of String, Object)) As T
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 76
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(object request, IMessagePostProcessor requestPostProcessor)
    parameters:
    - id: request
      type: System.Object
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(request As Object, requestPostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 81
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(D destination, object request, IMessagePostProcessor requestPostProcessor)
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(destination As D, request As Object, requestPostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  id: ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ConvertSendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 86
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual T ConvertSendAndReceive<T>(D destination, object request, IDictionary<string, object> headers, IMessagePostProcessor requestPostProcessor)
    parameters:
    - id: destination
      type: '{D}'
    - id: request
      type: System.Object
    - id: headers
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    - id: requestPostProcessor
      type: Steeltoe.Messaging.Core.IMessagePostProcessor
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Overridable Function ConvertSendAndReceive(Of T)(destination As D, request As Object, headers As IDictionary(Of String, Object), requestPostProcessor As IMessagePostProcessor) As T
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  id: SendAndReceive(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: SendAndReceive(IMessage)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceive(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceive(Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 98
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual IMessage SendAndReceive(IMessage requestMessage)
    parameters:
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function SendAndReceive(requestMessage As IMessage) As IMessage
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceive(IMessage)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceive(Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  id: SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: SendAndReceive(D, IMessage)
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceive(D, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 103
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: public virtual IMessage SendAndReceive(D destination, IMessage requestMessage)
    parameters:
    - id: destination
      type: '{D}'
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Public Overridable Function SendAndReceive(destination As D, requestMessage As IMessage) As IMessage
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive*
  implements:
  - Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive({D},Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceive(D, IMessage)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceive(D, Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
  id: DoSendAndReceive(`0,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: DoSendAndReceive(D, IMessage)
  nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceive(D, Steeltoe.Messaging.IMessage)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceive
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 108
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: protected abstract IMessage DoSendAndReceive(D destination, IMessage requestMessage)
    parameters:
    - id: destination
      type: '{D}'
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    return:
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected MustOverride Function DoSendAndReceive(destination As D, requestMessage As IMessage) As IMessage
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive*
  nameWithType.vb: AbstractMessagingTemplate(Of D).DoSendAndReceive(D, IMessage)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceive(D, Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  id: DoSendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1
  langs:
  - csharp
  - vb
  name: DoSendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: DoSendAndReceiveAsync
    path: ../Steeltoe/src/Messaging/src/MessagingBase/Core/AbstractMessagingTemplate.cs
    startLine: 110
  assemblies:
  - Steeltoe.Messaging.MessagingBase
  namespace: Steeltoe.Messaging.Core
  syntax:
    content: protected abstract Task<IMessage> DoSendAndReceiveAsync(D destination, IMessage requestMessage, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: destination
      type: '{D}'
    - id: requestMessage
      type: Steeltoe.Messaging.IMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
    content.vb: Protected MustOverride Function DoSendAndReceiveAsync(destination As D, requestMessage As IMessage, cancellationToken As CancellationToken = Nothing) As Task(Of IMessage)
  overload: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync*
  nameWithType.vb: AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync(D, IMessage, CancellationToken)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
references:
- uid: Steeltoe.Messaging.Core
  commentId: N:Steeltoe.Messaging.Core
  name: Steeltoe.Messaging.Core
  nameWithType: Steeltoe.Messaging.Core
  fullName: Steeltoe.Messaging.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
  name: AbstractMessageSendingTemplate<D>
  nameWithType: AbstractMessageSendingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>
  nameWithType.vb: AbstractMessageSendingTemplate(Of D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D)
  name.vb: AbstractMessageSendingTemplate(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
  name: AbstractMessageReceivingTemplate<D>
  nameWithType: AbstractMessageReceivingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D)
  name.vb: AbstractMessageReceivingTemplate(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageSendingOperations{{D}}
  commentId: T:Steeltoe.Messaging.Core.IMessageSendingOperations{`0}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.IMessageSendingOperations`1
  name: IMessageSendingOperations<D>
  nameWithType: IMessageSendingOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageSendingOperations<D>
  nameWithType.vb: IMessageSendingOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageSendingOperations(Of D)
  name.vb: IMessageSendingOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageReceivingOperations{{D}}
  commentId: T:Steeltoe.Messaging.Core.IMessageReceivingOperations{`0}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
  name: IMessageReceivingOperations<D>
  nameWithType: IMessageReceivingOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations<D>
  nameWithType.vb: IMessageReceivingOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageReceivingOperations(Of D)
  name.vb: IMessageReceivingOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  commentId: T:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}
  parent: Steeltoe.Messaging.Core
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  name: IMessageRequestReplyOperations<D>
  nameWithType: IMessageRequestReplyOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>
  nameWithType.vb: IMessageRequestReplyOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D)
  name.vb: IMessageRequestReplyOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.DefaultReceiveDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DefaultReceiveDestination
  name: DefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<D>.DefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ThrowReceivedExceptions
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.ThrowReceivedExceptions
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ThrowReceivedExceptions
  name: ThrowReceivedExceptions
  nameWithType: AbstractMessageReceivingTemplate<D>.ThrowReceivedExceptions
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ThrowReceivedExceptions
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ThrowReceivedExceptions
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ThrowReceivedExceptions
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAsync(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.ReceiveAsync(System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
  name: ReceiveAsync(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAsync(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAsync({D},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.ReceiveAsync(`0,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
  name: ReceiveAsync(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAsync(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync(D, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  name: ReceiveAndConvertAsync<T>(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvertAsync``1({D},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
  name: ReceiveAndConvertAsync<T>(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(D, System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(D, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.Receive
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.Receive
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
  name: Receive()
  nameWithType: AbstractMessageReceivingTemplate<D>.Receive()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).Receive()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<D>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of D).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.Receive({D})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.Receive(`0)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
  name: Receive(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.Receive(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).Receive(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<D>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of D).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvert``1
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.ReceiveAndConvert``1
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
  name: ReceiveAndConvert<T>()
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)()
  name.vb: ReceiveAndConvert(Of T)()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.ReceiveAndConvert``1({D})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.ReceiveAndConvert``1(`0)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
  name: ReceiveAndConvert<T>(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)(D)
  name.vb: ReceiveAndConvert(Of T)(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.RequiredDefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.RequiredDefaultReceiveDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.RequiredDefaultReceiveDestination
  name: RequiredDefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<D>.RequiredDefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.RequiredDefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).RequiredDefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).RequiredDefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DoReceiveAsync({D},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.DoReceiveAsync(`0,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
  name: DoReceiveAsync(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoReceiveAsync(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceiveAsync(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoReceiveAsync(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceiveAsync(D, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DoReceive({D})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.DoReceive(`0)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
  name: DoReceive(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoReceive(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceive(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoReceive(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceive(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate<D>.DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}.DoConvert``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{`0}.DoConvert``1(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
  name: DoConvert<T>(IMessage)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoConvert<T>(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoConvert<T>(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: DoConvert(Of T)(IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.DoConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.CONVERSION_HINT_HEADER
  commentId: F:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.CONVERSION_HINT_HEADER
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.CONVERSION_HINT_HEADER
  name: CONVERSION_HINT_HEADER
  nameWithType: AbstractMessageSendingTemplate<D>.CONVERSION_HINT_HEADER
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.CONVERSION_HINT_HEADER
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).CONVERSION_HINT_HEADER
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).CONVERSION_HINT_HEADER
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.DefaultSendDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DefaultSendDestination
  name: DefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<D>.DefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.MessageConverter
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.MessageConverter
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.MessageConverter
  name: MessageConverter
  nameWithType: AbstractMessageSendingTemplate<D>.MessageConverter
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.MessageConverter
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).MessageConverter
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).MessageConverter
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(D, Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name: ConvertAndSendAsync(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSendAsync({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertAndSendAsync(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAsync(IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.SendAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).SendAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.SendAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.SendAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).SendAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend(System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSend(System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
  name: ConvertAndSend(Object)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSend(`0,System.Object)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
  name: ConvertAndSend(D, Object)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ConvertAndSend(D, Object, IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertAndSend(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertAndSend(Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertAndSend(D, Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ConvertAndSend({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertAndSend(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertAndSend(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.Send(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.Send(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
  name: Send(IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.Send(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).Send(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<D>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of D).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.Send({D},Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.Send(`0,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
  name: Send(D, IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.Send(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).Send(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<D>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of D).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DoSendAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: DoSendAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.DoSendAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoSendAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DoSend({D},Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.DoSend(`0,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
  name: DoSend(D, IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.DoSend(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSend(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoSend(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSend(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate<D>.DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate(Of D).DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.RequiredDefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.RequiredDefaultSendDestination
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.RequiredDefaultSendDestination
  name: RequiredDefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<D>.RequiredDefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.RequiredDefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).RequiredDefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).RequiredDefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoConvert(System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoConvert(System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate<D>.DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate(Of D).DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{`0}.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate{{D}}
  definition: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ProcessHeadersToSend(IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<D>.ProcessHeadersToSend(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ProcessHeadersToSend(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ProcessHeadersToSend(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate<D>.ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
  name: AbstractMessageSendingTemplate<D>
  nameWithType: AbstractMessageSendingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>
  nameWithType.vb: AbstractMessageSendingTemplate(Of D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D)
  name.vb: AbstractMessageSendingTemplate(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1
    name: AbstractMessageSendingTemplate
    nameWithType: AbstractMessageSendingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
  commentId: T:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
  name: AbstractMessageReceivingTemplate<D>
  nameWithType: AbstractMessageReceivingTemplate<D>
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D)
  name.vb: AbstractMessageReceivingTemplate(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1
    name: AbstractMessageReceivingTemplate
    nameWithType: AbstractMessageReceivingTemplate
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
  commentId: T:Steeltoe.Messaging.Core.IMessageSendingOperations`1
  name: IMessageSendingOperations<D>
  nameWithType: IMessageSendingOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageSendingOperations<D>
  nameWithType.vb: IMessageSendingOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageSendingOperations(Of D)
  name.vb: IMessageSendingOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageSendingOperations`1
    name: IMessageSendingOperations
    nameWithType: IMessageSendingOperations
    fullName: Steeltoe.Messaging.Core.IMessageSendingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
  commentId: T:Steeltoe.Messaging.Core.IMessageReceivingOperations`1
  name: IMessageReceivingOperations<D>
  nameWithType: IMessageReceivingOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations<D>
  nameWithType.vb: IMessageReceivingOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageReceivingOperations(Of D)
  name.vb: IMessageReceivingOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageReceivingOperations`1
    name: IMessageReceivingOperations
    nameWithType: IMessageReceivingOperations
    fullName: Steeltoe.Messaging.Core.IMessageReceivingOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  commentId: T:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
  name: IMessageRequestReplyOperations<D>
  nameWithType: IMessageRequestReplyOperations<D>
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>
  nameWithType.vb: IMessageRequestReplyOperations(Of D)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D)
  name.vb: IMessageRequestReplyOperations(Of D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1
    name: IMessageRequestReplyOperations
    nameWithType: IMessageRequestReplyOperations
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DefaultReceiveDestination
  name: DefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<D>.DefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ThrowReceivedExceptions
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ThrowReceivedExceptions
  name: ThrowReceivedExceptions
  nameWithType: AbstractMessageReceivingTemplate<D>.ThrowReceivedExceptions
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ThrowReceivedExceptions
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ThrowReceivedExceptions
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ThrowReceivedExceptions
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAsync(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAsync(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAsync(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAsync(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync(D, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAsync(`0,System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAndConvertAsync<T>(CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
  isExternal: true
  name: ReceiveAndConvertAsync<T>(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)(D, System.Threading.CancellationToken)
  name.vb: ReceiveAndConvertAsync(Of T)(D, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvertAsync``1(`0,System.Threading.CancellationToken)
    name: ReceiveAndConvertAsync(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
  name: Receive()
  nameWithType: AbstractMessageReceivingTemplate<D>.Receive()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).Receive()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<D>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of D).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
  name: Receive(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.Receive(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).Receive(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate<D>.Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.Receive(`0)
    name: Receive
    nameWithType: AbstractMessageReceivingTemplate(Of D).Receive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).Receive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
  name: ReceiveAndConvert<T>()
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>()
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>()
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)()
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)()
  name.vb: ReceiveAndConvert(Of T)()
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
  name: ReceiveAndConvert<T>(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)(D)
  name.vb: ReceiveAndConvert(Of T)(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.ReceiveAndConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.ReceiveAndConvert``1(`0)
    name: ReceiveAndConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).ReceiveAndConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.RequiredDefaultReceiveDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.RequiredDefaultReceiveDestination
  name: RequiredDefaultReceiveDestination
  nameWithType: AbstractMessageReceivingTemplate<D>.RequiredDefaultReceiveDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.RequiredDefaultReceiveDestination
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).RequiredDefaultReceiveDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).RequiredDefaultReceiveDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DoReceiveAsync(D, CancellationToken)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoReceiveAsync(D, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceiveAsync(D, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoReceiveAsync(D, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceiveAsync(D, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate<D>.DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceiveAsync(`0,System.Threading.CancellationToken)
    name: DoReceiveAsync
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoReceiveAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
  name: DoReceive(D)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoReceive(D)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceive(D)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoReceive(D)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceive(D)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate<D>.DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoReceive(`0)
    name: DoReceive
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoReceive
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
  name: DoConvert<T>(IMessage)
  nameWithType: AbstractMessageReceivingTemplate<D>.DoConvert<T>(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoConvert<T>(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)(Steeltoe.Messaging.IMessage)
  name.vb: DoConvert(Of T)(IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert<T>
    nameWithType: AbstractMessageReceivingTemplate<D>.DoConvert<T>
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate<D>.DoConvert<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate`1.DoConvert``1(Steeltoe.Messaging.IMessage)
    name: DoConvert(Of T)
    nameWithType: AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)
    fullName: Steeltoe.Messaging.Core.AbstractMessageReceivingTemplate(Of D).DoConvert(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.CONVERSION_HINT_HEADER
  commentId: F:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.CONVERSION_HINT_HEADER
  name: CONVERSION_HINT_HEADER
  nameWithType: AbstractMessageSendingTemplate<D>.CONVERSION_HINT_HEADER
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.CONVERSION_HINT_HEADER
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).CONVERSION_HINT_HEADER
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).CONVERSION_HINT_HEADER
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DefaultSendDestination
  name: DefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<D>.DefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.MessageConverter
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.MessageConverter
  name: MessageConverter
  nameWithType: AbstractMessageSendingTemplate<D>.MessageConverter
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.MessageConverter
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).MessageConverter
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).MessageConverter
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertAndSendAsync(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertAndSendAsync(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSendAsync(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertAndSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAsync(IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.SendAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).SendAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.SendAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).SendAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.SendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).SendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
  isExternal: true
  name: ConvertAndSend(Object)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
  isExternal: true
  name: ConvertAndSend(D, Object)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: ConvertAndSend(D, Object, IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertAndSend(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertAndSend(Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertAndSend(D, Object, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertAndSend(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertAndSend(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate<D>.ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ConvertAndSend(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertAndSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ConvertAndSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ConvertAndSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
  name: Send(IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.Send(IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send(Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).Send(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<D>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of D).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
  name: Send(D, IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.Send(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).Send(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate<D>.Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.Send
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.Send(`0,Steeltoe.Messaging.IMessage)
    name: Send
    nameWithType: AbstractMessageSendingTemplate(Of D).Send
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).Send
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: DoSendAsync(D, IMessage, CancellationToken)
  nameWithType: AbstractMessageSendingTemplate<D>.DoSendAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoSendAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSendAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate<D>.DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSendAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: DoSendAsync
    nameWithType: AbstractMessageSendingTemplate(Of D).DoSendAsync
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSendAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
  name: DoSend(D, IMessage)
  nameWithType: AbstractMessageSendingTemplate<D>.DoSend(D, IMessage)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSend(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoSend(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSend(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate<D>.DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoSend(`0,Steeltoe.Messaging.IMessage)
    name: DoSend
    nameWithType: AbstractMessageSendingTemplate(Of D).DoSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoSend
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.RequiredDefaultSendDestination
  commentId: P:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.RequiredDefaultSendDestination
  name: RequiredDefaultSendDestination
  nameWithType: AbstractMessageSendingTemplate<D>.RequiredDefaultSendDestination
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.RequiredDefaultSendDestination
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).RequiredDefaultSendDestination
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).RequiredDefaultSendDestination
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: AbstractMessageSendingTemplate<D>.DoConvert(Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoConvert(System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoConvert(System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: DoConvert(Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate<D>.DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.DoConvert(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: DoConvert
    nameWithType: AbstractMessageSendingTemplate(Of D).DoConvert
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).DoConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: ProcessHeadersToSend(IDictionary<String, Object>)
  nameWithType: AbstractMessageSendingTemplate<D>.ProcessHeadersToSend(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ProcessHeadersToSend(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ProcessHeadersToSend(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate<D>.ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate<D>.ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate`1.ProcessHeadersToSend(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ProcessHeadersToSend
    nameWithType: AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend
    fullName: Steeltoe.Messaging.Core.AbstractMessageSendingTemplate(Of D).ProcessHeadersToSend
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceiveAsync
  name: ConvertSendAndReceiveAsync
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceiveAsync
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceiveAsync
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{D}'
  commentId: '!:D'
  definition: D
  name: D
  nameWithType: D
  fullName: D
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: D
  name: D
  nameWithType: D
  fullName: D
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessagePostProcessor
  commentId: T:Steeltoe.Messaging.Core.IMessagePostProcessor
  parent: Steeltoe.Messaging.Core
  name: IMessagePostProcessor
  nameWithType: IMessagePostProcessor
  fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceiveAsync``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
  isExternal: true
  name: ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor, System.Threading.CancellationToken)
  name.vb: ConvertSendAndReceiveAsync(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor, CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceiveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceiveAsync``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor,System.Threading.CancellationToken)
    name: ConvertSendAndReceiveAsync(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceiveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceiveAsync
  name: SendAndReceiveAsync
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceiveAsync
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceiveAsync
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceiveAsync
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceiveAsync
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAndReceiveAsync(IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
  commentId: T:System.Threading.Tasks.Task{Steeltoe.Messaging.IMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Steeltoe.Messaging.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAndReceiveAsync(IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceiveAsync({D},Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  name: SendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
  isExternal: true
  name: SendAndReceiveAsync(D, IMessage, CancellationToken)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, IMessage, CancellationToken)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync(D, Steeltoe.Messaging.IMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceiveAsync(`0,Steeltoe.Messaging.IMessage,System.Threading.CancellationToken)
    name: SendAndReceiveAsync
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive*
  commentId: Overload:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.ConvertSendAndReceive
  name: ConvertSendAndReceive
  nameWithType: AbstractMessagingTemplate<D>.ConvertSendAndReceive
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.ConvertSendAndReceive
  nameWithType.vb: AbstractMessagingTemplate(Of D).ConvertSendAndReceive
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).ConvertSendAndReceive
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(System.Object)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
  name: ConvertSendAndReceive<T>(Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object)
  name.vb: ConvertSendAndReceive(Of T)(Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
  isExternal: true
  name: ConvertSendAndReceive<T>(Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object)
  name.vb: ConvertSendAndReceive(Of T)(Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
  name: ConvertSendAndReceive<T>(D, Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(D, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object)
  name.vb: ConvertSendAndReceive(Of T)(D, Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.ConvertSendAndReceive``1({D},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
  isExternal: true
  name: ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, Object, IDictionary<String, Object>, IMessagePostProcessor)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>(D, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>, Steeltoe.Messaging.Core.IMessagePostProcessor)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)(D, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object), Steeltoe.Messaging.Core.IMessagePostProcessor)
  name.vb: ConvertSendAndReceive(Of T)(D, Object, IDictionary(Of String, Object), IMessagePostProcessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive<T>
    nameWithType: IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.ConvertSendAndReceive<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.ConvertSendAndReceive``1(`0,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Steeltoe.Messaging.Core.IMessagePostProcessor)
    name: ConvertSendAndReceive(Of T)
    nameWithType: IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).ConvertSendAndReceive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.Core.IMessagePostProcessor
    name: IMessagePostProcessor
    nameWithType: IMessagePostProcessor
    fullName: Steeltoe.Messaging.Core.IMessagePostProcessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive*
  commentId: Overload:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.SendAndReceive
  name: SendAndReceive
  nameWithType: AbstractMessagingTemplate<D>.SendAndReceive
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.SendAndReceive
  nameWithType.vb: AbstractMessagingTemplate(Of D).SendAndReceive
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).SendAndReceive
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceive(Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  name: SendAndReceive(IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
  name: SendAndReceive(IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}.SendAndReceive({D},Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations{`0}.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  parent: Steeltoe.Messaging.Core.IMessageRequestReplyOperations{{D}}
  definition: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: SendAndReceive(D, IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
  name: SendAndReceive(D, IMessage)
  nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive(D, IMessage)
  fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive(D, Steeltoe.Messaging.IMessage)
  nameWithType.vb: IMessageRequestReplyOperations(Of D).SendAndReceive(D, IMessage)
  fullName.vb: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive(D, Steeltoe.Messaging.IMessage)
  spec.csharp:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations<D>.SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations<D>.SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Core.IMessageRequestReplyOperations`1.SendAndReceive(`0,Steeltoe.Messaging.IMessage)
    name: SendAndReceive
    nameWithType: IMessageRequestReplyOperations(Of D).SendAndReceive
    fullName: Steeltoe.Messaging.Core.IMessageRequestReplyOperations(Of D).SendAndReceive
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive*
  commentId: Overload:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceive
  name: DoSendAndReceive
  nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceive
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceive
  nameWithType.vb: AbstractMessagingTemplate(Of D).DoSendAndReceive
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceive
- uid: Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync*
  commentId: Overload:Steeltoe.Messaging.Core.AbstractMessagingTemplate`1.DoSendAndReceiveAsync
  name: DoSendAndReceiveAsync
  nameWithType: AbstractMessagingTemplate<D>.DoSendAndReceiveAsync
  fullName: Steeltoe.Messaging.Core.AbstractMessagingTemplate<D>.DoSendAndReceiveAsync
  nameWithType.vb: AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync
  fullName.vb: Steeltoe.Messaging.Core.AbstractMessagingTemplate(Of D).DoSendAndReceiveAsync
