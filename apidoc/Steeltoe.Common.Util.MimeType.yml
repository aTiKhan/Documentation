### YamlMime:ManagedReference
items:
- uid: Steeltoe.Common.Util.MimeType
  commentId: T:Steeltoe.Common.Util.MimeType
  id: MimeType
  parent: Steeltoe.Common.Util
  children:
  - Steeltoe.Common.Util.MimeType.#ctor(Steeltoe.Common.Util.MimeType,System.Collections.Generic.IDictionary{System.String,System.String})
  - Steeltoe.Common.Util.MimeType.#ctor(Steeltoe.Common.Util.MimeType,System.Text.Encoding)
  - Steeltoe.Common.Util.MimeType.#ctor(System.String)
  - Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String)
  - Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String,System.Text.Encoding)
  - Steeltoe.Common.Util.MimeType.CheckParameters(System.String,System.String)
  - Steeltoe.Common.Util.MimeType.CompareTo(Steeltoe.Common.Util.MimeType)
  - Steeltoe.Common.Util.MimeType.Encoding
  - Steeltoe.Common.Util.MimeType.Equals(System.Object)
  - Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype(Steeltoe.Common.Util.MimeType)
  - Steeltoe.Common.Util.MimeType.GetHashCode
  - Steeltoe.Common.Util.MimeType.GetParameter(System.String)
  - Steeltoe.Common.Util.MimeType.Includes(Steeltoe.Common.Util.MimeType)
  - Steeltoe.Common.Util.MimeType.IsCompatibleWith(Steeltoe.Common.Util.MimeType)
  - Steeltoe.Common.Util.MimeType.IsConcrete
  - Steeltoe.Common.Util.MimeType.IsPresentIn``1(System.Collections.Generic.ICollection{``0})
  - Steeltoe.Common.Util.MimeType.IsWildcardSubtype
  - Steeltoe.Common.Util.MimeType.IsWildcardType
  - Steeltoe.Common.Util.MimeType.Parameters
  - Steeltoe.Common.Util.MimeType.Subtype
  - Steeltoe.Common.Util.MimeType.ToMimeType(System.String)
  - Steeltoe.Common.Util.MimeType.ToString
  - Steeltoe.Common.Util.MimeType.Type
  - Steeltoe.Common.Util.MimeType.Unquote(System.String)
  - Steeltoe.Common.Util.MimeType.WILDCARD_TYPE
  langs:
  - csharp
  - vb
  name: MimeType
  nameWithType: MimeType
  fullName: Steeltoe.Common.Util.MimeType
  type: Class
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: MimeType
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 12
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: 'public class MimeType : IComparable<MimeType>'
    content.vb: >-
      Public Class MimeType

          Implements IComparable(Of MimeType)
  inheritance:
  - System.Object
  implements:
  - System.IComparable{Steeltoe.Common.Util.MimeType}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Steeltoe.Common.Util.MimeType.WILDCARD_TYPE
  commentId: F:Steeltoe.Common.Util.MimeType.WILDCARD_TYPE
  id: WILDCARD_TYPE
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: WILDCARD_TYPE
  nameWithType: MimeType.WILDCARD_TYPE
  fullName: Steeltoe.Common.Util.MimeType.WILDCARD_TYPE
  type: Field
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: WILDCARD_TYPE
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 15
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public const string WILDCARD_TYPE = "*"
    return:
      type: System.String
    content.vb: Public Const WILDCARD_TYPE As String = "*"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Steeltoe.Common.Util.MimeType.#ctor(System.String)
  commentId: M:Steeltoe.Common.Util.MimeType.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: MimeType(String)
  nameWithType: MimeType.MimeType(String)
  fullName: Steeltoe.Common.Util.MimeType.MimeType(System.String)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 67
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public MimeType(string type)
    parameters:
    - id: type
      type: System.String
    content.vb: Public Sub New(type As String)
  overload: Steeltoe.Common.Util.MimeType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: MimeType(String, String)
  nameWithType: MimeType.MimeType(String, String)
  fullName: Steeltoe.Common.Util.MimeType.MimeType(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 72
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public MimeType(string type, string subtype)
    parameters:
    - id: type
      type: System.String
    - id: subtype
      type: System.String
    content.vb: Public Sub New(type As String, subtype As String)
  overload: Steeltoe.Common.Util.MimeType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String,System.Text.Encoding)
  commentId: M:Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String,System.Text.Encoding)
  id: '#ctor(System.String,System.String,System.Text.Encoding)'
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: MimeType(String, String, Encoding)
  nameWithType: MimeType.MimeType(String, String, Encoding)
  fullName: Steeltoe.Common.Util.MimeType.MimeType(System.String, System.String, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 77
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public MimeType(string type, string subtype, Encoding charset)
    parameters:
    - id: type
      type: System.String
    - id: subtype
      type: System.String
    - id: charset
      type: System.Text.Encoding
    content.vb: Public Sub New(type As String, subtype As String, charset As Encoding)
  overload: Steeltoe.Common.Util.MimeType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.#ctor(Steeltoe.Common.Util.MimeType,System.Text.Encoding)
  commentId: M:Steeltoe.Common.Util.MimeType.#ctor(Steeltoe.Common.Util.MimeType,System.Text.Encoding)
  id: '#ctor(Steeltoe.Common.Util.MimeType,System.Text.Encoding)'
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: MimeType(MimeType, Encoding)
  nameWithType: MimeType.MimeType(MimeType, Encoding)
  fullName: Steeltoe.Common.Util.MimeType.MimeType(Steeltoe.Common.Util.MimeType, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 82
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public MimeType(MimeType other, Encoding charset)
    parameters:
    - id: other
      type: Steeltoe.Common.Util.MimeType
    - id: charset
      type: System.Text.Encoding
    content.vb: Public Sub New(other As MimeType, charset As Encoding)
  overload: Steeltoe.Common.Util.MimeType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.#ctor(Steeltoe.Common.Util.MimeType,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Steeltoe.Common.Util.MimeType.#ctor(Steeltoe.Common.Util.MimeType,System.Collections.Generic.IDictionary{System.String,System.String})
  id: '#ctor(Steeltoe.Common.Util.MimeType,System.Collections.Generic.IDictionary{System.String,System.String})'
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: MimeType(MimeType, IDictionary<String, String>)
  nameWithType: MimeType.MimeType(MimeType, IDictionary<String, String>)
  fullName: Steeltoe.Common.Util.MimeType.MimeType(Steeltoe.Common.Util.MimeType, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 87
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public MimeType(MimeType other, IDictionary<string, string> parameters = null)
    parameters:
    - id: other
      type: Steeltoe.Common.Util.MimeType
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Sub New(other As MimeType, parameters As IDictionary(Of String, String) = Nothing)
  overload: Steeltoe.Common.Util.MimeType.#ctor*
  nameWithType.vb: MimeType.MimeType(MimeType, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.MimeType.MimeType(Steeltoe.Common.Util.MimeType, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: MimeType(MimeType, IDictionary(Of String, String))
- uid: Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Steeltoe.Common.Util.MimeType.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: '#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})'
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: MimeType(String, String, IDictionary<String, String>)
  nameWithType: MimeType.MimeType(String, String, IDictionary<String, String>)
  fullName: Steeltoe.Common.Util.MimeType.MimeType(System.String, System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 92
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public MimeType(string type, string subtype, IDictionary<string, string> parameters)
    parameters:
    - id: type
      type: System.String
    - id: subtype
      type: System.String
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Sub New(type As String, subtype As String, parameters As IDictionary(Of String, String))
  overload: Steeltoe.Common.Util.MimeType.#ctor*
  nameWithType.vb: MimeType.MimeType(String, String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.MimeType.MimeType(System.String, System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: MimeType(String, String, IDictionary(Of String, String))
- uid: Steeltoe.Common.Util.MimeType.ToMimeType(System.String)
  commentId: M:Steeltoe.Common.Util.MimeType.ToMimeType(System.String)
  id: ToMimeType(System.String)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: ToMimeType(String)
  nameWithType: MimeType.ToMimeType(String)
  fullName: Steeltoe.Common.Util.MimeType.ToMimeType(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToMimeType
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 125
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public static MimeType ToMimeType(string value)
    parameters:
    - id: value
      type: System.String
    return:
      type: Steeltoe.Common.Util.MimeType
    content.vb: Public Shared Function ToMimeType(value As String) As MimeType
  overload: Steeltoe.Common.Util.MimeType.ToMimeType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Steeltoe.Common.Util.MimeType.CheckParameters(System.String,System.String)
  commentId: M:Steeltoe.Common.Util.MimeType.CheckParameters(System.String,System.String)
  id: CheckParameters(System.String,System.String)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: CheckParameters(String, String)
  nameWithType: MimeType.CheckParameters(String, String)
  fullName: Steeltoe.Common.Util.MimeType.CheckParameters(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CheckParameters
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 130
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: protected void CheckParameters(string attribute, string value)
    parameters:
    - id: attribute
      type: System.String
    - id: value
      type: System.String
    content.vb: Protected Sub CheckParameters(attribute As String, value As String)
  overload: Steeltoe.Common.Util.MimeType.CheckParameters*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Common.Util.MimeType.Unquote(System.String)
  commentId: M:Steeltoe.Common.Util.MimeType.Unquote(System.String)
  id: Unquote(System.String)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: Unquote(String)
  nameWithType: MimeType.Unquote(String)
  fullName: Steeltoe.Common.Util.MimeType.Unquote(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Unquote
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 154
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: protected string Unquote(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: System.String
    content.vb: Protected Function Unquote(s As String) As String
  overload: Steeltoe.Common.Util.MimeType.Unquote*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Steeltoe.Common.Util.MimeType.IsWildcardType
  commentId: P:Steeltoe.Common.Util.MimeType.IsWildcardType
  id: IsWildcardType
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: IsWildcardType
  nameWithType: MimeType.IsWildcardType
  fullName: Steeltoe.Common.Util.MimeType.IsWildcardType
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsWildcardType
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 156
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool IsWildcardType { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsWildcardType As Boolean
  overload: Steeltoe.Common.Util.MimeType.IsWildcardType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.MimeType.IsWildcardSubtype
  commentId: P:Steeltoe.Common.Util.MimeType.IsWildcardSubtype
  id: IsWildcardSubtype
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: IsWildcardSubtype
  nameWithType: MimeType.IsWildcardSubtype
  fullName: Steeltoe.Common.Util.MimeType.IsWildcardSubtype
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsWildcardSubtype
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 158
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool IsWildcardSubtype { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsWildcardSubtype As Boolean
  overload: Steeltoe.Common.Util.MimeType.IsWildcardSubtype*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.MimeType.IsConcrete
  commentId: P:Steeltoe.Common.Util.MimeType.IsConcrete
  id: IsConcrete
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: IsConcrete
  nameWithType: MimeType.IsConcrete
  fullName: Steeltoe.Common.Util.MimeType.IsConcrete
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsConcrete
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 160
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool IsConcrete { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConcrete As Boolean
  overload: Steeltoe.Common.Util.MimeType.IsConcrete*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.MimeType.Type
  commentId: P:Steeltoe.Common.Util.MimeType.Type
  id: Type
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: MimeType.Type
  fullName: Steeltoe.Common.Util.MimeType.Type
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Type
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 162
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public string Type { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Type As String
  overload: Steeltoe.Common.Util.MimeType.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.MimeType.Subtype
  commentId: P:Steeltoe.Common.Util.MimeType.Subtype
  id: Subtype
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: Subtype
  nameWithType: MimeType.Subtype
  fullName: Steeltoe.Common.Util.MimeType.Subtype
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Subtype
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 164
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public string Subtype { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Subtype As String
  overload: Steeltoe.Common.Util.MimeType.Subtype*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.MimeType.Encoding
  commentId: P:Steeltoe.Common.Util.MimeType.Encoding
  id: Encoding
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: MimeType.Encoding
  fullName: Steeltoe.Common.Util.MimeType.Encoding
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Encoding
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 166
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public Encoding Encoding { get; }
    parameters: []
    return:
      type: System.Text.Encoding
    content.vb: Public ReadOnly Property Encoding As Encoding
  overload: Steeltoe.Common.Util.MimeType.Encoding*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.MimeType.GetParameter(System.String)
  commentId: M:Steeltoe.Common.Util.MimeType.GetParameter(System.String)
  id: GetParameter(System.String)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: GetParameter(String)
  nameWithType: MimeType.GetParameter(String)
  fullName: Steeltoe.Common.Util.MimeType.GetParameter(System.String)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetParameter
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 175
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public string GetParameter(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GetParameter(name As String) As String
  overload: Steeltoe.Common.Util.MimeType.GetParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.Parameters
  commentId: P:Steeltoe.Common.Util.MimeType.Parameters
  id: Parameters
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: MimeType.Parameters
  fullName: Steeltoe.Common.Util.MimeType.Parameters
  type: Property
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Parameters
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 185
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public IDictionary<string, string> Parameters { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public ReadOnly Property Parameters As IDictionary(Of String, String)
  overload: Steeltoe.Common.Util.MimeType.Parameters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Steeltoe.Common.Util.MimeType.Includes(Steeltoe.Common.Util.MimeType)
  commentId: M:Steeltoe.Common.Util.MimeType.Includes(Steeltoe.Common.Util.MimeType)
  id: Includes(Steeltoe.Common.Util.MimeType)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: Includes(MimeType)
  nameWithType: MimeType.Includes(MimeType)
  fullName: Steeltoe.Common.Util.MimeType.Includes(Steeltoe.Common.Util.MimeType)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Includes
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 187
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool Includes(MimeType other)
    parameters:
    - id: other
      type: Steeltoe.Common.Util.MimeType
    return:
      type: System.Boolean
    content.vb: Public Function Includes(other As MimeType) As Boolean
  overload: Steeltoe.Common.Util.MimeType.Includes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.IsCompatibleWith(Steeltoe.Common.Util.MimeType)
  commentId: M:Steeltoe.Common.Util.MimeType.IsCompatibleWith(Steeltoe.Common.Util.MimeType)
  id: IsCompatibleWith(Steeltoe.Common.Util.MimeType)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: IsCompatibleWith(MimeType)
  nameWithType: MimeType.IsCompatibleWith(MimeType)
  fullName: Steeltoe.Common.Util.MimeType.IsCompatibleWith(Steeltoe.Common.Util.MimeType)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsCompatibleWith
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 235
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool IsCompatibleWith(MimeType other)
    parameters:
    - id: other
      type: Steeltoe.Common.Util.MimeType
    return:
      type: System.Boolean
    content.vb: Public Function IsCompatibleWith(other As MimeType) As Boolean
  overload: Steeltoe.Common.Util.MimeType.IsCompatibleWith*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype(Steeltoe.Common.Util.MimeType)
  commentId: M:Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype(Steeltoe.Common.Util.MimeType)
  id: EqualsTypeAndSubtype(Steeltoe.Common.Util.MimeType)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: EqualsTypeAndSubtype(MimeType)
  nameWithType: MimeType.EqualsTypeAndSubtype(MimeType)
  fullName: Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype(Steeltoe.Common.Util.MimeType)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: EqualsTypeAndSubtype
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 280
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public bool EqualsTypeAndSubtype(MimeType other)
    parameters:
    - id: other
      type: Steeltoe.Common.Util.MimeType
    return:
      type: System.Boolean
    content.vb: Public Function EqualsTypeAndSubtype(other As MimeType) As Boolean
  overload: Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Steeltoe.Common.Util.MimeType.IsPresentIn``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Steeltoe.Common.Util.MimeType.IsPresentIn``1(System.Collections.Generic.ICollection{``0})
  id: IsPresentIn``1(System.Collections.Generic.ICollection{``0})
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: IsPresentIn<T>(ICollection<T>)
  nameWithType: MimeType.IsPresentIn<T>(ICollection<T>)
  fullName: Steeltoe.Common.Util.MimeType.IsPresentIn<T>(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IsPresentIn
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 290
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: >-
      public bool IsPresentIn<T>(ICollection<T> mimeTypes)

          where T : MimeType
    parameters:
    - id: mimeTypes
      type: System.Collections.Generic.ICollection{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Function IsPresentIn(Of T As MimeType)(mimeTypes As ICollection(Of T)) As Boolean
  overload: Steeltoe.Common.Util.MimeType.IsPresentIn*
  nameWithType.vb: MimeType.IsPresentIn(Of T)(ICollection(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Steeltoe.Common.Util.MimeType.IsPresentIn(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: IsPresentIn(Of T)(ICollection(Of T))
- uid: Steeltoe.Common.Util.MimeType.Equals(System.Object)
  commentId: M:Steeltoe.Common.Util.MimeType.Equals(System.Object)
  id: Equals(System.Object)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: MimeType.Equals(Object)
  fullName: Steeltoe.Common.Util.MimeType.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: Equals
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 304
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Steeltoe.Common.Util.MimeType.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Steeltoe.Common.Util.MimeType.GetHashCode
  commentId: M:Steeltoe.Common.Util.MimeType.GetHashCode
  id: GetHashCode
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: MimeType.GetHashCode()
  fullName: Steeltoe.Common.Util.MimeType.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetHashCode
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 322
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Steeltoe.Common.Util.MimeType.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Steeltoe.Common.Util.MimeType.ToString
  commentId: M:Steeltoe.Common.Util.MimeType.ToString
  id: ToString
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MimeType.ToString()
  fullName: Steeltoe.Common.Util.MimeType.ToString()
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: ToString
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 330
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Steeltoe.Common.Util.MimeType.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Steeltoe.Common.Util.MimeType.CompareTo(Steeltoe.Common.Util.MimeType)
  commentId: M:Steeltoe.Common.Util.MimeType.CompareTo(Steeltoe.Common.Util.MimeType)
  id: CompareTo(Steeltoe.Common.Util.MimeType)
  parent: Steeltoe.Common.Util.MimeType
  langs:
  - csharp
  - vb
  name: CompareTo(MimeType)
  nameWithType: MimeType.CompareTo(MimeType)
  fullName: Steeltoe.Common.Util.MimeType.CompareTo(Steeltoe.Common.Util.MimeType)
  type: Method
  source:
    remote:
      path: src/Common/src/Common/Util/MimeType.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: CompareTo
    path: ../Steeltoe/src/Common/src/Common/Util/MimeType.cs
    startLine: 344
  assemblies:
  - Steeltoe.Common
  namespace: Steeltoe.Common.Util
  syntax:
    content: public int CompareTo(MimeType other)
    parameters:
    - id: other
      type: Steeltoe.Common.Util.MimeType
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As MimeType) As Integer
  overload: Steeltoe.Common.Util.MimeType.CompareTo*
  implements:
  - System.IComparable{Steeltoe.Common.Util.MimeType}.CompareTo(Steeltoe.Common.Util.MimeType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Steeltoe.Common.Util
  commentId: N:Steeltoe.Common.Util
  name: Steeltoe.Common.Util
  nameWithType: Steeltoe.Common.Util
  fullName: Steeltoe.Common.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable{Steeltoe.Common.Util.MimeType}
  commentId: T:System.IComparable{Steeltoe.Common.Util.MimeType}
  parent: System
  definition: System.IComparable`1
  name: IComparable<MimeType>
  nameWithType: IComparable<MimeType>
  fullName: System.IComparable<Steeltoe.Common.Util.MimeType>
  nameWithType.vb: IComparable(Of MimeType)
  fullName.vb: System.IComparable(Of Steeltoe.Common.Util.MimeType)
  name.vb: IComparable(Of MimeType)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Common.Util.MimeType
    name: MimeType
    nameWithType: MimeType
    fullName: Steeltoe.Common.Util.MimeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Common.Util.MimeType
    name: MimeType
    nameWithType: MimeType
    fullName: Steeltoe.Common.Util.MimeType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Steeltoe.Common.Util.MimeType.#ctor*
  commentId: Overload:Steeltoe.Common.Util.MimeType.#ctor
  name: MimeType
  nameWithType: MimeType.MimeType
  fullName: Steeltoe.Common.Util.MimeType.MimeType
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: Steeltoe.Common.Util.MimeType
  commentId: T:Steeltoe.Common.Util.MimeType
  parent: Steeltoe.Common.Util
  name: MimeType
  nameWithType: MimeType
  fullName: Steeltoe.Common.Util.MimeType
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Common.Util.MimeType.ToMimeType*
  commentId: Overload:Steeltoe.Common.Util.MimeType.ToMimeType
  name: ToMimeType
  nameWithType: MimeType.ToMimeType
  fullName: Steeltoe.Common.Util.MimeType.ToMimeType
- uid: Steeltoe.Common.Util.MimeType.CheckParameters*
  commentId: Overload:Steeltoe.Common.Util.MimeType.CheckParameters
  name: CheckParameters
  nameWithType: MimeType.CheckParameters
  fullName: Steeltoe.Common.Util.MimeType.CheckParameters
- uid: Steeltoe.Common.Util.MimeType.Unquote*
  commentId: Overload:Steeltoe.Common.Util.MimeType.Unquote
  name: Unquote
  nameWithType: MimeType.Unquote
  fullName: Steeltoe.Common.Util.MimeType.Unquote
- uid: Steeltoe.Common.Util.MimeType.IsWildcardType*
  commentId: Overload:Steeltoe.Common.Util.MimeType.IsWildcardType
  name: IsWildcardType
  nameWithType: MimeType.IsWildcardType
  fullName: Steeltoe.Common.Util.MimeType.IsWildcardType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Steeltoe.Common.Util.MimeType.IsWildcardSubtype*
  commentId: Overload:Steeltoe.Common.Util.MimeType.IsWildcardSubtype
  name: IsWildcardSubtype
  nameWithType: MimeType.IsWildcardSubtype
  fullName: Steeltoe.Common.Util.MimeType.IsWildcardSubtype
- uid: Steeltoe.Common.Util.MimeType.IsConcrete*
  commentId: Overload:Steeltoe.Common.Util.MimeType.IsConcrete
  name: IsConcrete
  nameWithType: MimeType.IsConcrete
  fullName: Steeltoe.Common.Util.MimeType.IsConcrete
- uid: Steeltoe.Common.Util.MimeType.Type*
  commentId: Overload:Steeltoe.Common.Util.MimeType.Type
  name: Type
  nameWithType: MimeType.Type
  fullName: Steeltoe.Common.Util.MimeType.Type
- uid: Steeltoe.Common.Util.MimeType.Subtype*
  commentId: Overload:Steeltoe.Common.Util.MimeType.Subtype
  name: Subtype
  nameWithType: MimeType.Subtype
  fullName: Steeltoe.Common.Util.MimeType.Subtype
- uid: Steeltoe.Common.Util.MimeType.Encoding*
  commentId: Overload:Steeltoe.Common.Util.MimeType.Encoding
  name: Encoding
  nameWithType: MimeType.Encoding
  fullName: Steeltoe.Common.Util.MimeType.Encoding
- uid: Steeltoe.Common.Util.MimeType.GetParameter*
  commentId: Overload:Steeltoe.Common.Util.MimeType.GetParameter
  name: GetParameter
  nameWithType: MimeType.GetParameter
  fullName: Steeltoe.Common.Util.MimeType.GetParameter
- uid: Steeltoe.Common.Util.MimeType.Parameters*
  commentId: Overload:Steeltoe.Common.Util.MimeType.Parameters
  name: Parameters
  nameWithType: MimeType.Parameters
  fullName: Steeltoe.Common.Util.MimeType.Parameters
- uid: Steeltoe.Common.Util.MimeType.Includes*
  commentId: Overload:Steeltoe.Common.Util.MimeType.Includes
  name: Includes
  nameWithType: MimeType.Includes
  fullName: Steeltoe.Common.Util.MimeType.Includes
- uid: Steeltoe.Common.Util.MimeType.IsCompatibleWith*
  commentId: Overload:Steeltoe.Common.Util.MimeType.IsCompatibleWith
  name: IsCompatibleWith
  nameWithType: MimeType.IsCompatibleWith
  fullName: Steeltoe.Common.Util.MimeType.IsCompatibleWith
- uid: Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype*
  commentId: Overload:Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype
  name: EqualsTypeAndSubtype
  nameWithType: MimeType.EqualsTypeAndSubtype
  fullName: Steeltoe.Common.Util.MimeType.EqualsTypeAndSubtype
- uid: Steeltoe.Common.Util.MimeType.IsPresentIn*
  commentId: Overload:Steeltoe.Common.Util.MimeType.IsPresentIn
  name: IsPresentIn
  nameWithType: MimeType.IsPresentIn
  fullName: Steeltoe.Common.Util.MimeType.IsPresentIn
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.MimeType.Equals*
  commentId: Overload:Steeltoe.Common.Util.MimeType.Equals
  name: Equals
  nameWithType: MimeType.Equals
  fullName: Steeltoe.Common.Util.MimeType.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.MimeType.GetHashCode*
  commentId: Overload:Steeltoe.Common.Util.MimeType.GetHashCode
  name: GetHashCode
  nameWithType: MimeType.GetHashCode
  fullName: Steeltoe.Common.Util.MimeType.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Common.Util.MimeType.ToString*
  commentId: Overload:Steeltoe.Common.Util.MimeType.ToString
  name: ToString
  nameWithType: MimeType.ToString
  fullName: Steeltoe.Common.Util.MimeType.ToString
- uid: Steeltoe.Common.Util.MimeType.CompareTo*
  commentId: Overload:Steeltoe.Common.Util.MimeType.CompareTo
  name: CompareTo
  nameWithType: MimeType.CompareTo
  fullName: Steeltoe.Common.Util.MimeType.CompareTo
- uid: System.IComparable{Steeltoe.Common.Util.MimeType}.CompareTo(Steeltoe.Common.Util.MimeType)
  commentId: M:System.IComparable{Steeltoe.Common.Util.MimeType}.CompareTo(Steeltoe.Common.Util.MimeType)
  parent: System.IComparable{Steeltoe.Common.Util.MimeType}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(MimeType)
  nameWithType: IComparable<MimeType>.CompareTo(MimeType)
  fullName: System.IComparable<Steeltoe.Common.Util.MimeType>.CompareTo(Steeltoe.Common.Util.MimeType)
  nameWithType.vb: IComparable(Of MimeType).CompareTo(MimeType)
  fullName.vb: System.IComparable(Of Steeltoe.Common.Util.MimeType).CompareTo(Steeltoe.Common.Util.MimeType)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<MimeType>.CompareTo
    fullName: System.IComparable<Steeltoe.Common.Util.MimeType>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Common.Util.MimeType
    name: MimeType
    nameWithType: MimeType
    fullName: Steeltoe.Common.Util.MimeType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of MimeType).CompareTo
    fullName: System.IComparable(Of Steeltoe.Common.Util.MimeType).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Common.Util.MimeType
    name: MimeType
    nameWithType: MimeType
    fullName: Steeltoe.Common.Util.MimeType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
