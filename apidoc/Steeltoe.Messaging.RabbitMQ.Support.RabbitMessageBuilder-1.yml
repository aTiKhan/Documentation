### YamlMime:ManagedReference
items:
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1
  commentId: T:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1
  id: RabbitMessageBuilder`1
  parent: Steeltoe.Messaging.RabbitMQ.Support
  children:
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(`0,Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.IMessage)
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.IMessage{`0})
  - Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  langs:
  - csharp
  - vb
  name: RabbitMessageBuilder<P>
  nameWithType: RabbitMessageBuilder<P>
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>
  type: Class
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: RabbitMessageBuilder
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 69
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: 'public class RabbitMessageBuilder<P> : MessageBuilder<P>'
    typeParameters:
    - id: P
    content.vb: >-
      Public Class RabbitMessageBuilder(Of P)

          Inherits MessageBuilder(Of P)
  inheritance:
  - System.Object
  - Steeltoe.Messaging.Support.AbstractMessageBuilder
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}
  inheritedMembers:
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetHeader(System.String,System.Object)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetHeaderIfAbsent(System.String,System.Object)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.RemoveHeaders(System.String[])
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.RemoveHeader(System.String)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetReplyChannelName(System.String)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetErrorChannelName(System.String)
  - Steeltoe.Messaging.Support.MessageBuilder{{P}}.Build
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.payload
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.originalMessage
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.headerAccessor
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(System.Int64)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.RabbitMQ.Core.Address)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(System.Int64)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(System.Int32)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(System.Boolean)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(System.UInt64)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(System.UInt32)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(System.Int64)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.Address)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(System.Int64)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(System.Int32)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(System.String)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(System.Boolean)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(System.UInt64)
  - Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(System.UInt32)
  nameWithType.vb: RabbitMessageBuilder(Of P)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder(Of P)
  name.vb: RabbitMessageBuilder(Of P)
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor
  id: '#ctor'
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1
  langs:
  - csharp
  - vb
  name: RabbitMessageBuilder()
  nameWithType: RabbitMessageBuilder<P>.RabbitMessageBuilder()
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder()
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 71
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: protected RabbitMessageBuilder()
    content.vb: Protected Sub New
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor*
  nameWithType.vb: RabbitMessageBuilder(Of P).RabbitMessageBuilder()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder(Of P).RabbitMessageBuilder()
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.IMessage{`0})
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.IMessage{`0})
  id: '#ctor(Steeltoe.Messaging.IMessage{`0})'
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1
  langs:
  - csharp
  - vb
  name: RabbitMessageBuilder(IMessage<P>)
  nameWithType: RabbitMessageBuilder<P>.RabbitMessageBuilder(IMessage<P>)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(Steeltoe.Messaging.IMessage<P>)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 75
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: protected RabbitMessageBuilder(IMessage<P> message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage{{P}}
    content.vb: Protected Sub New(message As IMessage(Of P))
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor*
  nameWithType.vb: RabbitMessageBuilder(Of P).RabbitMessageBuilder(IMessage(Of P))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder(Of P).RabbitMessageBuilder(Steeltoe.Messaging.IMessage(Of P))
  name.vb: RabbitMessageBuilder(IMessage(Of P))
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.IMessage)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.IMessage)
  id: '#ctor(Steeltoe.Messaging.IMessage)'
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1
  langs:
  - csharp
  - vb
  name: RabbitMessageBuilder(IMessage)
  nameWithType: RabbitMessageBuilder<P>.RabbitMessageBuilder(IMessage)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(Steeltoe.Messaging.IMessage)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 80
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: protected RabbitMessageBuilder(IMessage message)
    parameters:
    - id: message
      type: Steeltoe.Messaging.IMessage
    content.vb: Protected Sub New(message As IMessage)
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor*
  nameWithType.vb: RabbitMessageBuilder(Of P).RabbitMessageBuilder(IMessage)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder(Of P).RabbitMessageBuilder(Steeltoe.Messaging.IMessage)
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  id: '#ctor(Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)'
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1
  langs:
  - csharp
  - vb
  name: RabbitMessageBuilder(RabbitHeaderAccessor)
  nameWithType: RabbitMessageBuilder<P>.RabbitMessageBuilder(RabbitHeaderAccessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 85
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: protected RabbitMessageBuilder(RabbitHeaderAccessor accessor)
    parameters:
    - id: accessor
      type: Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
    content.vb: Protected Sub New(accessor As RabbitHeaderAccessor)
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor*
  nameWithType.vb: RabbitMessageBuilder(Of P).RabbitMessageBuilder(RabbitHeaderAccessor)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder(Of P).RabbitMessageBuilder(Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(`0,Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor(`0,Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  id: '#ctor(`0,Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)'
  parent: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1
  langs:
  - csharp
  - vb
  name: RabbitMessageBuilder(P, RabbitHeaderAccessor)
  nameWithType: RabbitMessageBuilder<P>.RabbitMessageBuilder(P, RabbitHeaderAccessor)
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(P, Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
  type: Constructor
  source:
    remote:
      path: src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: .ctor
    path: ../Steeltoe/src/Messaging/src/RabbitMQ/Support/RabbitMessageBuilder.cs
    startLine: 90
  assemblies:
  - Steeltoe.Messaging.RabbitMQ
  namespace: Steeltoe.Messaging.RabbitMQ.Support
  syntax:
    content: protected RabbitMessageBuilder(P payload, RabbitHeaderAccessor accessor)
    parameters:
    - id: payload
      type: '{P}'
    - id: accessor
      type: Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
    content.vb: Protected Sub New(payload As P, accessor As RabbitHeaderAccessor)
  overload: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor*
  nameWithType.vb: RabbitMessageBuilder(Of P).RabbitMessageBuilder(P, RabbitHeaderAccessor)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder(Of P).RabbitMessageBuilder(P, Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor)
references:
- uid: Steeltoe.Messaging.RabbitMQ.Support
  commentId: N:Steeltoe.Messaging.RabbitMQ.Support
  name: Steeltoe.Messaging.RabbitMQ.Support
  nameWithType: Steeltoe.Messaging.RabbitMQ.Support
  fullName: Steeltoe.Messaging.RabbitMQ.Support
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
  commentId: T:Steeltoe.Messaging.Support.AbstractMessageBuilder
  parent: Steeltoe.Messaging.Support
  name: AbstractMessageBuilder
  nameWithType: AbstractMessageBuilder
  fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  commentId: T:Steeltoe.Messaging.Support.MessageBuilder{`0}
  parent: Steeltoe.Messaging.Support
  definition: Steeltoe.Messaging.Support.MessageBuilder`1
  name: MessageBuilder<P>
  nameWithType: MessageBuilder<P>
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>
  nameWithType.vb: MessageBuilder(Of P)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P)
  name.vb: MessageBuilder(Of P)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1
    name: MessageBuilder
    nameWithType: MessageBuilder
    fullName: Steeltoe.Messaging.Support.MessageBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: P
    nameWithType: P
    fullName: P
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1
    name: MessageBuilder
    nameWithType: MessageBuilder
    fullName: Steeltoe.Messaging.Support.MessageBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: P
    nameWithType: P
    fullName: P
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  name: SetHeaders(MessageHeaderAccessor)
  nameWithType: MessageBuilder<P>.SetHeaders(MessageHeaderAccessor)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  nameWithType.vb: MessageBuilder(Of P).SetHeaders(MessageHeaderAccessor)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
    name: SetHeaders
    nameWithType: MessageBuilder<P>.SetHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.MessageHeaderAccessor
    name: MessageHeaderAccessor
    nameWithType: MessageHeaderAccessor
    fullName: Steeltoe.Messaging.Support.MessageHeaderAccessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
    name: SetHeaders
    nameWithType: MessageBuilder(Of P).SetHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.MessageHeaderAccessor
    name: MessageHeaderAccessor
    nameWithType: MessageHeaderAccessor
    fullName: Steeltoe.Messaging.Support.MessageHeaderAccessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetHeader(System.String,System.Object)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.SetHeader(System.String,System.Object)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeader(System.String,System.Object)
  name: SetHeader(String, Object)
  nameWithType: MessageBuilder<P>.SetHeader(String, Object)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeader(System.String, System.Object)
  nameWithType.vb: MessageBuilder(Of P).SetHeader(String, Object)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeader(System.String, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeader(System.String,System.Object)
    name: SetHeader
    nameWithType: MessageBuilder<P>.SetHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeader(System.String,System.Object)
    name: SetHeader
    nameWithType: MessageBuilder(Of P).SetHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetHeaderIfAbsent(System.String,System.Object)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.SetHeaderIfAbsent(System.String,System.Object)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaderIfAbsent(System.String,System.Object)
  name: SetHeaderIfAbsent(String, Object)
  nameWithType: MessageBuilder<P>.SetHeaderIfAbsent(String, Object)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaderIfAbsent(System.String, System.Object)
  nameWithType.vb: MessageBuilder(Of P).SetHeaderIfAbsent(String, Object)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaderIfAbsent(System.String, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaderIfAbsent(System.String,System.Object)
    name: SetHeaderIfAbsent
    nameWithType: MessageBuilder<P>.SetHeaderIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaderIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaderIfAbsent(System.String,System.Object)
    name: SetHeaderIfAbsent
    nameWithType: MessageBuilder(Of P).SetHeaderIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaderIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.RemoveHeaders(System.String[])
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.RemoveHeaders(System.String[])
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeaders(System.String[])
  name: RemoveHeaders(String[])
  nameWithType: MessageBuilder<P>.RemoveHeaders(String[])
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeaders(System.String[])
  nameWithType.vb: MessageBuilder(Of P).RemoveHeaders(String())
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeaders(System.String())
  name.vb: RemoveHeaders(String())
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeaders(System.String[])
    name: RemoveHeaders
    nameWithType: MessageBuilder<P>.RemoveHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeaders(System.String[])
    name: RemoveHeaders
    nameWithType: MessageBuilder(Of P).RemoveHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.RemoveHeader(System.String)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.RemoveHeader(System.String)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeader(System.String)
  name: RemoveHeader(String)
  nameWithType: MessageBuilder<P>.RemoveHeader(String)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeader(System.String)
  nameWithType.vb: MessageBuilder(Of P).RemoveHeader(String)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeader(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeader(System.String)
    name: RemoveHeader
    nameWithType: MessageBuilder<P>.RemoveHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeader(System.String)
    name: RemoveHeader
    nameWithType: MessageBuilder(Of P).RemoveHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CopyHeaders(IDictionary<String, Object>)
  nameWithType: MessageBuilder<P>.CopyHeaders(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeaders(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: MessageBuilder(Of P).CopyHeaders(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeaders(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CopyHeaders(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeaders
    nameWithType: MessageBuilder<P>.CopyHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeaders
    nameWithType: MessageBuilder(Of P).CopyHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CopyHeadersIfAbsent(IDictionary<String, Object>)
  nameWithType: MessageBuilder<P>.CopyHeadersIfAbsent(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: MessageBuilder(Of P).CopyHeadersIfAbsent(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeadersIfAbsent(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CopyHeadersIfAbsent(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeadersIfAbsent
    nameWithType: MessageBuilder<P>.CopyHeadersIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeadersIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeadersIfAbsent
    nameWithType: MessageBuilder(Of P).CopyHeadersIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeadersIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  name: SetReplyChannel(IMessageChannel)
  nameWithType: MessageBuilder<P>.SetReplyChannel(IMessageChannel)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  nameWithType.vb: MessageBuilder(Of P).SetReplyChannel(IMessageChannel)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetReplyChannel
    nameWithType: MessageBuilder<P>.SetReplyChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetReplyChannel
    nameWithType: MessageBuilder(Of P).SetReplyChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetReplyChannelName(System.String)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.SetReplyChannelName(System.String)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannelName(System.String)
  name: SetReplyChannelName(String)
  nameWithType: MessageBuilder<P>.SetReplyChannelName(String)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannelName(System.String)
  nameWithType.vb: MessageBuilder(Of P).SetReplyChannelName(String)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannelName(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannelName(System.String)
    name: SetReplyChannelName
    nameWithType: MessageBuilder<P>.SetReplyChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannelName(System.String)
    name: SetReplyChannelName
    nameWithType: MessageBuilder(Of P).SetReplyChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  name: SetErrorChannel(IMessageChannel)
  nameWithType: MessageBuilder<P>.SetErrorChannel(IMessageChannel)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  nameWithType.vb: MessageBuilder(Of P).SetErrorChannel(IMessageChannel)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetErrorChannel
    nameWithType: MessageBuilder<P>.SetErrorChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetErrorChannel
    nameWithType: MessageBuilder(Of P).SetErrorChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.SetErrorChannelName(System.String)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.SetErrorChannelName(System.String)
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannelName(System.String)
  name: SetErrorChannelName(String)
  nameWithType: MessageBuilder<P>.SetErrorChannelName(String)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannelName(System.String)
  nameWithType.vb: MessageBuilder(Of P).SetErrorChannelName(String)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannelName(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannelName(System.String)
    name: SetErrorChannelName
    nameWithType: MessageBuilder<P>.SetErrorChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannelName(System.String)
    name: SetErrorChannelName
    nameWithType: MessageBuilder(Of P).SetErrorChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder{{P}}.Build
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder{`0}.Build
  parent: Steeltoe.Messaging.Support.MessageBuilder{{P}}
  definition: Steeltoe.Messaging.Support.MessageBuilder`1.Build
  name: Build()
  nameWithType: MessageBuilder<P>.Build()
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.Build()
  nameWithType.vb: MessageBuilder(Of P).Build()
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).Build()
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.Build
    name: Build
    nameWithType: MessageBuilder<P>.Build
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.Build
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.Build
    name: Build
    nameWithType: MessageBuilder(Of P).Build
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).Build
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.payload
  commentId: F:Steeltoe.Messaging.Support.AbstractMessageBuilder.payload
  parent: Steeltoe.Messaging.Support.AbstractMessageBuilder
  name: payload
  nameWithType: AbstractMessageBuilder.payload
  fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder.payload
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.originalMessage
  commentId: F:Steeltoe.Messaging.Support.AbstractMessageBuilder.originalMessage
  parent: Steeltoe.Messaging.Support.AbstractMessageBuilder
  name: originalMessage
  nameWithType: AbstractMessageBuilder.originalMessage
  fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder.originalMessage
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.headerAccessor
  commentId: F:Steeltoe.Messaging.Support.AbstractMessageBuilder.headerAccessor
  parent: Steeltoe.Messaging.Support.AbstractMessageBuilder
  name: headerAccessor
  nameWithType: AbstractMessageBuilder.headerAccessor
  fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder.headerAccessor
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  name: SetTimestamp(Int64)
  nameWithType: MessageBuilderExtensions.SetTimestamp(Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(System.Int64)
    name: SetTimestamp
    nameWithType: MessageBuilderExtensions.SetTimestamp
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(System.Int64)
    name: SetTimestamp
    nameWithType: MessageBuilderExtensions.SetTimestamp
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetMessageId(String)
  nameWithType: MessageBuilderExtensions.SetMessageId(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(System.String)
    name: SetMessageId
    nameWithType: MessageBuilderExtensions.SetMessageId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(System.String)
    name: SetMessageId
    nameWithType: MessageBuilderExtensions.SetMessageId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetUserId(String)
  nameWithType: MessageBuilderExtensions.SetUserId(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(System.String)
    name: SetUserId
    nameWithType: MessageBuilderExtensions.SetUserId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(System.String)
    name: SetUserId
    nameWithType: MessageBuilderExtensions.SetUserId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetAppId(String)
  nameWithType: MessageBuilderExtensions.SetAppId(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(System.String)
    name: SetAppId
    nameWithType: MessageBuilderExtensions.SetAppId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(System.String)
    name: SetAppId
    nameWithType: MessageBuilderExtensions.SetAppId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetClusterId(String)
  nameWithType: MessageBuilderExtensions.SetClusterId(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(System.String)
    name: SetClusterId
    nameWithType: MessageBuilderExtensions.SetClusterId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(System.String)
    name: SetClusterId
    nameWithType: MessageBuilderExtensions.SetClusterId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetType(String)
  nameWithType: MessageBuilderExtensions.SetType(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(System.String)
    name: SetType
    nameWithType: MessageBuilderExtensions.SetType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(System.String)
    name: SetType
    nameWithType: MessageBuilderExtensions.SetType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetCorrelationId(String)
  nameWithType: MessageBuilderExtensions.SetCorrelationId(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(System.String)
    name: SetCorrelationId
    nameWithType: MessageBuilderExtensions.SetCorrelationId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(System.String)
    name: SetCorrelationId
    nameWithType: MessageBuilderExtensions.SetCorrelationId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetReplyTo(String)
  nameWithType: MessageBuilderExtensions.SetReplyTo(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(System.String)
    name: SetReplyTo
    nameWithType: MessageBuilderExtensions.SetReplyTo
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(System.String)
    name: SetReplyTo
    nameWithType: MessageBuilderExtensions.SetReplyTo
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.RabbitMQ.Core.Address)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  name: SetReplyToAddress(Address)
  nameWithType: MessageBuilderExtensions.SetReplyToAddress(Address)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.RabbitMQ.Core.Address)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddress
    nameWithType: MessageBuilderExtensions.SetReplyToAddress
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddress
    nameWithType: MessageBuilderExtensions.SetReplyToAddress
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetContentType(String)
  nameWithType: MessageBuilderExtensions.SetContentType(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(System.String)
    name: SetContentType
    nameWithType: MessageBuilderExtensions.SetContentType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(System.String)
    name: SetContentType
    nameWithType: MessageBuilderExtensions.SetContentType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetContentEncoding(String)
  nameWithType: MessageBuilderExtensions.SetContentEncoding(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(System.String)
    name: SetContentEncoding
    nameWithType: MessageBuilderExtensions.SetContentEncoding
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(System.String)
    name: SetContentEncoding
    nameWithType: MessageBuilderExtensions.SetContentEncoding
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  name: SetContentLength(Int64)
  nameWithType: MessageBuilderExtensions.SetContentLength(Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(System.Int64)
    name: SetContentLength
    nameWithType: MessageBuilderExtensions.SetContentLength
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(System.Int64)
    name: SetContentLength
    nameWithType: MessageBuilderExtensions.SetContentLength
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  name: SetDeliveryMode(MessageDeliveryMode)
  nameWithType: MessageBuilderExtensions.SetDeliveryMode(MessageDeliveryMode)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryMode
    nameWithType: MessageBuilderExtensions.SetDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryMode
    nameWithType: MessageBuilderExtensions.SetDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetExpiration(String)
  nameWithType: MessageBuilderExtensions.SetExpiration(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(System.String)
    name: SetExpiration
    nameWithType: MessageBuilderExtensions.SetExpiration
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(System.String)
    name: SetExpiration
    nameWithType: MessageBuilderExtensions.SetExpiration
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  name: SetPriority(Int32)
  nameWithType: MessageBuilderExtensions.SetPriority(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(System.Int32)
    name: SetPriority
    nameWithType: MessageBuilderExtensions.SetPriority
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(System.Int32)
    name: SetPriority
    nameWithType: MessageBuilderExtensions.SetPriority
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetReceivedExchange(String)
  nameWithType: MessageBuilderExtensions.SetReceivedExchange(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(System.String)
    name: SetReceivedExchange
    nameWithType: MessageBuilderExtensions.SetReceivedExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(System.String)
    name: SetReceivedExchange
    nameWithType: MessageBuilderExtensions.SetReceivedExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetReceivedRoutingKey(String)
  nameWithType: MessageBuilderExtensions.SetReceivedRoutingKey(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(System.String)
    name: SetReceivedRoutingKey
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKey
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(System.String)
    name: SetReceivedRoutingKey
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKey
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(System.Boolean)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  name: SetRedelivered(Boolean)
  nameWithType: MessageBuilderExtensions.SetRedelivered(Boolean)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(System.Boolean)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(System.Boolean)
    name: SetRedelivered
    nameWithType: MessageBuilderExtensions.SetRedelivered
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(System.Boolean)
    name: SetRedelivered
    nameWithType: MessageBuilderExtensions.SetRedelivered
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(System.UInt64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  name: SetDeliveryTag(UInt64)
  nameWithType: MessageBuilderExtensions.SetDeliveryTag(UInt64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(System.UInt64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(System.UInt64)
    name: SetDeliveryTag
    nameWithType: MessageBuilderExtensions.SetDeliveryTag
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(System.UInt64)
    name: SetDeliveryTag
    nameWithType: MessageBuilderExtensions.SetDeliveryTag
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(System.UInt32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  name: SetMessageCount(UInt32)
  nameWithType: MessageBuilderExtensions.SetMessageCount(UInt32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(System.UInt32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(System.UInt32)
    name: SetMessageCount
    nameWithType: MessageBuilderExtensions.SetMessageCount
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(System.UInt32)
    name: SetMessageCount
    nameWithType: MessageBuilderExtensions.SetMessageCount
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  name: SetTimestampIfAbsent(Int64)
  nameWithType: MessageBuilderExtensions.SetTimestampIfAbsent(Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(System.Int64)
    name: SetTimestampIfAbsent
    nameWithType: MessageBuilderExtensions.SetTimestampIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(System.Int64)
    name: SetTimestampIfAbsent
    nameWithType: MessageBuilderExtensions.SetTimestampIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetMessageIdIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetMessageIdIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(System.String)
    name: SetMessageIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(System.String)
    name: SetMessageIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetUserIdIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetUserIdIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(System.String)
    name: SetUserIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetUserIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(System.String)
    name: SetUserIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetUserIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetAppIdIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetAppIdIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(System.String)
    name: SetAppIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetAppIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(System.String)
    name: SetAppIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetAppIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetClusterIdIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetClusterIdIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(System.String)
    name: SetClusterIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetClusterIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(System.String)
    name: SetClusterIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetClusterIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetTypeIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetTypeIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(System.String)
    name: SetTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(System.String)
    name: SetTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetCorrelationIdIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetCorrelationIdIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(System.String)
    name: SetCorrelationIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetCorrelationIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(System.String)
    name: SetCorrelationIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetCorrelationIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetReplyToIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetReplyToIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(System.String)
    name: SetReplyToIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(System.String)
    name: SetReplyToIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.Address)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  name: SetReplyToAddressIfAbsent(Address)
  nameWithType: MessageBuilderExtensions.SetReplyToAddressIfAbsent(Address)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.Address)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddressIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToAddressIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddressIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToAddressIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetContentTypeIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetContentTypeIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(System.String)
    name: SetContentTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(System.String)
    name: SetContentTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetContentEncodingIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetContentEncodingIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(System.String)
    name: SetContentEncodingIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentEncodingIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(System.String)
    name: SetContentEncodingIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentEncodingIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  name: SetContentLengthIfAbsent(Int64)
  nameWithType: MessageBuilderExtensions.SetContentLengthIfAbsent(Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(System.Int64)
    name: SetContentLengthIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentLengthIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(System.Int64)
    name: SetContentLengthIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentLengthIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  name: SetDeliveryModeIfAbsent(MessageDeliveryMode)
  nameWithType: MessageBuilderExtensions.SetDeliveryModeIfAbsent(MessageDeliveryMode)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryModeIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryModeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryModeIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryModeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetExpirationIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetExpirationIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(System.String)
    name: SetExpirationIfAbsent
    nameWithType: MessageBuilderExtensions.SetExpirationIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(System.String)
    name: SetExpirationIfAbsent
    nameWithType: MessageBuilderExtensions.SetExpirationIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  name: SetPriorityIfAbsent(Int32)
  nameWithType: MessageBuilderExtensions.SetPriorityIfAbsent(Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(System.Int32)
    name: SetPriorityIfAbsent
    nameWithType: MessageBuilderExtensions.SetPriorityIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(System.Int32)
    name: SetPriorityIfAbsent
    nameWithType: MessageBuilderExtensions.SetPriorityIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetReceivedExchangeIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetReceivedExchangeIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(System.String)
    name: SetReceivedExchangeIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedExchangeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(System.String)
    name: SetReceivedExchangeIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedExchangeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  name: SetReceivedRoutingKeyIfAbsent(String)
  nameWithType: MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(System.String)
    name: SetReceivedRoutingKeyIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(System.String)
    name: SetReceivedRoutingKeyIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(System.Boolean)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  name: SetRedeliveredIfAbsent(Boolean)
  nameWithType: MessageBuilderExtensions.SetRedeliveredIfAbsent(Boolean)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(System.Boolean)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(System.Boolean)
    name: SetRedeliveredIfAbsent
    nameWithType: MessageBuilderExtensions.SetRedeliveredIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(System.Boolean)
    name: SetRedeliveredIfAbsent
    nameWithType: MessageBuilderExtensions.SetRedeliveredIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(System.UInt64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  name: SetDeliveryTagIfAbsent(UInt64)
  nameWithType: MessageBuilderExtensions.SetDeliveryTagIfAbsent(UInt64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(System.UInt64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(System.UInt64)
    name: SetDeliveryTagIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryTagIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(System.UInt64)
    name: SetDeliveryTagIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryTagIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.AbstractMessageBuilder.Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(System.UInt32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  parent: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  definition: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  name: SetMessageCountIfAbsent(UInt32)
  nameWithType: MessageBuilderExtensions.SetMessageCountIfAbsent(UInt32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(System.UInt32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(System.UInt32)
    name: SetMessageCountIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageCountIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(System.UInt32)
    name: SetMessageCountIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageCountIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Steeltoe.Messaging.Support
  commentId: N:Steeltoe.Messaging.Support
  name: Steeltoe.Messaging.Support
  nameWithType: Steeltoe.Messaging.Support
  fullName: Steeltoe.Messaging.Support
- uid: Steeltoe.Messaging.Support.MessageBuilder`1
  commentId: T:Steeltoe.Messaging.Support.MessageBuilder`1
  name: MessageBuilder<P>
  nameWithType: MessageBuilder<P>
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>
  nameWithType.vb: MessageBuilder(Of P)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P)
  name.vb: MessageBuilder(Of P)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1
    name: MessageBuilder
    nameWithType: MessageBuilder
    fullName: Steeltoe.Messaging.Support.MessageBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: P
    nameWithType: P
    fullName: P
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1
    name: MessageBuilder
    nameWithType: MessageBuilder
    fullName: Steeltoe.Messaging.Support.MessageBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: P
    nameWithType: P
    fullName: P
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  name: SetHeaders(MessageHeaderAccessor)
  nameWithType: MessageBuilder<P>.SetHeaders(MessageHeaderAccessor)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  nameWithType.vb: MessageBuilder(Of P).SetHeaders(MessageHeaderAccessor)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
    name: SetHeaders
    nameWithType: MessageBuilder<P>.SetHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.MessageHeaderAccessor
    name: MessageHeaderAccessor
    nameWithType: MessageHeaderAccessor
    fullName: Steeltoe.Messaging.Support.MessageHeaderAccessor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor)
    name: SetHeaders
    nameWithType: MessageBuilder(Of P).SetHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.MessageHeaderAccessor
    name: MessageHeaderAccessor
    nameWithType: MessageHeaderAccessor
    fullName: Steeltoe.Messaging.Support.MessageHeaderAccessor
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeader(System.String,System.Object)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.SetHeader(System.String,System.Object)
  isExternal: true
  name: SetHeader(String, Object)
  nameWithType: MessageBuilder<P>.SetHeader(String, Object)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeader(System.String, System.Object)
  nameWithType.vb: MessageBuilder(Of P).SetHeader(String, Object)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeader(System.String, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeader(System.String,System.Object)
    name: SetHeader
    nameWithType: MessageBuilder<P>.SetHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeader(System.String,System.Object)
    name: SetHeader
    nameWithType: MessageBuilder(Of P).SetHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaderIfAbsent(System.String,System.Object)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaderIfAbsent(System.String,System.Object)
  isExternal: true
  name: SetHeaderIfAbsent(String, Object)
  nameWithType: MessageBuilder<P>.SetHeaderIfAbsent(String, Object)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaderIfAbsent(System.String, System.Object)
  nameWithType.vb: MessageBuilder(Of P).SetHeaderIfAbsent(String, Object)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaderIfAbsent(System.String, System.Object)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaderIfAbsent(System.String,System.Object)
    name: SetHeaderIfAbsent
    nameWithType: MessageBuilder<P>.SetHeaderIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetHeaderIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetHeaderIfAbsent(System.String,System.Object)
    name: SetHeaderIfAbsent
    nameWithType: MessageBuilder(Of P).SetHeaderIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetHeaderIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeaders(System.String[])
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeaders(System.String[])
  isExternal: true
  name: RemoveHeaders(String[])
  nameWithType: MessageBuilder<P>.RemoveHeaders(String[])
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeaders(System.String[])
  nameWithType.vb: MessageBuilder(Of P).RemoveHeaders(String())
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeaders(System.String())
  name.vb: RemoveHeaders(String())
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeaders(System.String[])
    name: RemoveHeaders
    nameWithType: MessageBuilder<P>.RemoveHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeaders(System.String[])
    name: RemoveHeaders
    nameWithType: MessageBuilder(Of P).RemoveHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeader(System.String)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeader(System.String)
  isExternal: true
  name: RemoveHeader(String)
  nameWithType: MessageBuilder<P>.RemoveHeader(String)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeader(System.String)
  nameWithType.vb: MessageBuilder(Of P).RemoveHeader(String)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeader(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeader(System.String)
    name: RemoveHeader
    nameWithType: MessageBuilder<P>.RemoveHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.RemoveHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.RemoveHeader(System.String)
    name: RemoveHeader
    nameWithType: MessageBuilder(Of P).RemoveHeader
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).RemoveHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: CopyHeaders(IDictionary<String, Object>)
  nameWithType: MessageBuilder<P>.CopyHeaders(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeaders(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: MessageBuilder(Of P).CopyHeaders(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeaders(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CopyHeaders(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeaders
    nameWithType: MessageBuilder<P>.CopyHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeaders(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeaders
    nameWithType: MessageBuilder(Of P).CopyHeaders
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeaders
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
  name: CopyHeadersIfAbsent(IDictionary<String, Object>)
  nameWithType: MessageBuilder<P>.CopyHeadersIfAbsent(IDictionary<String, Object>)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: MessageBuilder(Of P).CopyHeadersIfAbsent(IDictionary(Of String, Object))
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeadersIfAbsent(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CopyHeadersIfAbsent(IDictionary(Of String, Object))
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeadersIfAbsent
    nameWithType: MessageBuilder<P>.CopyHeadersIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.CopyHeadersIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.CopyHeadersIfAbsent(System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CopyHeadersIfAbsent
    nameWithType: MessageBuilder(Of P).CopyHeadersIfAbsent
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).CopyHeadersIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  name: SetReplyChannel(IMessageChannel)
  nameWithType: MessageBuilder<P>.SetReplyChannel(IMessageChannel)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  nameWithType.vb: MessageBuilder(Of P).SetReplyChannel(IMessageChannel)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetReplyChannel
    nameWithType: MessageBuilder<P>.SetReplyChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetReplyChannel
    nameWithType: MessageBuilder(Of P).SetReplyChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannelName(System.String)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannelName(System.String)
  isExternal: true
  name: SetReplyChannelName(String)
  nameWithType: MessageBuilder<P>.SetReplyChannelName(String)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannelName(System.String)
  nameWithType.vb: MessageBuilder(Of P).SetReplyChannelName(String)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannelName(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannelName(System.String)
    name: SetReplyChannelName
    nameWithType: MessageBuilder<P>.SetReplyChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetReplyChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetReplyChannelName(System.String)
    name: SetReplyChannelName
    nameWithType: MessageBuilder(Of P).SetReplyChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetReplyChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  name: SetErrorChannel(IMessageChannel)
  nameWithType: MessageBuilder<P>.SetErrorChannel(IMessageChannel)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  nameWithType.vb: MessageBuilder(Of P).SetErrorChannel(IMessageChannel)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetErrorChannel
    nameWithType: MessageBuilder<P>.SetErrorChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannel(Steeltoe.Messaging.IMessageChannel)
    name: SetErrorChannel
    nameWithType: MessageBuilder(Of P).SetErrorChannel
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.IMessageChannel
    name: IMessageChannel
    nameWithType: IMessageChannel
    fullName: Steeltoe.Messaging.IMessageChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannelName(System.String)
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannelName(System.String)
  isExternal: true
  name: SetErrorChannelName(String)
  nameWithType: MessageBuilder<P>.SetErrorChannelName(String)
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannelName(System.String)
  nameWithType.vb: MessageBuilder(Of P).SetErrorChannelName(String)
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannelName(System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannelName(System.String)
    name: SetErrorChannelName
    nameWithType: MessageBuilder<P>.SetErrorChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.SetErrorChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.SetErrorChannelName(System.String)
    name: SetErrorChannelName
    nameWithType: MessageBuilder(Of P).SetErrorChannelName
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).SetErrorChannelName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.Support.MessageBuilder`1.Build
  commentId: M:Steeltoe.Messaging.Support.MessageBuilder`1.Build
  name: Build()
  nameWithType: MessageBuilder<P>.Build()
  fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.Build()
  nameWithType.vb: MessageBuilder(Of P).Build()
  fullName.vb: Steeltoe.Messaging.Support.MessageBuilder(Of P).Build()
  spec.csharp:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.Build
    name: Build
    nameWithType: MessageBuilder<P>.Build
    fullName: Steeltoe.Messaging.Support.MessageBuilder<P>.Build
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.Support.MessageBuilder`1.Build
    name: Build
    nameWithType: MessageBuilder(Of P).Build
    fullName: Steeltoe.Messaging.Support.MessageBuilder(Of P).Build
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  isExternal: true
  name: SetTimestamp(AbstractMessageBuilder, Int64)
  nameWithType: MessageBuilderExtensions.SetTimestamp(AbstractMessageBuilder, Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetTimestamp
    nameWithType: MessageBuilderExtensions.SetTimestamp
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetTimestamp
    nameWithType: MessageBuilderExtensions.SetTimestamp
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  commentId: T:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
  parent: Steeltoe.Messaging.RabbitMQ.Extensions
  name: MessageBuilderExtensions
  nameWithType: MessageBuilderExtensions
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetMessageId(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetMessageId(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetMessageId
    nameWithType: MessageBuilderExtensions.SetMessageId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetMessageId
    nameWithType: MessageBuilderExtensions.SetMessageId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetUserId(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetUserId(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetUserId
    nameWithType: MessageBuilderExtensions.SetUserId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetUserId
    nameWithType: MessageBuilderExtensions.SetUserId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetAppId(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetAppId(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetAppId
    nameWithType: MessageBuilderExtensions.SetAppId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetAppId
    nameWithType: MessageBuilderExtensions.SetAppId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetClusterId(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetClusterId(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetClusterId
    nameWithType: MessageBuilderExtensions.SetClusterId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetClusterId
    nameWithType: MessageBuilderExtensions.SetClusterId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetType(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetType(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetType
    nameWithType: MessageBuilderExtensions.SetType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetType
    nameWithType: MessageBuilderExtensions.SetType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetCorrelationId(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetCorrelationId(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetCorrelationId
    nameWithType: MessageBuilderExtensions.SetCorrelationId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetCorrelationId
    nameWithType: MessageBuilderExtensions.SetCorrelationId
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetReplyTo(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetReplyTo(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReplyTo
    nameWithType: MessageBuilderExtensions.SetReplyTo
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReplyTo
    nameWithType: MessageBuilderExtensions.SetReplyTo
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  name: SetReplyToAddress(AbstractMessageBuilder, Address)
  nameWithType: MessageBuilderExtensions.SetReplyToAddress(AbstractMessageBuilder, Address)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.Support.AbstractMessageBuilder, Steeltoe.Messaging.RabbitMQ.Core.Address)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddress
    nameWithType: MessageBuilderExtensions.SetReplyToAddress
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddress
    nameWithType: MessageBuilderExtensions.SetReplyToAddress
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetContentType(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetContentType(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentType
    nameWithType: MessageBuilderExtensions.SetContentType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentType
    nameWithType: MessageBuilderExtensions.SetContentType
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetContentEncoding(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetContentEncoding(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentEncoding
    nameWithType: MessageBuilderExtensions.SetContentEncoding
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentEncoding
    nameWithType: MessageBuilderExtensions.SetContentEncoding
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  isExternal: true
  name: SetContentLength(AbstractMessageBuilder, Int64)
  nameWithType: MessageBuilderExtensions.SetContentLength(AbstractMessageBuilder, Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetContentLength
    nameWithType: MessageBuilderExtensions.SetContentLength
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetContentLength
    nameWithType: MessageBuilderExtensions.SetContentLength
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  name: SetDeliveryMode(AbstractMessageBuilder, MessageDeliveryMode)
  nameWithType: MessageBuilderExtensions.SetDeliveryMode(AbstractMessageBuilder, MessageDeliveryMode)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.Support.AbstractMessageBuilder, Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryMode
    nameWithType: MessageBuilderExtensions.SetDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryMode
    nameWithType: MessageBuilderExtensions.SetDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetExpiration(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetExpiration(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetExpiration
    nameWithType: MessageBuilderExtensions.SetExpiration
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetExpiration
    nameWithType: MessageBuilderExtensions.SetExpiration
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  isExternal: true
  name: SetPriority(AbstractMessageBuilder, Int32)
  nameWithType: MessageBuilderExtensions.SetPriority(AbstractMessageBuilder, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
    name: SetPriority
    nameWithType: MessageBuilderExtensions.SetPriority
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
    name: SetPriority
    nameWithType: MessageBuilderExtensions.SetPriority
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetReceivedExchange(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetReceivedExchange(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedExchange
    nameWithType: MessageBuilderExtensions.SetReceivedExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedExchange
    nameWithType: MessageBuilderExtensions.SetReceivedExchange
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetReceivedRoutingKey(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetReceivedRoutingKey(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedRoutingKey
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKey
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedRoutingKey
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKey
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  isExternal: true
  name: SetRedelivered(AbstractMessageBuilder, Boolean)
  nameWithType: MessageBuilderExtensions.SetRedelivered(AbstractMessageBuilder, Boolean)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Boolean)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
    name: SetRedelivered
    nameWithType: MessageBuilderExtensions.SetRedelivered
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
    name: SetRedelivered
    nameWithType: MessageBuilderExtensions.SetRedelivered
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  isExternal: true
  name: SetDeliveryTag(AbstractMessageBuilder, UInt64)
  nameWithType: MessageBuilderExtensions.SetDeliveryTag(AbstractMessageBuilder, UInt64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.UInt64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
    name: SetDeliveryTag
    nameWithType: MessageBuilderExtensions.SetDeliveryTag
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
    name: SetDeliveryTag
    nameWithType: MessageBuilderExtensions.SetDeliveryTag
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  isExternal: true
  name: SetMessageCount(AbstractMessageBuilder, UInt32)
  nameWithType: MessageBuilderExtensions.SetMessageCount(AbstractMessageBuilder, UInt32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.UInt32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
    name: SetMessageCount
    nameWithType: MessageBuilderExtensions.SetMessageCount
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
    name: SetMessageCount
    nameWithType: MessageBuilderExtensions.SetMessageCount
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  isExternal: true
  name: SetTimestampIfAbsent(AbstractMessageBuilder, Int64)
  nameWithType: MessageBuilderExtensions.SetTimestampIfAbsent(AbstractMessageBuilder, Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetTimestampIfAbsent
    nameWithType: MessageBuilderExtensions.SetTimestampIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetTimestampIfAbsent
    nameWithType: MessageBuilderExtensions.SetTimestampIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetMessageIdIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetMessageIdIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetMessageIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetMessageIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetUserIdIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetUserIdIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetUserIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetUserIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetUserIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetUserIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetAppIdIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetAppIdIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetAppIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetAppIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetAppIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetAppIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetClusterIdIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetClusterIdIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetClusterIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetClusterIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetClusterIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetClusterIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetTypeIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetTypeIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetCorrelationIdIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetCorrelationIdIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetCorrelationIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetCorrelationIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetCorrelationIdIfAbsent
    nameWithType: MessageBuilderExtensions.SetCorrelationIdIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetReplyToIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetReplyToIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReplyToIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReplyToIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
  name: SetReplyToAddressIfAbsent(AbstractMessageBuilder, Address)
  nameWithType: MessageBuilderExtensions.SetReplyToAddressIfAbsent(AbstractMessageBuilder, Address)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, Steeltoe.Messaging.RabbitMQ.Core.Address)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddressIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToAddressIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.Address)
    name: SetReplyToAddressIfAbsent
    nameWithType: MessageBuilderExtensions.SetReplyToAddressIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.Address
    name: Address
    nameWithType: Address
    fullName: Steeltoe.Messaging.RabbitMQ.Core.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetContentTypeIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetContentTypeIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentTypeIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentTypeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetContentEncodingIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetContentEncodingIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentEncodingIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentEncodingIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetContentEncodingIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentEncodingIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
  isExternal: true
  name: SetContentLengthIfAbsent(AbstractMessageBuilder, Int64)
  nameWithType: MessageBuilderExtensions.SetContentLengthIfAbsent(AbstractMessageBuilder, Int64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Int64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetContentLengthIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentLengthIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int64)
    name: SetContentLengthIfAbsent
    nameWithType: MessageBuilderExtensions.SetContentLengthIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  name: SetDeliveryModeIfAbsent(AbstractMessageBuilder, MessageDeliveryMode)
  nameWithType: MessageBuilderExtensions.SetDeliveryModeIfAbsent(AbstractMessageBuilder, MessageDeliveryMode)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryModeIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryModeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode)
    name: SetDeliveryModeIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryModeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
    name: MessageDeliveryMode
    nameWithType: MessageDeliveryMode
    fullName: Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetExpirationIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetExpirationIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetExpirationIfAbsent
    nameWithType: MessageBuilderExtensions.SetExpirationIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetExpirationIfAbsent
    nameWithType: MessageBuilderExtensions.SetExpirationIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
  isExternal: true
  name: SetPriorityIfAbsent(AbstractMessageBuilder, Int32)
  nameWithType: MessageBuilderExtensions.SetPriorityIfAbsent(AbstractMessageBuilder, Int32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Int32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
    name: SetPriorityIfAbsent
    nameWithType: MessageBuilderExtensions.SetPriorityIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Int32)
    name: SetPriorityIfAbsent
    nameWithType: MessageBuilderExtensions.SetPriorityIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetReceivedExchangeIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetReceivedExchangeIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedExchangeIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedExchangeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedExchangeIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedExchangeIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
  isExternal: true
  name: SetReceivedRoutingKeyIfAbsent(AbstractMessageBuilder, String)
  nameWithType: MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(AbstractMessageBuilder, String)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.String)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedRoutingKeyIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.String)
    name: SetReceivedRoutingKeyIfAbsent
    nameWithType: MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
  isExternal: true
  name: SetRedeliveredIfAbsent(AbstractMessageBuilder, Boolean)
  nameWithType: MessageBuilderExtensions.SetRedeliveredIfAbsent(AbstractMessageBuilder, Boolean)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.Boolean)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
    name: SetRedeliveredIfAbsent
    nameWithType: MessageBuilderExtensions.SetRedeliveredIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.Boolean)
    name: SetRedeliveredIfAbsent
    nameWithType: MessageBuilderExtensions.SetRedeliveredIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
  isExternal: true
  name: SetDeliveryTagIfAbsent(AbstractMessageBuilder, UInt64)
  nameWithType: MessageBuilderExtensions.SetDeliveryTagIfAbsent(AbstractMessageBuilder, UInt64)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.UInt64)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
    name: SetDeliveryTagIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryTagIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt64)
    name: SetDeliveryTagIfAbsent
    nameWithType: MessageBuilderExtensions.SetDeliveryTagIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  commentId: M:Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
  isExternal: true
  name: SetMessageCountIfAbsent(AbstractMessageBuilder, UInt32)
  nameWithType: MessageBuilderExtensions.SetMessageCountIfAbsent(AbstractMessageBuilder, UInt32)
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder, System.UInt32)
  spec.csharp:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
    name: SetMessageCountIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageCountIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(Steeltoe.Messaging.Support.AbstractMessageBuilder,System.UInt32)
    name: SetMessageCountIfAbsent
    nameWithType: MessageBuilderExtensions.SetMessageCountIfAbsent
    fullName: Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Steeltoe.Messaging.Support.AbstractMessageBuilder
    name: AbstractMessageBuilder
    nameWithType: AbstractMessageBuilder
    fullName: Steeltoe.Messaging.Support.AbstractMessageBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.RabbitMQ.Extensions
  commentId: N:Steeltoe.Messaging.RabbitMQ.Extensions
  name: Steeltoe.Messaging.RabbitMQ.Extensions
  nameWithType: Steeltoe.Messaging.RabbitMQ.Extensions
  fullName: Steeltoe.Messaging.RabbitMQ.Extensions
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor*
  commentId: Overload:Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder`1.#ctor
  name: RabbitMessageBuilder
  nameWithType: RabbitMessageBuilder<P>.RabbitMessageBuilder
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder
  nameWithType.vb: RabbitMessageBuilder(Of P).RabbitMessageBuilder
  fullName.vb: Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder(Of P).RabbitMessageBuilder
- uid: Steeltoe.Messaging.IMessage{{P}}
  commentId: T:Steeltoe.Messaging.IMessage{`0}
  parent: Steeltoe.Messaging
  definition: Steeltoe.Messaging.IMessage`1
  name: IMessage<P>
  nameWithType: IMessage<P>
  fullName: Steeltoe.Messaging.IMessage<P>
  nameWithType.vb: IMessage(Of P)
  fullName.vb: Steeltoe.Messaging.IMessage(Of P)
  name.vb: IMessage(Of P)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: P
    nameWithType: P
    fullName: P
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: P
    nameWithType: P
    fullName: P
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging.IMessage`1
  commentId: T:Steeltoe.Messaging.IMessage`1
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Steeltoe.Messaging.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Steeltoe.Messaging.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Steeltoe.Messaging.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Steeltoe.Messaging.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Steeltoe.Messaging
  commentId: N:Steeltoe.Messaging
  name: Steeltoe.Messaging
  nameWithType: Steeltoe.Messaging
  fullName: Steeltoe.Messaging
- uid: Steeltoe.Messaging.IMessage
  commentId: T:Steeltoe.Messaging.IMessage
  parent: Steeltoe.Messaging
  name: IMessage
  nameWithType: IMessage
  fullName: Steeltoe.Messaging.IMessage
- uid: Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
  commentId: T:Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
  parent: Steeltoe.Messaging.RabbitMQ.Support
  name: RabbitHeaderAccessor
  nameWithType: RabbitHeaderAccessor
  fullName: Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
- uid: '{P}'
  commentId: '!:P'
  definition: P
  name: P
  nameWithType: P
  fullName: P
- uid: P
  name: P
  nameWithType: P
  fullName: P
