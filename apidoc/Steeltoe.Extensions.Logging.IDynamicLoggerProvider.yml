### YamlMime:ManagedReference
items:
- uid: Steeltoe.Extensions.Logging.IDynamicLoggerProvider
  commentId: T:Steeltoe.Extensions.Logging.IDynamicLoggerProvider
  id: IDynamicLoggerProvider
  parent: Steeltoe.Extensions.Logging
  children:
  - Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations
  - Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel(System.String,System.Nullable{LogLevel})
  langs:
  - csharp
  - vb
  name: IDynamicLoggerProvider
  nameWithType: IDynamicLoggerProvider
  fullName: Steeltoe.Extensions.Logging.IDynamicLoggerProvider
  type: Interface
  source:
    remote:
      path: src/Logging/src/Abstractions/IDynamicLoggerProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: IDynamicLoggerProvider
    path: ../Steeltoe/src/Logging/src/Abstractions/IDynamicLoggerProvider.cs
    startLine: 9
  assemblies:
  - Steeltoe.Extensions.Logging.Abstractions
  namespace: Steeltoe.Extensions.Logging
  syntax:
    content: 'public interface IDynamicLoggerProvider : ILoggerProvider'
    content.vb: >-
      Public Interface IDynamicLoggerProvider

          Inherits ILoggerProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations
  commentId: M:Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations
  id: GetLoggerConfigurations
  parent: Steeltoe.Extensions.Logging.IDynamicLoggerProvider
  langs:
  - csharp
  - vb
  name: GetLoggerConfigurations()
  nameWithType: IDynamicLoggerProvider.GetLoggerConfigurations()
  fullName: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations()
  type: Method
  source:
    remote:
      path: src/Logging/src/Abstractions/IDynamicLoggerProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: GetLoggerConfigurations
    path: ../Steeltoe/src/Logging/src/Abstractions/IDynamicLoggerProvider.cs
    startLine: 15
  assemblies:
  - Steeltoe.Extensions.Logging.Abstractions
  namespace: Steeltoe.Extensions.Logging
  summary: "\nGet a list of all known namespaces and loggers\n"
  example: []
  syntax:
    content: ICollection<ILoggerConfiguration> GetLoggerConfigurations()
    return:
      type: System.Collections.Generic.ICollection{Steeltoe.Extensions.Logging.ILoggerConfiguration}
      description: A collection of all known namespaces and loggers with their configurations
    content.vb: Function GetLoggerConfigurations As ICollection(Of ILoggerConfiguration)
  overload: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations*
- uid: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel(System.String,System.Nullable{LogLevel})
  commentId: M:Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel(System.String,System.Nullable{LogLevel})
  id: SetLogLevel(System.String,System.Nullable{LogLevel})
  parent: Steeltoe.Extensions.Logging.IDynamicLoggerProvider
  langs:
  - csharp
  - vb
  name: SetLogLevel(String, Nullable<LogLevel>)
  nameWithType: IDynamicLoggerProvider.SetLogLevel(String, Nullable<LogLevel>)
  fullName: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel(System.String, System.Nullable<LogLevel>)
  type: Method
  source:
    remote:
      path: src/Logging/src/Abstractions/IDynamicLoggerProvider.cs
      branch: master
      repo: https://github.com/SteeltoeOSS/steeltoe
    id: SetLogLevel
    path: ../Steeltoe/src/Logging/src/Abstractions/IDynamicLoggerProvider.cs
    startLine: 22
  assemblies:
  - Steeltoe.Extensions.Logging.Abstractions
  namespace: Steeltoe.Extensions.Logging
  summary: "\nSet the logging threshold for a logger\n"
  example: []
  syntax:
    content: void SetLogLevel(string category, LogLevel? level)
    parameters:
    - id: category
      type: System.String
      description: A namespace or fully qualified logger name to adjust
    - id: level
      type: System.Nullable{LogLevel}
      description: The minimum level that should be logged
    content.vb: Sub SetLogLevel(category As String, level As LogLevel?)
  overload: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel*
  nameWithType.vb: IDynamicLoggerProvider.SetLogLevel(String, Nullable(Of LogLevel))
  fullName.vb: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel(System.String, System.Nullable(Of LogLevel))
  name.vb: SetLogLevel(String, Nullable(Of LogLevel))
references:
- uid: Steeltoe.Extensions.Logging
  commentId: N:Steeltoe.Extensions.Logging
  name: Steeltoe.Extensions.Logging
  nameWithType: Steeltoe.Extensions.Logging
  fullName: Steeltoe.Extensions.Logging
- uid: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations*
  commentId: Overload:Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations
  name: GetLoggerConfigurations
  nameWithType: IDynamicLoggerProvider.GetLoggerConfigurations
  fullName: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.GetLoggerConfigurations
- uid: System.Collections.Generic.ICollection{Steeltoe.Extensions.Logging.ILoggerConfiguration}
  commentId: T:System.Collections.Generic.ICollection{Steeltoe.Extensions.Logging.ILoggerConfiguration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ILoggerConfiguration>
  nameWithType: ICollection<ILoggerConfiguration>
  fullName: System.Collections.Generic.ICollection<Steeltoe.Extensions.Logging.ILoggerConfiguration>
  nameWithType.vb: ICollection(Of ILoggerConfiguration)
  fullName.vb: System.Collections.Generic.ICollection(Of Steeltoe.Extensions.Logging.ILoggerConfiguration)
  name.vb: ICollection(Of ILoggerConfiguration)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Steeltoe.Extensions.Logging.ILoggerConfiguration
    name: ILoggerConfiguration
    nameWithType: ILoggerConfiguration
    fullName: Steeltoe.Extensions.Logging.ILoggerConfiguration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Steeltoe.Extensions.Logging.ILoggerConfiguration
    name: ILoggerConfiguration
    nameWithType: ILoggerConfiguration
    fullName: Steeltoe.Extensions.Logging.ILoggerConfiguration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel*
  commentId: Overload:Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel
  name: SetLogLevel
  nameWithType: IDynamicLoggerProvider.SetLogLevel
  fullName: Steeltoe.Extensions.Logging.IDynamicLoggerProvider.SetLogLevel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{LogLevel}
  commentId: T:System.Nullable{LogLevel}
  parent: System
  definition: System.Nullable`1
  name: Nullable<LogLevel>
  nameWithType: Nullable<LogLevel>
  fullName: System.Nullable<LogLevel>
  nameWithType.vb: Nullable(Of LogLevel)
  fullName.vb: System.Nullable(Of LogLevel)
  name.vb: Nullable(Of LogLevel)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
